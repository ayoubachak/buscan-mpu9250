
rescapt.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007794  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000016c  080078a0  080078a0  000178a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08007a0c  08007a0c  00017a0c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08007a10  08007a10  00017a10  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000020  20000000  08007a14  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000548  20000020  08007a34  00020020  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  20000568  08007a34  00020568  2**0
                  ALLOC
  8 .ARM.attributes 00000029  00000000  00000000  00020020  2**0
                  CONTENTS, READONLY
  9 .debug_info   00015fb4  00000000  00000000  00020049  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 00003861  00000000  00000000  00035ffd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_aranges 000012a0  00000000  00000000  00039860  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_ranges 00001118  00000000  00000000  0003ab00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_macro  0001e158  00000000  00000000  0003bc18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_line   0001d022  00000000  00000000  00059d70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_str    0008c8ff  00000000  00000000  00076d92  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .comment      00000050  00000000  00000000  00103691  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00004de0  00000000  00000000  001036e4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000020 	.word	0x20000020
 8000128:	00000000 	.word	0x00000000
 800012c:	08007888 	.word	0x08007888

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000024 	.word	0x20000024
 8000148:	08007888 	.word	0x08007888

0800014c <__aeabi_drsub>:
 800014c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000150:	e002      	b.n	8000158 <__adddf3>
 8000152:	bf00      	nop

08000154 <__aeabi_dsub>:
 8000154:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000158 <__adddf3>:
 8000158:	b530      	push	{r4, r5, lr}
 800015a:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800015e:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000162:	ea94 0f05 	teq	r4, r5
 8000166:	bf08      	it	eq
 8000168:	ea90 0f02 	teqeq	r0, r2
 800016c:	bf1f      	itttt	ne
 800016e:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000172:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000176:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800017a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800017e:	f000 80e2 	beq.w	8000346 <__adddf3+0x1ee>
 8000182:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000186:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800018a:	bfb8      	it	lt
 800018c:	426d      	neglt	r5, r5
 800018e:	dd0c      	ble.n	80001aa <__adddf3+0x52>
 8000190:	442c      	add	r4, r5
 8000192:	ea80 0202 	eor.w	r2, r0, r2
 8000196:	ea81 0303 	eor.w	r3, r1, r3
 800019a:	ea82 0000 	eor.w	r0, r2, r0
 800019e:	ea83 0101 	eor.w	r1, r3, r1
 80001a2:	ea80 0202 	eor.w	r2, r0, r2
 80001a6:	ea81 0303 	eor.w	r3, r1, r3
 80001aa:	2d36      	cmp	r5, #54	; 0x36
 80001ac:	bf88      	it	hi
 80001ae:	bd30      	pophi	{r4, r5, pc}
 80001b0:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001b4:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001b8:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001bc:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001c0:	d002      	beq.n	80001c8 <__adddf3+0x70>
 80001c2:	4240      	negs	r0, r0
 80001c4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001c8:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001cc:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001d0:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x84>
 80001d6:	4252      	negs	r2, r2
 80001d8:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001dc:	ea94 0f05 	teq	r4, r5
 80001e0:	f000 80a7 	beq.w	8000332 <__adddf3+0x1da>
 80001e4:	f1a4 0401 	sub.w	r4, r4, #1
 80001e8:	f1d5 0e20 	rsbs	lr, r5, #32
 80001ec:	db0d      	blt.n	800020a <__adddf3+0xb2>
 80001ee:	fa02 fc0e 	lsl.w	ip, r2, lr
 80001f2:	fa22 f205 	lsr.w	r2, r2, r5
 80001f6:	1880      	adds	r0, r0, r2
 80001f8:	f141 0100 	adc.w	r1, r1, #0
 80001fc:	fa03 f20e 	lsl.w	r2, r3, lr
 8000200:	1880      	adds	r0, r0, r2
 8000202:	fa43 f305 	asr.w	r3, r3, r5
 8000206:	4159      	adcs	r1, r3
 8000208:	e00e      	b.n	8000228 <__adddf3+0xd0>
 800020a:	f1a5 0520 	sub.w	r5, r5, #32
 800020e:	f10e 0e20 	add.w	lr, lr, #32
 8000212:	2a01      	cmp	r2, #1
 8000214:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000218:	bf28      	it	cs
 800021a:	f04c 0c02 	orrcs.w	ip, ip, #2
 800021e:	fa43 f305 	asr.w	r3, r3, r5
 8000222:	18c0      	adds	r0, r0, r3
 8000224:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000228:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800022c:	d507      	bpl.n	800023e <__adddf3+0xe6>
 800022e:	f04f 0e00 	mov.w	lr, #0
 8000232:	f1dc 0c00 	rsbs	ip, ip, #0
 8000236:	eb7e 0000 	sbcs.w	r0, lr, r0
 800023a:	eb6e 0101 	sbc.w	r1, lr, r1
 800023e:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000242:	d31b      	bcc.n	800027c <__adddf3+0x124>
 8000244:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000248:	d30c      	bcc.n	8000264 <__adddf3+0x10c>
 800024a:	0849      	lsrs	r1, r1, #1
 800024c:	ea5f 0030 	movs.w	r0, r0, rrx
 8000250:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000254:	f104 0401 	add.w	r4, r4, #1
 8000258:	ea4f 5244 	mov.w	r2, r4, lsl #21
 800025c:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000260:	f080 809a 	bcs.w	8000398 <__adddf3+0x240>
 8000264:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000268:	bf08      	it	eq
 800026a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800026e:	f150 0000 	adcs.w	r0, r0, #0
 8000272:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000276:	ea41 0105 	orr.w	r1, r1, r5
 800027a:	bd30      	pop	{r4, r5, pc}
 800027c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000280:	4140      	adcs	r0, r0
 8000282:	eb41 0101 	adc.w	r1, r1, r1
 8000286:	3c01      	subs	r4, #1
 8000288:	bf28      	it	cs
 800028a:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800028e:	d2e9      	bcs.n	8000264 <__adddf3+0x10c>
 8000290:	f091 0f00 	teq	r1, #0
 8000294:	bf04      	itt	eq
 8000296:	4601      	moveq	r1, r0
 8000298:	2000      	moveq	r0, #0
 800029a:	fab1 f381 	clz	r3, r1
 800029e:	bf08      	it	eq
 80002a0:	3320      	addeq	r3, #32
 80002a2:	f1a3 030b 	sub.w	r3, r3, #11
 80002a6:	f1b3 0220 	subs.w	r2, r3, #32
 80002aa:	da0c      	bge.n	80002c6 <__adddf3+0x16e>
 80002ac:	320c      	adds	r2, #12
 80002ae:	dd08      	ble.n	80002c2 <__adddf3+0x16a>
 80002b0:	f102 0c14 	add.w	ip, r2, #20
 80002b4:	f1c2 020c 	rsb	r2, r2, #12
 80002b8:	fa01 f00c 	lsl.w	r0, r1, ip
 80002bc:	fa21 f102 	lsr.w	r1, r1, r2
 80002c0:	e00c      	b.n	80002dc <__adddf3+0x184>
 80002c2:	f102 0214 	add.w	r2, r2, #20
 80002c6:	bfd8      	it	le
 80002c8:	f1c2 0c20 	rsble	ip, r2, #32
 80002cc:	fa01 f102 	lsl.w	r1, r1, r2
 80002d0:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002d4:	bfdc      	itt	le
 80002d6:	ea41 010c 	orrle.w	r1, r1, ip
 80002da:	4090      	lslle	r0, r2
 80002dc:	1ae4      	subs	r4, r4, r3
 80002de:	bfa2      	ittt	ge
 80002e0:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002e4:	4329      	orrge	r1, r5
 80002e6:	bd30      	popge	{r4, r5, pc}
 80002e8:	ea6f 0404 	mvn.w	r4, r4
 80002ec:	3c1f      	subs	r4, #31
 80002ee:	da1c      	bge.n	800032a <__adddf3+0x1d2>
 80002f0:	340c      	adds	r4, #12
 80002f2:	dc0e      	bgt.n	8000312 <__adddf3+0x1ba>
 80002f4:	f104 0414 	add.w	r4, r4, #20
 80002f8:	f1c4 0220 	rsb	r2, r4, #32
 80002fc:	fa20 f004 	lsr.w	r0, r0, r4
 8000300:	fa01 f302 	lsl.w	r3, r1, r2
 8000304:	ea40 0003 	orr.w	r0, r0, r3
 8000308:	fa21 f304 	lsr.w	r3, r1, r4
 800030c:	ea45 0103 	orr.w	r1, r5, r3
 8000310:	bd30      	pop	{r4, r5, pc}
 8000312:	f1c4 040c 	rsb	r4, r4, #12
 8000316:	f1c4 0220 	rsb	r2, r4, #32
 800031a:	fa20 f002 	lsr.w	r0, r0, r2
 800031e:	fa01 f304 	lsl.w	r3, r1, r4
 8000322:	ea40 0003 	orr.w	r0, r0, r3
 8000326:	4629      	mov	r1, r5
 8000328:	bd30      	pop	{r4, r5, pc}
 800032a:	fa21 f004 	lsr.w	r0, r1, r4
 800032e:	4629      	mov	r1, r5
 8000330:	bd30      	pop	{r4, r5, pc}
 8000332:	f094 0f00 	teq	r4, #0
 8000336:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800033a:	bf06      	itte	eq
 800033c:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000340:	3401      	addeq	r4, #1
 8000342:	3d01      	subne	r5, #1
 8000344:	e74e      	b.n	80001e4 <__adddf3+0x8c>
 8000346:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800034a:	bf18      	it	ne
 800034c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000350:	d029      	beq.n	80003a6 <__adddf3+0x24e>
 8000352:	ea94 0f05 	teq	r4, r5
 8000356:	bf08      	it	eq
 8000358:	ea90 0f02 	teqeq	r0, r2
 800035c:	d005      	beq.n	800036a <__adddf3+0x212>
 800035e:	ea54 0c00 	orrs.w	ip, r4, r0
 8000362:	bf04      	itt	eq
 8000364:	4619      	moveq	r1, r3
 8000366:	4610      	moveq	r0, r2
 8000368:	bd30      	pop	{r4, r5, pc}
 800036a:	ea91 0f03 	teq	r1, r3
 800036e:	bf1e      	ittt	ne
 8000370:	2100      	movne	r1, #0
 8000372:	2000      	movne	r0, #0
 8000374:	bd30      	popne	{r4, r5, pc}
 8000376:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800037a:	d105      	bne.n	8000388 <__adddf3+0x230>
 800037c:	0040      	lsls	r0, r0, #1
 800037e:	4149      	adcs	r1, r1
 8000380:	bf28      	it	cs
 8000382:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000386:	bd30      	pop	{r4, r5, pc}
 8000388:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 800038c:	bf3c      	itt	cc
 800038e:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000392:	bd30      	popcc	{r4, r5, pc}
 8000394:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000398:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 800039c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003a0:	f04f 0000 	mov.w	r0, #0
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003aa:	bf1a      	itte	ne
 80003ac:	4619      	movne	r1, r3
 80003ae:	4610      	movne	r0, r2
 80003b0:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003b4:	bf1c      	itt	ne
 80003b6:	460b      	movne	r3, r1
 80003b8:	4602      	movne	r2, r0
 80003ba:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003be:	bf06      	itte	eq
 80003c0:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003c4:	ea91 0f03 	teqeq	r1, r3
 80003c8:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003cc:	bd30      	pop	{r4, r5, pc}
 80003ce:	bf00      	nop

080003d0 <__aeabi_ui2d>:
 80003d0:	f090 0f00 	teq	r0, #0
 80003d4:	bf04      	itt	eq
 80003d6:	2100      	moveq	r1, #0
 80003d8:	4770      	bxeq	lr
 80003da:	b530      	push	{r4, r5, lr}
 80003dc:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003e0:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003e4:	f04f 0500 	mov.w	r5, #0
 80003e8:	f04f 0100 	mov.w	r1, #0
 80003ec:	e750      	b.n	8000290 <__adddf3+0x138>
 80003ee:	bf00      	nop

080003f0 <__aeabi_i2d>:
 80003f0:	f090 0f00 	teq	r0, #0
 80003f4:	bf04      	itt	eq
 80003f6:	2100      	moveq	r1, #0
 80003f8:	4770      	bxeq	lr
 80003fa:	b530      	push	{r4, r5, lr}
 80003fc:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000400:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000404:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000408:	bf48      	it	mi
 800040a:	4240      	negmi	r0, r0
 800040c:	f04f 0100 	mov.w	r1, #0
 8000410:	e73e      	b.n	8000290 <__adddf3+0x138>
 8000412:	bf00      	nop

08000414 <__aeabi_f2d>:
 8000414:	0042      	lsls	r2, r0, #1
 8000416:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800041a:	ea4f 0131 	mov.w	r1, r1, rrx
 800041e:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000422:	bf1f      	itttt	ne
 8000424:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000428:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 800042c:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000430:	4770      	bxne	lr
 8000432:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000436:	bf08      	it	eq
 8000438:	4770      	bxeq	lr
 800043a:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800043e:	bf04      	itt	eq
 8000440:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000444:	4770      	bxeq	lr
 8000446:	b530      	push	{r4, r5, lr}
 8000448:	f44f 7460 	mov.w	r4, #896	; 0x380
 800044c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000450:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000454:	e71c      	b.n	8000290 <__adddf3+0x138>
 8000456:	bf00      	nop

08000458 <__aeabi_ul2d>:
 8000458:	ea50 0201 	orrs.w	r2, r0, r1
 800045c:	bf08      	it	eq
 800045e:	4770      	bxeq	lr
 8000460:	b530      	push	{r4, r5, lr}
 8000462:	f04f 0500 	mov.w	r5, #0
 8000466:	e00a      	b.n	800047e <__aeabi_l2d+0x16>

08000468 <__aeabi_l2d>:
 8000468:	ea50 0201 	orrs.w	r2, r0, r1
 800046c:	bf08      	it	eq
 800046e:	4770      	bxeq	lr
 8000470:	b530      	push	{r4, r5, lr}
 8000472:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000476:	d502      	bpl.n	800047e <__aeabi_l2d+0x16>
 8000478:	4240      	negs	r0, r0
 800047a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800047e:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000482:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000486:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800048a:	f43f aed8 	beq.w	800023e <__adddf3+0xe6>
 800048e:	f04f 0203 	mov.w	r2, #3
 8000492:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000496:	bf18      	it	ne
 8000498:	3203      	addne	r2, #3
 800049a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800049e:	bf18      	it	ne
 80004a0:	3203      	addne	r2, #3
 80004a2:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004a6:	f1c2 0320 	rsb	r3, r2, #32
 80004aa:	fa00 fc03 	lsl.w	ip, r0, r3
 80004ae:	fa20 f002 	lsr.w	r0, r0, r2
 80004b2:	fa01 fe03 	lsl.w	lr, r1, r3
 80004b6:	ea40 000e 	orr.w	r0, r0, lr
 80004ba:	fa21 f102 	lsr.w	r1, r1, r2
 80004be:	4414      	add	r4, r2
 80004c0:	e6bd      	b.n	800023e <__adddf3+0xe6>
 80004c2:	bf00      	nop

080004c4 <__aeabi_dmul>:
 80004c4:	b570      	push	{r4, r5, r6, lr}
 80004c6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004ca:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004ce:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004d2:	bf1d      	ittte	ne
 80004d4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004d8:	ea94 0f0c 	teqne	r4, ip
 80004dc:	ea95 0f0c 	teqne	r5, ip
 80004e0:	f000 f8de 	bleq	80006a0 <__aeabi_dmul+0x1dc>
 80004e4:	442c      	add	r4, r5
 80004e6:	ea81 0603 	eor.w	r6, r1, r3
 80004ea:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80004ee:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80004f2:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80004f6:	bf18      	it	ne
 80004f8:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80004fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000500:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000504:	d038      	beq.n	8000578 <__aeabi_dmul+0xb4>
 8000506:	fba0 ce02 	umull	ip, lr, r0, r2
 800050a:	f04f 0500 	mov.w	r5, #0
 800050e:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000512:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000516:	fbe0 e503 	umlal	lr, r5, r0, r3
 800051a:	f04f 0600 	mov.w	r6, #0
 800051e:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000522:	f09c 0f00 	teq	ip, #0
 8000526:	bf18      	it	ne
 8000528:	f04e 0e01 	orrne.w	lr, lr, #1
 800052c:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000530:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000534:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000538:	d204      	bcs.n	8000544 <__aeabi_dmul+0x80>
 800053a:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800053e:	416d      	adcs	r5, r5
 8000540:	eb46 0606 	adc.w	r6, r6, r6
 8000544:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000548:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 800054c:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000550:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000554:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000558:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800055c:	bf88      	it	hi
 800055e:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000562:	d81e      	bhi.n	80005a2 <__aeabi_dmul+0xde>
 8000564:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000568:	bf08      	it	eq
 800056a:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800056e:	f150 0000 	adcs.w	r0, r0, #0
 8000572:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000576:	bd70      	pop	{r4, r5, r6, pc}
 8000578:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 800057c:	ea46 0101 	orr.w	r1, r6, r1
 8000580:	ea40 0002 	orr.w	r0, r0, r2
 8000584:	ea81 0103 	eor.w	r1, r1, r3
 8000588:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 800058c:	bfc2      	ittt	gt
 800058e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000592:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000596:	bd70      	popgt	{r4, r5, r6, pc}
 8000598:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800059c:	f04f 0e00 	mov.w	lr, #0
 80005a0:	3c01      	subs	r4, #1
 80005a2:	f300 80ab 	bgt.w	80006fc <__aeabi_dmul+0x238>
 80005a6:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005aa:	bfde      	ittt	le
 80005ac:	2000      	movle	r0, #0
 80005ae:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005b2:	bd70      	pople	{r4, r5, r6, pc}
 80005b4:	f1c4 0400 	rsb	r4, r4, #0
 80005b8:	3c20      	subs	r4, #32
 80005ba:	da35      	bge.n	8000628 <__aeabi_dmul+0x164>
 80005bc:	340c      	adds	r4, #12
 80005be:	dc1b      	bgt.n	80005f8 <__aeabi_dmul+0x134>
 80005c0:	f104 0414 	add.w	r4, r4, #20
 80005c4:	f1c4 0520 	rsb	r5, r4, #32
 80005c8:	fa00 f305 	lsl.w	r3, r0, r5
 80005cc:	fa20 f004 	lsr.w	r0, r0, r4
 80005d0:	fa01 f205 	lsl.w	r2, r1, r5
 80005d4:	ea40 0002 	orr.w	r0, r0, r2
 80005d8:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005dc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005e0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005e4:	fa21 f604 	lsr.w	r6, r1, r4
 80005e8:	eb42 0106 	adc.w	r1, r2, r6
 80005ec:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80005f0:	bf08      	it	eq
 80005f2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80005f6:	bd70      	pop	{r4, r5, r6, pc}
 80005f8:	f1c4 040c 	rsb	r4, r4, #12
 80005fc:	f1c4 0520 	rsb	r5, r4, #32
 8000600:	fa00 f304 	lsl.w	r3, r0, r4
 8000604:	fa20 f005 	lsr.w	r0, r0, r5
 8000608:	fa01 f204 	lsl.w	r2, r1, r4
 800060c:	ea40 0002 	orr.w	r0, r0, r2
 8000610:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000614:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000618:	f141 0100 	adc.w	r1, r1, #0
 800061c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000620:	bf08      	it	eq
 8000622:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000626:	bd70      	pop	{r4, r5, r6, pc}
 8000628:	f1c4 0520 	rsb	r5, r4, #32
 800062c:	fa00 f205 	lsl.w	r2, r0, r5
 8000630:	ea4e 0e02 	orr.w	lr, lr, r2
 8000634:	fa20 f304 	lsr.w	r3, r0, r4
 8000638:	fa01 f205 	lsl.w	r2, r1, r5
 800063c:	ea43 0302 	orr.w	r3, r3, r2
 8000640:	fa21 f004 	lsr.w	r0, r1, r4
 8000644:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000648:	fa21 f204 	lsr.w	r2, r1, r4
 800064c:	ea20 0002 	bic.w	r0, r0, r2
 8000650:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000654:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000658:	bf08      	it	eq
 800065a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800065e:	bd70      	pop	{r4, r5, r6, pc}
 8000660:	f094 0f00 	teq	r4, #0
 8000664:	d10f      	bne.n	8000686 <__aeabi_dmul+0x1c2>
 8000666:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800066a:	0040      	lsls	r0, r0, #1
 800066c:	eb41 0101 	adc.w	r1, r1, r1
 8000670:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000674:	bf08      	it	eq
 8000676:	3c01      	subeq	r4, #1
 8000678:	d0f7      	beq.n	800066a <__aeabi_dmul+0x1a6>
 800067a:	ea41 0106 	orr.w	r1, r1, r6
 800067e:	f095 0f00 	teq	r5, #0
 8000682:	bf18      	it	ne
 8000684:	4770      	bxne	lr
 8000686:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800068a:	0052      	lsls	r2, r2, #1
 800068c:	eb43 0303 	adc.w	r3, r3, r3
 8000690:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000694:	bf08      	it	eq
 8000696:	3d01      	subeq	r5, #1
 8000698:	d0f7      	beq.n	800068a <__aeabi_dmul+0x1c6>
 800069a:	ea43 0306 	orr.w	r3, r3, r6
 800069e:	4770      	bx	lr
 80006a0:	ea94 0f0c 	teq	r4, ip
 80006a4:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006a8:	bf18      	it	ne
 80006aa:	ea95 0f0c 	teqne	r5, ip
 80006ae:	d00c      	beq.n	80006ca <__aeabi_dmul+0x206>
 80006b0:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006b4:	bf18      	it	ne
 80006b6:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ba:	d1d1      	bne.n	8000660 <__aeabi_dmul+0x19c>
 80006bc:	ea81 0103 	eor.w	r1, r1, r3
 80006c0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c4:	f04f 0000 	mov.w	r0, #0
 80006c8:	bd70      	pop	{r4, r5, r6, pc}
 80006ca:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006ce:	bf06      	itte	eq
 80006d0:	4610      	moveq	r0, r2
 80006d2:	4619      	moveq	r1, r3
 80006d4:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006d8:	d019      	beq.n	800070e <__aeabi_dmul+0x24a>
 80006da:	ea94 0f0c 	teq	r4, ip
 80006de:	d102      	bne.n	80006e6 <__aeabi_dmul+0x222>
 80006e0:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006e4:	d113      	bne.n	800070e <__aeabi_dmul+0x24a>
 80006e6:	ea95 0f0c 	teq	r5, ip
 80006ea:	d105      	bne.n	80006f8 <__aeabi_dmul+0x234>
 80006ec:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80006f0:	bf1c      	itt	ne
 80006f2:	4610      	movne	r0, r2
 80006f4:	4619      	movne	r1, r3
 80006f6:	d10a      	bne.n	800070e <__aeabi_dmul+0x24a>
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000700:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000704:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000708:	f04f 0000 	mov.w	r0, #0
 800070c:	bd70      	pop	{r4, r5, r6, pc}
 800070e:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000712:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000716:	bd70      	pop	{r4, r5, r6, pc}

08000718 <__aeabi_ddiv>:
 8000718:	b570      	push	{r4, r5, r6, lr}
 800071a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800071e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000722:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000726:	bf1d      	ittte	ne
 8000728:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800072c:	ea94 0f0c 	teqne	r4, ip
 8000730:	ea95 0f0c 	teqne	r5, ip
 8000734:	f000 f8a7 	bleq	8000886 <__aeabi_ddiv+0x16e>
 8000738:	eba4 0405 	sub.w	r4, r4, r5
 800073c:	ea81 0e03 	eor.w	lr, r1, r3
 8000740:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000744:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000748:	f000 8088 	beq.w	800085c <__aeabi_ddiv+0x144>
 800074c:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000750:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000754:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000758:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 800075c:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000760:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000764:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000768:	ea4f 2600 	mov.w	r6, r0, lsl #8
 800076c:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000770:	429d      	cmp	r5, r3
 8000772:	bf08      	it	eq
 8000774:	4296      	cmpeq	r6, r2
 8000776:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800077a:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800077e:	d202      	bcs.n	8000786 <__aeabi_ddiv+0x6e>
 8000780:	085b      	lsrs	r3, r3, #1
 8000782:	ea4f 0232 	mov.w	r2, r2, rrx
 8000786:	1ab6      	subs	r6, r6, r2
 8000788:	eb65 0503 	sbc.w	r5, r5, r3
 800078c:	085b      	lsrs	r3, r3, #1
 800078e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000792:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000796:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800079a:	ebb6 0e02 	subs.w	lr, r6, r2
 800079e:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007a2:	bf22      	ittt	cs
 80007a4:	1ab6      	subcs	r6, r6, r2
 80007a6:	4675      	movcs	r5, lr
 80007a8:	ea40 000c 	orrcs.w	r0, r0, ip
 80007ac:	085b      	lsrs	r3, r3, #1
 80007ae:	ea4f 0232 	mov.w	r2, r2, rrx
 80007b2:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ba:	bf22      	ittt	cs
 80007bc:	1ab6      	subcs	r6, r6, r2
 80007be:	4675      	movcs	r5, lr
 80007c0:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007c4:	085b      	lsrs	r3, r3, #1
 80007c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ca:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ce:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007d2:	bf22      	ittt	cs
 80007d4:	1ab6      	subcs	r6, r6, r2
 80007d6:	4675      	movcs	r5, lr
 80007d8:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007dc:	085b      	lsrs	r3, r3, #1
 80007de:	ea4f 0232 	mov.w	r2, r2, rrx
 80007e2:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ea:	bf22      	ittt	cs
 80007ec:	1ab6      	subcs	r6, r6, r2
 80007ee:	4675      	movcs	r5, lr
 80007f0:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80007f4:	ea55 0e06 	orrs.w	lr, r5, r6
 80007f8:	d018      	beq.n	800082c <__aeabi_ddiv+0x114>
 80007fa:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80007fe:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000802:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000806:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800080a:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800080e:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000812:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000816:	d1c0      	bne.n	800079a <__aeabi_ddiv+0x82>
 8000818:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800081c:	d10b      	bne.n	8000836 <__aeabi_ddiv+0x11e>
 800081e:	ea41 0100 	orr.w	r1, r1, r0
 8000822:	f04f 0000 	mov.w	r0, #0
 8000826:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800082a:	e7b6      	b.n	800079a <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	bf04      	itt	eq
 8000832:	4301      	orreq	r1, r0
 8000834:	2000      	moveq	r0, #0
 8000836:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800083a:	bf88      	it	hi
 800083c:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000840:	f63f aeaf 	bhi.w	80005a2 <__aeabi_dmul+0xde>
 8000844:	ebb5 0c03 	subs.w	ip, r5, r3
 8000848:	bf04      	itt	eq
 800084a:	ebb6 0c02 	subseq.w	ip, r6, r2
 800084e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000852:	f150 0000 	adcs.w	r0, r0, #0
 8000856:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800085a:	bd70      	pop	{r4, r5, r6, pc}
 800085c:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000860:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000864:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000868:	bfc2      	ittt	gt
 800086a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800086e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000872:	bd70      	popgt	{r4, r5, r6, pc}
 8000874:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000878:	f04f 0e00 	mov.w	lr, #0
 800087c:	3c01      	subs	r4, #1
 800087e:	e690      	b.n	80005a2 <__aeabi_dmul+0xde>
 8000880:	ea45 0e06 	orr.w	lr, r5, r6
 8000884:	e68d      	b.n	80005a2 <__aeabi_dmul+0xde>
 8000886:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800088a:	ea94 0f0c 	teq	r4, ip
 800088e:	bf08      	it	eq
 8000890:	ea95 0f0c 	teqeq	r5, ip
 8000894:	f43f af3b 	beq.w	800070e <__aeabi_dmul+0x24a>
 8000898:	ea94 0f0c 	teq	r4, ip
 800089c:	d10a      	bne.n	80008b4 <__aeabi_ddiv+0x19c>
 800089e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008a2:	f47f af34 	bne.w	800070e <__aeabi_dmul+0x24a>
 80008a6:	ea95 0f0c 	teq	r5, ip
 80008aa:	f47f af25 	bne.w	80006f8 <__aeabi_dmul+0x234>
 80008ae:	4610      	mov	r0, r2
 80008b0:	4619      	mov	r1, r3
 80008b2:	e72c      	b.n	800070e <__aeabi_dmul+0x24a>
 80008b4:	ea95 0f0c 	teq	r5, ip
 80008b8:	d106      	bne.n	80008c8 <__aeabi_ddiv+0x1b0>
 80008ba:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008be:	f43f aefd 	beq.w	80006bc <__aeabi_dmul+0x1f8>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e722      	b.n	800070e <__aeabi_dmul+0x24a>
 80008c8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008cc:	bf18      	it	ne
 80008ce:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008d2:	f47f aec5 	bne.w	8000660 <__aeabi_dmul+0x19c>
 80008d6:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008da:	f47f af0d 	bne.w	80006f8 <__aeabi_dmul+0x234>
 80008de:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008e2:	f47f aeeb 	bne.w	80006bc <__aeabi_dmul+0x1f8>
 80008e6:	e712      	b.n	800070e <__aeabi_dmul+0x24a>

080008e8 <__aeabi_d2f>:
 80008e8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80008ec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 80008f0:	bf24      	itt	cs
 80008f2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 80008f6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 80008fa:	d90d      	bls.n	8000918 <__aeabi_d2f+0x30>
 80008fc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000900:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000904:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000908:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 800090c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000910:	bf08      	it	eq
 8000912:	f020 0001 	biceq.w	r0, r0, #1
 8000916:	4770      	bx	lr
 8000918:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 800091c:	d121      	bne.n	8000962 <__aeabi_d2f+0x7a>
 800091e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000922:	bfbc      	itt	lt
 8000924:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000928:	4770      	bxlt	lr
 800092a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800092e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000932:	f1c2 0218 	rsb	r2, r2, #24
 8000936:	f1c2 0c20 	rsb	ip, r2, #32
 800093a:	fa10 f30c 	lsls.w	r3, r0, ip
 800093e:	fa20 f002 	lsr.w	r0, r0, r2
 8000942:	bf18      	it	ne
 8000944:	f040 0001 	orrne.w	r0, r0, #1
 8000948:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 800094c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000950:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000954:	ea40 000c 	orr.w	r0, r0, ip
 8000958:	fa23 f302 	lsr.w	r3, r3, r2
 800095c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000960:	e7cc      	b.n	80008fc <__aeabi_d2f+0x14>
 8000962:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000966:	d107      	bne.n	8000978 <__aeabi_d2f+0x90>
 8000968:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 800096c:	bf1e      	ittt	ne
 800096e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000972:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000976:	4770      	bxne	lr
 8000978:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 800097c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000980:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_frsub>:
 8000988:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 800098c:	e002      	b.n	8000994 <__addsf3>
 800098e:	bf00      	nop

08000990 <__aeabi_fsub>:
 8000990:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000994 <__addsf3>:
 8000994:	0042      	lsls	r2, r0, #1
 8000996:	bf1f      	itttt	ne
 8000998:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 800099c:	ea92 0f03 	teqne	r2, r3
 80009a0:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 80009a4:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80009a8:	d06a      	beq.n	8000a80 <__addsf3+0xec>
 80009aa:	ea4f 6212 	mov.w	r2, r2, lsr #24
 80009ae:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 80009b2:	bfc1      	itttt	gt
 80009b4:	18d2      	addgt	r2, r2, r3
 80009b6:	4041      	eorgt	r1, r0
 80009b8:	4048      	eorgt	r0, r1
 80009ba:	4041      	eorgt	r1, r0
 80009bc:	bfb8      	it	lt
 80009be:	425b      	neglt	r3, r3
 80009c0:	2b19      	cmp	r3, #25
 80009c2:	bf88      	it	hi
 80009c4:	4770      	bxhi	lr
 80009c6:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 80009ca:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80009ce:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 80009d2:	bf18      	it	ne
 80009d4:	4240      	negne	r0, r0
 80009d6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80009da:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 80009de:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 80009e2:	bf18      	it	ne
 80009e4:	4249      	negne	r1, r1
 80009e6:	ea92 0f03 	teq	r2, r3
 80009ea:	d03f      	beq.n	8000a6c <__addsf3+0xd8>
 80009ec:	f1a2 0201 	sub.w	r2, r2, #1
 80009f0:	fa41 fc03 	asr.w	ip, r1, r3
 80009f4:	eb10 000c 	adds.w	r0, r0, ip
 80009f8:	f1c3 0320 	rsb	r3, r3, #32
 80009fc:	fa01 f103 	lsl.w	r1, r1, r3
 8000a00:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000a04:	d502      	bpl.n	8000a0c <__addsf3+0x78>
 8000a06:	4249      	negs	r1, r1
 8000a08:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000a0c:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000a10:	d313      	bcc.n	8000a3a <__addsf3+0xa6>
 8000a12:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000a16:	d306      	bcc.n	8000a26 <__addsf3+0x92>
 8000a18:	0840      	lsrs	r0, r0, #1
 8000a1a:	ea4f 0131 	mov.w	r1, r1, rrx
 8000a1e:	f102 0201 	add.w	r2, r2, #1
 8000a22:	2afe      	cmp	r2, #254	; 0xfe
 8000a24:	d251      	bcs.n	8000aca <__addsf3+0x136>
 8000a26:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000a2a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000a2e:	bf08      	it	eq
 8000a30:	f020 0001 	biceq.w	r0, r0, #1
 8000a34:	ea40 0003 	orr.w	r0, r0, r3
 8000a38:	4770      	bx	lr
 8000a3a:	0049      	lsls	r1, r1, #1
 8000a3c:	eb40 0000 	adc.w	r0, r0, r0
 8000a40:	3a01      	subs	r2, #1
 8000a42:	bf28      	it	cs
 8000a44:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000a48:	d2ed      	bcs.n	8000a26 <__addsf3+0x92>
 8000a4a:	fab0 fc80 	clz	ip, r0
 8000a4e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000a52:	ebb2 020c 	subs.w	r2, r2, ip
 8000a56:	fa00 f00c 	lsl.w	r0, r0, ip
 8000a5a:	bfaa      	itet	ge
 8000a5c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000a60:	4252      	neglt	r2, r2
 8000a62:	4318      	orrge	r0, r3
 8000a64:	bfbc      	itt	lt
 8000a66:	40d0      	lsrlt	r0, r2
 8000a68:	4318      	orrlt	r0, r3
 8000a6a:	4770      	bx	lr
 8000a6c:	f092 0f00 	teq	r2, #0
 8000a70:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000a74:	bf06      	itte	eq
 8000a76:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000a7a:	3201      	addeq	r2, #1
 8000a7c:	3b01      	subne	r3, #1
 8000a7e:	e7b5      	b.n	80009ec <__addsf3+0x58>
 8000a80:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000a84:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000a88:	bf18      	it	ne
 8000a8a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000a8e:	d021      	beq.n	8000ad4 <__addsf3+0x140>
 8000a90:	ea92 0f03 	teq	r2, r3
 8000a94:	d004      	beq.n	8000aa0 <__addsf3+0x10c>
 8000a96:	f092 0f00 	teq	r2, #0
 8000a9a:	bf08      	it	eq
 8000a9c:	4608      	moveq	r0, r1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea90 0f01 	teq	r0, r1
 8000aa4:	bf1c      	itt	ne
 8000aa6:	2000      	movne	r0, #0
 8000aa8:	4770      	bxne	lr
 8000aaa:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000aae:	d104      	bne.n	8000aba <__addsf3+0x126>
 8000ab0:	0040      	lsls	r0, r0, #1
 8000ab2:	bf28      	it	cs
 8000ab4:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000ab8:	4770      	bx	lr
 8000aba:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000abe:	bf3c      	itt	cc
 8000ac0:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000ac4:	4770      	bxcc	lr
 8000ac6:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000aca:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000ace:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ad2:	4770      	bx	lr
 8000ad4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000ad8:	bf16      	itet	ne
 8000ada:	4608      	movne	r0, r1
 8000adc:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000ae0:	4601      	movne	r1, r0
 8000ae2:	0242      	lsls	r2, r0, #9
 8000ae4:	bf06      	itte	eq
 8000ae6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000aea:	ea90 0f01 	teqeq	r0, r1
 8000aee:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000af2:	4770      	bx	lr

08000af4 <__aeabi_ui2f>:
 8000af4:	f04f 0300 	mov.w	r3, #0
 8000af8:	e004      	b.n	8000b04 <__aeabi_i2f+0x8>
 8000afa:	bf00      	nop

08000afc <__aeabi_i2f>:
 8000afc:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000b00:	bf48      	it	mi
 8000b02:	4240      	negmi	r0, r0
 8000b04:	ea5f 0c00 	movs.w	ip, r0
 8000b08:	bf08      	it	eq
 8000b0a:	4770      	bxeq	lr
 8000b0c:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000b10:	4601      	mov	r1, r0
 8000b12:	f04f 0000 	mov.w	r0, #0
 8000b16:	e01c      	b.n	8000b52 <__aeabi_l2f+0x2a>

08000b18 <__aeabi_ul2f>:
 8000b18:	ea50 0201 	orrs.w	r2, r0, r1
 8000b1c:	bf08      	it	eq
 8000b1e:	4770      	bxeq	lr
 8000b20:	f04f 0300 	mov.w	r3, #0
 8000b24:	e00a      	b.n	8000b3c <__aeabi_l2f+0x14>
 8000b26:	bf00      	nop

08000b28 <__aeabi_l2f>:
 8000b28:	ea50 0201 	orrs.w	r2, r0, r1
 8000b2c:	bf08      	it	eq
 8000b2e:	4770      	bxeq	lr
 8000b30:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000b34:	d502      	bpl.n	8000b3c <__aeabi_l2f+0x14>
 8000b36:	4240      	negs	r0, r0
 8000b38:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000b3c:	ea5f 0c01 	movs.w	ip, r1
 8000b40:	bf02      	ittt	eq
 8000b42:	4684      	moveq	ip, r0
 8000b44:	4601      	moveq	r1, r0
 8000b46:	2000      	moveq	r0, #0
 8000b48:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000b4c:	bf08      	it	eq
 8000b4e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000b52:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000b56:	fabc f28c 	clz	r2, ip
 8000b5a:	3a08      	subs	r2, #8
 8000b5c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000b60:	db10      	blt.n	8000b84 <__aeabi_l2f+0x5c>
 8000b62:	fa01 fc02 	lsl.w	ip, r1, r2
 8000b66:	4463      	add	r3, ip
 8000b68:	fa00 fc02 	lsl.w	ip, r0, r2
 8000b6c:	f1c2 0220 	rsb	r2, r2, #32
 8000b70:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000b74:	fa20 f202 	lsr.w	r2, r0, r2
 8000b78:	eb43 0002 	adc.w	r0, r3, r2
 8000b7c:	bf08      	it	eq
 8000b7e:	f020 0001 	biceq.w	r0, r0, #1
 8000b82:	4770      	bx	lr
 8000b84:	f102 0220 	add.w	r2, r2, #32
 8000b88:	fa01 fc02 	lsl.w	ip, r1, r2
 8000b8c:	f1c2 0220 	rsb	r2, r2, #32
 8000b90:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000b94:	fa21 f202 	lsr.w	r2, r1, r2
 8000b98:	eb43 0002 	adc.w	r0, r3, r2
 8000b9c:	bf08      	it	eq
 8000b9e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000ba2:	4770      	bx	lr

08000ba4 <__aeabi_fmul>:
 8000ba4:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000ba8:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000bac:	bf1e      	ittt	ne
 8000bae:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000bb2:	ea92 0f0c 	teqne	r2, ip
 8000bb6:	ea93 0f0c 	teqne	r3, ip
 8000bba:	d06f      	beq.n	8000c9c <__aeabi_fmul+0xf8>
 8000bbc:	441a      	add	r2, r3
 8000bbe:	ea80 0c01 	eor.w	ip, r0, r1
 8000bc2:	0240      	lsls	r0, r0, #9
 8000bc4:	bf18      	it	ne
 8000bc6:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000bca:	d01e      	beq.n	8000c0a <__aeabi_fmul+0x66>
 8000bcc:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000bd0:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000bd4:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000bd8:	fba0 3101 	umull	r3, r1, r0, r1
 8000bdc:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000be0:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000be4:	bf3e      	ittt	cc
 8000be6:	0049      	lslcc	r1, r1, #1
 8000be8:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000bec:	005b      	lslcc	r3, r3, #1
 8000bee:	ea40 0001 	orr.w	r0, r0, r1
 8000bf2:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000bf6:	2afd      	cmp	r2, #253	; 0xfd
 8000bf8:	d81d      	bhi.n	8000c36 <__aeabi_fmul+0x92>
 8000bfa:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000bfe:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c02:	bf08      	it	eq
 8000c04:	f020 0001 	biceq.w	r0, r0, #1
 8000c08:	4770      	bx	lr
 8000c0a:	f090 0f00 	teq	r0, #0
 8000c0e:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000c12:	bf08      	it	eq
 8000c14:	0249      	lsleq	r1, r1, #9
 8000c16:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000c1a:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000c1e:	3a7f      	subs	r2, #127	; 0x7f
 8000c20:	bfc2      	ittt	gt
 8000c22:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000c26:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000c2a:	4770      	bxgt	lr
 8000c2c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c30:	f04f 0300 	mov.w	r3, #0
 8000c34:	3a01      	subs	r2, #1
 8000c36:	dc5d      	bgt.n	8000cf4 <__aeabi_fmul+0x150>
 8000c38:	f112 0f19 	cmn.w	r2, #25
 8000c3c:	bfdc      	itt	le
 8000c3e:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000c42:	4770      	bxle	lr
 8000c44:	f1c2 0200 	rsb	r2, r2, #0
 8000c48:	0041      	lsls	r1, r0, #1
 8000c4a:	fa21 f102 	lsr.w	r1, r1, r2
 8000c4e:	f1c2 0220 	rsb	r2, r2, #32
 8000c52:	fa00 fc02 	lsl.w	ip, r0, r2
 8000c56:	ea5f 0031 	movs.w	r0, r1, rrx
 8000c5a:	f140 0000 	adc.w	r0, r0, #0
 8000c5e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000c62:	bf08      	it	eq
 8000c64:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000c68:	4770      	bx	lr
 8000c6a:	f092 0f00 	teq	r2, #0
 8000c6e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000c72:	bf02      	ittt	eq
 8000c74:	0040      	lsleq	r0, r0, #1
 8000c76:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000c7a:	3a01      	subeq	r2, #1
 8000c7c:	d0f9      	beq.n	8000c72 <__aeabi_fmul+0xce>
 8000c7e:	ea40 000c 	orr.w	r0, r0, ip
 8000c82:	f093 0f00 	teq	r3, #0
 8000c86:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c8a:	bf02      	ittt	eq
 8000c8c:	0049      	lsleq	r1, r1, #1
 8000c8e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000c92:	3b01      	subeq	r3, #1
 8000c94:	d0f9      	beq.n	8000c8a <__aeabi_fmul+0xe6>
 8000c96:	ea41 010c 	orr.w	r1, r1, ip
 8000c9a:	e78f      	b.n	8000bbc <__aeabi_fmul+0x18>
 8000c9c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000ca0:	ea92 0f0c 	teq	r2, ip
 8000ca4:	bf18      	it	ne
 8000ca6:	ea93 0f0c 	teqne	r3, ip
 8000caa:	d00a      	beq.n	8000cc2 <__aeabi_fmul+0x11e>
 8000cac:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000cb0:	bf18      	it	ne
 8000cb2:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000cb6:	d1d8      	bne.n	8000c6a <__aeabi_fmul+0xc6>
 8000cb8:	ea80 0001 	eor.w	r0, r0, r1
 8000cbc:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000cc0:	4770      	bx	lr
 8000cc2:	f090 0f00 	teq	r0, #0
 8000cc6:	bf17      	itett	ne
 8000cc8:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000ccc:	4608      	moveq	r0, r1
 8000cce:	f091 0f00 	teqne	r1, #0
 8000cd2:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000cd6:	d014      	beq.n	8000d02 <__aeabi_fmul+0x15e>
 8000cd8:	ea92 0f0c 	teq	r2, ip
 8000cdc:	d101      	bne.n	8000ce2 <__aeabi_fmul+0x13e>
 8000cde:	0242      	lsls	r2, r0, #9
 8000ce0:	d10f      	bne.n	8000d02 <__aeabi_fmul+0x15e>
 8000ce2:	ea93 0f0c 	teq	r3, ip
 8000ce6:	d103      	bne.n	8000cf0 <__aeabi_fmul+0x14c>
 8000ce8:	024b      	lsls	r3, r1, #9
 8000cea:	bf18      	it	ne
 8000cec:	4608      	movne	r0, r1
 8000cee:	d108      	bne.n	8000d02 <__aeabi_fmul+0x15e>
 8000cf0:	ea80 0001 	eor.w	r0, r0, r1
 8000cf4:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000cf8:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cfc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d00:	4770      	bx	lr
 8000d02:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000d06:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000d0a:	4770      	bx	lr

08000d0c <__aeabi_fdiv>:
 8000d0c:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000d10:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d14:	bf1e      	ittt	ne
 8000d16:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d1a:	ea92 0f0c 	teqne	r2, ip
 8000d1e:	ea93 0f0c 	teqne	r3, ip
 8000d22:	d069      	beq.n	8000df8 <__aeabi_fdiv+0xec>
 8000d24:	eba2 0203 	sub.w	r2, r2, r3
 8000d28:	ea80 0c01 	eor.w	ip, r0, r1
 8000d2c:	0249      	lsls	r1, r1, #9
 8000d2e:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000d32:	d037      	beq.n	8000da4 <__aeabi_fdiv+0x98>
 8000d34:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000d38:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000d3c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000d40:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000d44:	428b      	cmp	r3, r1
 8000d46:	bf38      	it	cc
 8000d48:	005b      	lslcc	r3, r3, #1
 8000d4a:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000d4e:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000d52:	428b      	cmp	r3, r1
 8000d54:	bf24      	itt	cs
 8000d56:	1a5b      	subcs	r3, r3, r1
 8000d58:	ea40 000c 	orrcs.w	r0, r0, ip
 8000d5c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000d60:	bf24      	itt	cs
 8000d62:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000d66:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000d6a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000d6e:	bf24      	itt	cs
 8000d70:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000d74:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000d78:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000d7c:	bf24      	itt	cs
 8000d7e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000d82:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000d86:	011b      	lsls	r3, r3, #4
 8000d88:	bf18      	it	ne
 8000d8a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000d8e:	d1e0      	bne.n	8000d52 <__aeabi_fdiv+0x46>
 8000d90:	2afd      	cmp	r2, #253	; 0xfd
 8000d92:	f63f af50 	bhi.w	8000c36 <__aeabi_fmul+0x92>
 8000d96:	428b      	cmp	r3, r1
 8000d98:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d9c:	bf08      	it	eq
 8000d9e:	f020 0001 	biceq.w	r0, r0, #1
 8000da2:	4770      	bx	lr
 8000da4:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000da8:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000dac:	327f      	adds	r2, #127	; 0x7f
 8000dae:	bfc2      	ittt	gt
 8000db0:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000db4:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000db8:	4770      	bxgt	lr
 8000dba:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000dbe:	f04f 0300 	mov.w	r3, #0
 8000dc2:	3a01      	subs	r2, #1
 8000dc4:	e737      	b.n	8000c36 <__aeabi_fmul+0x92>
 8000dc6:	f092 0f00 	teq	r2, #0
 8000dca:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000dce:	bf02      	ittt	eq
 8000dd0:	0040      	lsleq	r0, r0, #1
 8000dd2:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000dd6:	3a01      	subeq	r2, #1
 8000dd8:	d0f9      	beq.n	8000dce <__aeabi_fdiv+0xc2>
 8000dda:	ea40 000c 	orr.w	r0, r0, ip
 8000dde:	f093 0f00 	teq	r3, #0
 8000de2:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000de6:	bf02      	ittt	eq
 8000de8:	0049      	lsleq	r1, r1, #1
 8000dea:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000dee:	3b01      	subeq	r3, #1
 8000df0:	d0f9      	beq.n	8000de6 <__aeabi_fdiv+0xda>
 8000df2:	ea41 010c 	orr.w	r1, r1, ip
 8000df6:	e795      	b.n	8000d24 <__aeabi_fdiv+0x18>
 8000df8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000dfc:	ea92 0f0c 	teq	r2, ip
 8000e00:	d108      	bne.n	8000e14 <__aeabi_fdiv+0x108>
 8000e02:	0242      	lsls	r2, r0, #9
 8000e04:	f47f af7d 	bne.w	8000d02 <__aeabi_fmul+0x15e>
 8000e08:	ea93 0f0c 	teq	r3, ip
 8000e0c:	f47f af70 	bne.w	8000cf0 <__aeabi_fmul+0x14c>
 8000e10:	4608      	mov	r0, r1
 8000e12:	e776      	b.n	8000d02 <__aeabi_fmul+0x15e>
 8000e14:	ea93 0f0c 	teq	r3, ip
 8000e18:	d104      	bne.n	8000e24 <__aeabi_fdiv+0x118>
 8000e1a:	024b      	lsls	r3, r1, #9
 8000e1c:	f43f af4c 	beq.w	8000cb8 <__aeabi_fmul+0x114>
 8000e20:	4608      	mov	r0, r1
 8000e22:	e76e      	b.n	8000d02 <__aeabi_fmul+0x15e>
 8000e24:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000e28:	bf18      	it	ne
 8000e2a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000e2e:	d1ca      	bne.n	8000dc6 <__aeabi_fdiv+0xba>
 8000e30:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000e34:	f47f af5c 	bne.w	8000cf0 <__aeabi_fmul+0x14c>
 8000e38:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000e3c:	f47f af3c 	bne.w	8000cb8 <__aeabi_fmul+0x114>
 8000e40:	e75f      	b.n	8000d02 <__aeabi_fmul+0x15e>
 8000e42:	bf00      	nop

08000e44 <__aeabi_f2iz>:
 8000e44:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000e48:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000e4c:	d30f      	bcc.n	8000e6e <__aeabi_f2iz+0x2a>
 8000e4e:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000e52:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000e56:	d90d      	bls.n	8000e74 <__aeabi_f2iz+0x30>
 8000e58:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000e5c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000e60:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000e64:	fa23 f002 	lsr.w	r0, r3, r2
 8000e68:	bf18      	it	ne
 8000e6a:	4240      	negne	r0, r0
 8000e6c:	4770      	bx	lr
 8000e6e:	f04f 0000 	mov.w	r0, #0
 8000e72:	4770      	bx	lr
 8000e74:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000e78:	d101      	bne.n	8000e7e <__aeabi_f2iz+0x3a>
 8000e7a:	0242      	lsls	r2, r0, #9
 8000e7c:	d105      	bne.n	8000e8a <__aeabi_f2iz+0x46>
 8000e7e:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 8000e82:	bf08      	it	eq
 8000e84:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000e88:	4770      	bx	lr
 8000e8a:	f04f 0000 	mov.w	r0, #0
 8000e8e:	4770      	bx	lr

08000e90 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e90:	b580      	push	{r7, lr}
 8000e92:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000e94:	4b08      	ldr	r3, [pc, #32]	; (8000eb8 <HAL_Init+0x28>)
 8000e96:	681b      	ldr	r3, [r3, #0]
 8000e98:	4a07      	ldr	r2, [pc, #28]	; (8000eb8 <HAL_Init+0x28>)
 8000e9a:	f043 0310 	orr.w	r3, r3, #16
 8000e9e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ea0:	2003      	movs	r0, #3
 8000ea2:	f000 ff4f 	bl	8001d44 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000ea6:	200f      	movs	r0, #15
 8000ea8:	f000 f808 	bl	8000ebc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000eac:	f005 ff7e 	bl	8006dac <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000eb0:	2300      	movs	r3, #0
}
 8000eb2:	4618      	mov	r0, r3
 8000eb4:	bd80      	pop	{r7, pc}
 8000eb6:	bf00      	nop
 8000eb8:	40022000 	.word	0x40022000

08000ebc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ebc:	b580      	push	{r7, lr}
 8000ebe:	b082      	sub	sp, #8
 8000ec0:	af00      	add	r7, sp, #0
 8000ec2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000ec4:	4b12      	ldr	r3, [pc, #72]	; (8000f10 <HAL_InitTick+0x54>)
 8000ec6:	681a      	ldr	r2, [r3, #0]
 8000ec8:	4b12      	ldr	r3, [pc, #72]	; (8000f14 <HAL_InitTick+0x58>)
 8000eca:	781b      	ldrb	r3, [r3, #0]
 8000ecc:	4619      	mov	r1, r3
 8000ece:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ed2:	fbb3 f3f1 	udiv	r3, r3, r1
 8000ed6:	fbb2 f3f3 	udiv	r3, r2, r3
 8000eda:	4618      	mov	r0, r3
 8000edc:	f000 ff75 	bl	8001dca <HAL_SYSTICK_Config>
 8000ee0:	4603      	mov	r3, r0
 8000ee2:	2b00      	cmp	r3, #0
 8000ee4:	d001      	beq.n	8000eea <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000ee6:	2301      	movs	r3, #1
 8000ee8:	e00e      	b.n	8000f08 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	2b0f      	cmp	r3, #15
 8000eee:	d80a      	bhi.n	8000f06 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ef0:	2200      	movs	r2, #0
 8000ef2:	6879      	ldr	r1, [r7, #4]
 8000ef4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000ef8:	f000 ff2f 	bl	8001d5a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000efc:	4a06      	ldr	r2, [pc, #24]	; (8000f18 <HAL_InitTick+0x5c>)
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000f02:	2300      	movs	r3, #0
 8000f04:	e000      	b.n	8000f08 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000f06:	2301      	movs	r3, #1
}
 8000f08:	4618      	mov	r0, r3
 8000f0a:	3708      	adds	r7, #8
 8000f0c:	46bd      	mov	sp, r7
 8000f0e:	bd80      	pop	{r7, pc}
 8000f10:	20000008 	.word	0x20000008
 8000f14:	20000004 	.word	0x20000004
 8000f18:	20000000 	.word	0x20000000

08000f1c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f1c:	b480      	push	{r7}
 8000f1e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000f20:	4b05      	ldr	r3, [pc, #20]	; (8000f38 <HAL_IncTick+0x1c>)
 8000f22:	781b      	ldrb	r3, [r3, #0]
 8000f24:	461a      	mov	r2, r3
 8000f26:	4b05      	ldr	r3, [pc, #20]	; (8000f3c <HAL_IncTick+0x20>)
 8000f28:	681b      	ldr	r3, [r3, #0]
 8000f2a:	4413      	add	r3, r2
 8000f2c:	4a03      	ldr	r2, [pc, #12]	; (8000f3c <HAL_IncTick+0x20>)
 8000f2e:	6013      	str	r3, [r2, #0]
}
 8000f30:	bf00      	nop
 8000f32:	46bd      	mov	sp, r7
 8000f34:	bc80      	pop	{r7}
 8000f36:	4770      	bx	lr
 8000f38:	20000004 	.word	0x20000004
 8000f3c:	200000c0 	.word	0x200000c0

08000f40 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f40:	b480      	push	{r7}
 8000f42:	af00      	add	r7, sp, #0
  return uwTick;
 8000f44:	4b02      	ldr	r3, [pc, #8]	; (8000f50 <HAL_GetTick+0x10>)
 8000f46:	681b      	ldr	r3, [r3, #0]
}
 8000f48:	4618      	mov	r0, r3
 8000f4a:	46bd      	mov	sp, r7
 8000f4c:	bc80      	pop	{r7}
 8000f4e:	4770      	bx	lr
 8000f50:	200000c0 	.word	0x200000c0

08000f54 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000f54:	b580      	push	{r7, lr}
 8000f56:	b084      	sub	sp, #16
 8000f58:	af00      	add	r7, sp, #0
 8000f5a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000f5c:	f7ff fff0 	bl	8000f40 <HAL_GetTick>
 8000f60:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000f66:	68fb      	ldr	r3, [r7, #12]
 8000f68:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000f6c:	d005      	beq.n	8000f7a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000f6e:	4b0a      	ldr	r3, [pc, #40]	; (8000f98 <HAL_Delay+0x44>)
 8000f70:	781b      	ldrb	r3, [r3, #0]
 8000f72:	461a      	mov	r2, r3
 8000f74:	68fb      	ldr	r3, [r7, #12]
 8000f76:	4413      	add	r3, r2
 8000f78:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000f7a:	bf00      	nop
 8000f7c:	f7ff ffe0 	bl	8000f40 <HAL_GetTick>
 8000f80:	4602      	mov	r2, r0
 8000f82:	68bb      	ldr	r3, [r7, #8]
 8000f84:	1ad3      	subs	r3, r2, r3
 8000f86:	68fa      	ldr	r2, [r7, #12]
 8000f88:	429a      	cmp	r2, r3
 8000f8a:	d8f7      	bhi.n	8000f7c <HAL_Delay+0x28>
  {
  }
}
 8000f8c:	bf00      	nop
 8000f8e:	bf00      	nop
 8000f90:	3710      	adds	r7, #16
 8000f92:	46bd      	mov	sp, r7
 8000f94:	bd80      	pop	{r7, pc}
 8000f96:	bf00      	nop
 8000f98:	20000004 	.word	0x20000004

08000f9c <HAL_CAN_Init>:
  * @param  hcan: pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef* hcan)
{
 8000f9c:	b580      	push	{r7, lr}
 8000f9e:	b086      	sub	sp, #24
 8000fa0:	af00      	add	r7, sp, #0
 8000fa2:	6078      	str	r0, [r7, #4]
  uint32_t status = CAN_INITSTATUS_FAILED;  /* Default init status */
 8000fa4:	2300      	movs	r3, #0
 8000fa6:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0;
 8000fa8:	2300      	movs	r3, #0
 8000faa:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_mcr = 0;
 8000fac:	2300      	movs	r3, #0
 8000fae:	613b      	str	r3, [r7, #16]

  /* Check CAN handle */
  if(hcan == NULL)
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	2b00      	cmp	r3, #0
 8000fb4:	d101      	bne.n	8000fba <HAL_CAN_Init+0x1e>
  {
     return HAL_ERROR;
 8000fb6:	2301      	movs	r3, #1
 8000fb8:	e0ce      	b.n	8001158 <HAL_CAN_Init+0x1bc>
  assert_param(IS_CAN_SJW(hcan->Init.SJW));
  assert_param(IS_CAN_BS1(hcan->Init.BS1));
  assert_param(IS_CAN_BS2(hcan->Init.BS2));
  assert_param(IS_CAN_PRESCALER(hcan->Init.Prescaler));

  if(hcan->State == HAL_CAN_STATE_RESET)
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8000fc0:	b2db      	uxtb	r3, r3
 8000fc2:	2b00      	cmp	r3, #0
 8000fc4:	d106      	bne.n	8000fd4 <HAL_CAN_Init+0x38>
  {
    /* Allocate lock resource and initialize it */
    hcan-> Lock = HAL_UNLOCKED;
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	2200      	movs	r2, #0
 8000fca:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    /* Init the low level hardware */
    HAL_CAN_MspInit(hcan);
 8000fce:	6878      	ldr	r0, [r7, #4]
 8000fd0:	f000 f997 	bl	8001302 <HAL_CAN_MspInit>
  }

  /* Initialize the CAN state*/
  hcan->State = HAL_CAN_STATE_BUSY;
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	2202      	movs	r2, #2
 8000fd8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	681b      	ldr	r3, [r3, #0]
 8000fe0:	681a      	ldr	r2, [r3, #0]
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	681b      	ldr	r3, [r3, #0]
 8000fe6:	f022 0202 	bic.w	r2, r2, #2
 8000fea:	601a      	str	r2, [r3, #0]

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	681b      	ldr	r3, [r3, #0]
 8000ff0:	681a      	ldr	r2, [r3, #0]
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	681b      	ldr	r3, [r3, #0]
 8000ff6:	f042 0201 	orr.w	r2, r2, #1
 8000ffa:	601a      	str	r2, [r3, #0]

  /* Get timeout */
  tickstart = HAL_GetTick();
 8000ffc:	f7ff ffa0 	bl	8000f40 <HAL_GetTick>
 8001000:	60f8      	str	r0, [r7, #12]

  /* Wait the acknowledge */
  while(HAL_IS_BIT_CLR(hcan->Instance->MSR, CAN_MSR_INAK))
 8001002:	e010      	b.n	8001026 <HAL_CAN_Init+0x8a>
  {
    if((HAL_GetTick()-tickstart) > CAN_TIMEOUT_VALUE)
 8001004:	f7ff ff9c 	bl	8000f40 <HAL_GetTick>
 8001008:	4602      	mov	r2, r0
 800100a:	68fb      	ldr	r3, [r7, #12]
 800100c:	1ad3      	subs	r3, r2, r3
 800100e:	2b0a      	cmp	r3, #10
 8001010:	d909      	bls.n	8001026 <HAL_CAN_Init+0x8a>
    {
      hcan->State= HAL_CAN_STATE_TIMEOUT;
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	2203      	movs	r2, #3
 8001016:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process unlocked */
      __HAL_UNLOCK(hcan);
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	2200      	movs	r2, #0
 800101e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      return HAL_TIMEOUT;
 8001022:	2303      	movs	r3, #3
 8001024:	e098      	b.n	8001158 <HAL_CAN_Init+0x1bc>
  while(HAL_IS_BIT_CLR(hcan->Instance->MSR, CAN_MSR_INAK))
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	681b      	ldr	r3, [r3, #0]
 800102a:	685b      	ldr	r3, [r3, #4]
 800102c:	f003 0301 	and.w	r3, r3, #1
 8001030:	2b00      	cmp	r3, #0
 8001032:	d0e7      	beq.n	8001004 <HAL_CAN_Init+0x68>
    }
  }

  /* Check acknowledge */
  if ((hcan->Instance->MSR & CAN_MSR_INAK) == CAN_MSR_INAK)
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	681b      	ldr	r3, [r3, #0]
 8001038:	685b      	ldr	r3, [r3, #4]
 800103a:	f003 0301 	and.w	r3, r3, #1
 800103e:	2b01      	cmp	r3, #1
 8001040:	d179      	bne.n	8001136 <HAL_CAN_Init+0x19a>
  {
    /* Set the time triggered communication mode */
    if (hcan->Init.TTCM == ENABLE)
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	699b      	ldr	r3, [r3, #24]
 8001046:	2b01      	cmp	r3, #1
 8001048:	d103      	bne.n	8001052 <HAL_CAN_Init+0xb6>
    {
      SET_BIT(tmp_mcr, CAN_MCR_TTCM);
 800104a:	693b      	ldr	r3, [r7, #16]
 800104c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001050:	613b      	str	r3, [r7, #16]
    }

    /* Set the automatic bus-off management */
    if (hcan->Init.ABOM == ENABLE)
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	69db      	ldr	r3, [r3, #28]
 8001056:	2b01      	cmp	r3, #1
 8001058:	d103      	bne.n	8001062 <HAL_CAN_Init+0xc6>
    {
      SET_BIT(tmp_mcr, CAN_MCR_ABOM);
 800105a:	693b      	ldr	r3, [r7, #16]
 800105c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001060:	613b      	str	r3, [r7, #16]
    }

    /* Set the automatic wake-up mode */
    if (hcan->Init.AWUM == ENABLE)
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	6a1b      	ldr	r3, [r3, #32]
 8001066:	2b01      	cmp	r3, #1
 8001068:	d103      	bne.n	8001072 <HAL_CAN_Init+0xd6>
    {
      SET_BIT(tmp_mcr, CAN_MCR_AWUM);
 800106a:	693b      	ldr	r3, [r7, #16]
 800106c:	f043 0320 	orr.w	r3, r3, #32
 8001070:	613b      	str	r3, [r7, #16]
    }

    /* Set the no automatic retransmission */
    if (hcan->Init.NART == ENABLE)
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001076:	2b01      	cmp	r3, #1
 8001078:	d103      	bne.n	8001082 <HAL_CAN_Init+0xe6>
    {
      SET_BIT(tmp_mcr, CAN_MCR_NART);
 800107a:	693b      	ldr	r3, [r7, #16]
 800107c:	f043 0310 	orr.w	r3, r3, #16
 8001080:	613b      	str	r3, [r7, #16]
    }

    /* Set the receive FIFO locked mode */
    if (hcan->Init.RFLM == ENABLE)
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001086:	2b01      	cmp	r3, #1
 8001088:	d103      	bne.n	8001092 <HAL_CAN_Init+0xf6>
    {
      SET_BIT(tmp_mcr, CAN_MCR_RFLM);
 800108a:	693b      	ldr	r3, [r7, #16]
 800108c:	f043 0308 	orr.w	r3, r3, #8
 8001090:	613b      	str	r3, [r7, #16]
    }

    /* Set the transmit FIFO priority */
    if (hcan->Init.TXFP == ENABLE)
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001096:	2b01      	cmp	r3, #1
 8001098:	d103      	bne.n	80010a2 <HAL_CAN_Init+0x106>
    {
      SET_BIT(tmp_mcr, CAN_MCR_TXFP);
 800109a:	693b      	ldr	r3, [r7, #16]
 800109c:	f043 0304 	orr.w	r3, r3, #4
 80010a0:	613b      	str	r3, [r7, #16]
    }

    /* Update register MCR */
    MODIFY_REG(hcan->Instance->MCR,
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	681b      	ldr	r3, [r3, #0]
 80010a6:	681b      	ldr	r3, [r3, #0]
 80010a8:	f023 01fc 	bic.w	r1, r3, #252	; 0xfc
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	693a      	ldr	r2, [r7, #16]
 80010b2:	430a      	orrs	r2, r1
 80010b4:	601a      	str	r2, [r3, #0]
               CAN_MCR_RFLM |
               CAN_MCR_TXFP,
               tmp_mcr);

    /* Set the bit timing register */
    WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	689a      	ldr	r2, [r3, #8]
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	68db      	ldr	r3, [r3, #12]
 80010be:	431a      	orrs	r2, r3
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	691b      	ldr	r3, [r3, #16]
 80010c4:	431a      	orrs	r2, r3
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	695b      	ldr	r3, [r3, #20]
 80010ca:	ea42 0103 	orr.w	r1, r2, r3
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	685b      	ldr	r3, [r3, #4]
 80010d2:	1e5a      	subs	r2, r3, #1
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	430a      	orrs	r2, r1
 80010da:	61da      	str	r2, [r3, #28]
                                              hcan->Init.BS1            |
                                              hcan->Init.BS2            |
                                              (hcan->Init.Prescaler - 1) ));

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	681b      	ldr	r3, [r3, #0]
 80010e0:	681a      	ldr	r2, [r3, #0]
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	681b      	ldr	r3, [r3, #0]
 80010e6:	f022 0201 	bic.w	r2, r2, #1
 80010ea:	601a      	str	r2, [r3, #0]

    /* Get timeout */
    tickstart = HAL_GetTick();
 80010ec:	f7ff ff28 	bl	8000f40 <HAL_GetTick>
 80010f0:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while(HAL_IS_BIT_CLR(hcan->Instance->MSR, CAN_MSR_INAK))
 80010f2:	e010      	b.n	8001116 <HAL_CAN_Init+0x17a>
    {
      if((HAL_GetTick()-tickstart) > CAN_TIMEOUT_VALUE)
 80010f4:	f7ff ff24 	bl	8000f40 <HAL_GetTick>
 80010f8:	4602      	mov	r2, r0
 80010fa:	68fb      	ldr	r3, [r7, #12]
 80010fc:	1ad3      	subs	r3, r2, r3
 80010fe:	2b0a      	cmp	r3, #10
 8001100:	d909      	bls.n	8001116 <HAL_CAN_Init+0x17a>
      {
        hcan->State= HAL_CAN_STATE_TIMEOUT;
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	2203      	movs	r2, #3
 8001106:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

        /* Process unlocked */
        __HAL_UNLOCK(hcan);
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	2200      	movs	r2, #0
 800110e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8001112:	2303      	movs	r3, #3
 8001114:	e020      	b.n	8001158 <HAL_CAN_Init+0x1bc>
    while(HAL_IS_BIT_CLR(hcan->Instance->MSR, CAN_MSR_INAK))
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	681b      	ldr	r3, [r3, #0]
 800111a:	685b      	ldr	r3, [r3, #4]
 800111c:	f003 0301 	and.w	r3, r3, #1
 8001120:	2b00      	cmp	r3, #0
 8001122:	d0e7      	beq.n	80010f4 <HAL_CAN_Init+0x158>
      }
    }

    /* Check acknowledged */
    if (HAL_IS_BIT_SET(hcan->Instance->MSR, CAN_MSR_INAK))
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	685b      	ldr	r3, [r3, #4]
 800112a:	f003 0301 	and.w	r3, r3, #1
 800112e:	2b00      	cmp	r3, #0
 8001130:	d001      	beq.n	8001136 <HAL_CAN_Init+0x19a>
    {
      status = CAN_INITSTATUS_SUCCESS;
 8001132:	2301      	movs	r3, #1
 8001134:	617b      	str	r3, [r7, #20]
    }
  }

  if(status == CAN_INITSTATUS_SUCCESS)
 8001136:	697b      	ldr	r3, [r7, #20]
 8001138:	2b01      	cmp	r3, #1
 800113a:	d108      	bne.n	800114e <HAL_CAN_Init+0x1b2>
  {
    /* Set CAN error code to none */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	2200      	movs	r2, #0
 8001140:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Initialize the CAN state */
    hcan->State = HAL_CAN_STATE_READY;
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	2201      	movs	r2, #1
 8001146:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Return function status */
    return HAL_OK;
 800114a:	2300      	movs	r3, #0
 800114c:	e004      	b.n	8001158 <HAL_CAN_Init+0x1bc>
  }
  else
  {
    /* Initialize the CAN state */
    hcan->State = HAL_CAN_STATE_ERROR;
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	2204      	movs	r2, #4
 8001152:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Return function status */
    return HAL_ERROR;
 8001156:	2301      	movs	r3, #1
  }
}
 8001158:	4618      	mov	r0, r3
 800115a:	3718      	adds	r7, #24
 800115c:	46bd      	mov	sp, r7
 800115e:	bd80      	pop	{r7, pc}

08001160 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig: pointer to a CAN_FilterConfTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef* hcan, CAN_FilterConfTypeDef* sFilterConfig)
{
 8001160:	b480      	push	{r7}
 8001162:	b085      	sub	sp, #20
 8001164:	af00      	add	r7, sp, #0
 8001166:	6078      	str	r0, [r7, #4]
 8001168:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos = 0;
 800116a:	2300      	movs	r3, #0
 800116c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_CAN_FILTER_SCALE(sFilterConfig->FilterScale));
  assert_param(IS_CAN_FILTER_FIFO(sFilterConfig->FilterFIFOAssignment));
  assert_param(IS_FUNCTIONAL_STATE(sFilterConfig->FilterActivation));
  assert_param(IS_CAN_BANKNUMBER(sFilterConfig->BankNumber));

  filternbrbitpos = ((uint32_t)1) << sFilterConfig->FilterNumber;
 800116e:	683b      	ldr	r3, [r7, #0]
 8001170:	695b      	ldr	r3, [r3, #20]
 8001172:	2201      	movs	r2, #1
 8001174:	fa02 f303 	lsl.w	r3, r2, r3
 8001178:	60fb      	str	r3, [r7, #12]

  /* Initialisation mode for the filter */
  /* Select the start slave bank */
  MODIFY_REG(hcan->Instance->FMR                         ,
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001182:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8001186:	683b      	ldr	r3, [r7, #0]
 8001188:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800118a:	021b      	lsls	r3, r3, #8
 800118c:	431a      	orrs	r2, r3
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	681b      	ldr	r3, [r3, #0]
 8001192:	f042 0201 	orr.w	r2, r2, #1
 8001196:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
             CAN_FMR_CAN2SB                              ,
             CAN_FMR_FINIT                              |
             (uint32_t)(sFilterConfig->BankNumber << 8)   );

  /* Filter Deactivation */
  CLEAR_BIT(hcan->Instance->FA1R, filternbrbitpos);
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	681b      	ldr	r3, [r3, #0]
 800119e:	f8d3 121c 	ldr.w	r1, [r3, #540]	; 0x21c
 80011a2:	68fb      	ldr	r3, [r7, #12]
 80011a4:	43da      	mvns	r2, r3
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	400a      	ands	r2, r1
 80011ac:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

  /* Filter Scale */
  if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 80011b0:	683b      	ldr	r3, [r7, #0]
 80011b2:	69db      	ldr	r3, [r3, #28]
 80011b4:	2b00      	cmp	r3, #0
 80011b6:	d127      	bne.n	8001208 <HAL_CAN_ConfigFilter+0xa8>
  {
    /* 16-bit scale for the filter */
    CLEAR_BIT(hcan->Instance->FS1R, filternbrbitpos);
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	f8d3 120c 	ldr.w	r1, [r3, #524]	; 0x20c
 80011c0:	68fb      	ldr	r3, [r7, #12]
 80011c2:	43da      	mvns	r2, r3
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	400a      	ands	r2, r1
 80011ca:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

    /* First 16-bit identifier and First 16-bit mask */
    /* Or First 16-bit identifier and Second 16-bit identifier */
    hcan->Instance->sFilterRegister[sFilterConfig->FilterNumber].FR1 =
       ((0x0000FFFF & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16) |
 80011ce:	683b      	ldr	r3, [r7, #0]
 80011d0:	68db      	ldr	r3, [r3, #12]
 80011d2:	0418      	lsls	r0, r3, #16
        (0x0000FFFF & (uint32_t)sFilterConfig->FilterIdLow);
 80011d4:	683b      	ldr	r3, [r7, #0]
 80011d6:	685b      	ldr	r3, [r3, #4]
 80011d8:	b299      	uxth	r1, r3
    hcan->Instance->sFilterRegister[sFilterConfig->FilterNumber].FR1 =
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	681b      	ldr	r3, [r3, #0]
 80011de:	683a      	ldr	r2, [r7, #0]
 80011e0:	6952      	ldr	r2, [r2, #20]
       ((0x0000FFFF & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16) |
 80011e2:	4301      	orrs	r1, r0
    hcan->Instance->sFilterRegister[sFilterConfig->FilterNumber].FR1 =
 80011e4:	3248      	adds	r2, #72	; 0x48
 80011e6:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

    /* Second 16-bit identifier and Second 16-bit mask */
    /* Or Third 16-bit identifier and Fourth 16-bit identifier */
    hcan->Instance->sFilterRegister[sFilterConfig->FilterNumber].FR2 =
       ((0x0000FFFF & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16) |
 80011ea:	683b      	ldr	r3, [r7, #0]
 80011ec:	689b      	ldr	r3, [r3, #8]
 80011ee:	0418      	lsls	r0, r3, #16
        (0x0000FFFF & (uint32_t)sFilterConfig->FilterIdHigh);
 80011f0:	683b      	ldr	r3, [r7, #0]
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	b29a      	uxth	r2, r3
    hcan->Instance->sFilterRegister[sFilterConfig->FilterNumber].FR2 =
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	6819      	ldr	r1, [r3, #0]
 80011fa:	683b      	ldr	r3, [r7, #0]
 80011fc:	695b      	ldr	r3, [r3, #20]
       ((0x0000FFFF & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16) |
 80011fe:	4302      	orrs	r2, r0
    hcan->Instance->sFilterRegister[sFilterConfig->FilterNumber].FR2 =
 8001200:	3348      	adds	r3, #72	; 0x48
 8001202:	00db      	lsls	r3, r3, #3
 8001204:	440b      	add	r3, r1
 8001206:	605a      	str	r2, [r3, #4]
  }

  if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8001208:	683b      	ldr	r3, [r7, #0]
 800120a:	69db      	ldr	r3, [r3, #28]
 800120c:	2b01      	cmp	r3, #1
 800120e:	d126      	bne.n	800125e <HAL_CAN_ConfigFilter+0xfe>
  {
    /* 32-bit scale for the filter */
    SET_BIT(hcan->Instance->FS1R, filternbrbitpos);
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	f8d3 120c 	ldr.w	r1, [r3, #524]	; 0x20c
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	68fa      	ldr	r2, [r7, #12]
 800121e:	430a      	orrs	r2, r1
 8001220:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
    /* 32-bit identifier or First 32-bit identifier */
    hcan->Instance->sFilterRegister[sFilterConfig->FilterNumber].FR1 =
       ((0x0000FFFF & (uint32_t)sFilterConfig->FilterIdHigh) << 16) |
 8001224:	683b      	ldr	r3, [r7, #0]
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	0418      	lsls	r0, r3, #16
        (0x0000FFFF & (uint32_t)sFilterConfig->FilterIdLow);
 800122a:	683b      	ldr	r3, [r7, #0]
 800122c:	685b      	ldr	r3, [r3, #4]
 800122e:	b299      	uxth	r1, r3
    hcan->Instance->sFilterRegister[sFilterConfig->FilterNumber].FR1 =
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	683a      	ldr	r2, [r7, #0]
 8001236:	6952      	ldr	r2, [r2, #20]
       ((0x0000FFFF & (uint32_t)sFilterConfig->FilterIdHigh) << 16) |
 8001238:	4301      	orrs	r1, r0
    hcan->Instance->sFilterRegister[sFilterConfig->FilterNumber].FR1 =
 800123a:	3248      	adds	r2, #72	; 0x48
 800123c:	f843 1032 	str.w	r1, [r3, r2, lsl #3]
    /* 32-bit mask or Second 32-bit identifier */
    hcan->Instance->sFilterRegister[sFilterConfig->FilterNumber].FR2 =
       ((0x0000FFFF & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16) |
 8001240:	683b      	ldr	r3, [r7, #0]
 8001242:	689b      	ldr	r3, [r3, #8]
 8001244:	0418      	lsls	r0, r3, #16
        (0x0000FFFF & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8001246:	683b      	ldr	r3, [r7, #0]
 8001248:	68db      	ldr	r3, [r3, #12]
 800124a:	b29a      	uxth	r2, r3
    hcan->Instance->sFilterRegister[sFilterConfig->FilterNumber].FR2 =
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	6819      	ldr	r1, [r3, #0]
 8001250:	683b      	ldr	r3, [r7, #0]
 8001252:	695b      	ldr	r3, [r3, #20]
       ((0x0000FFFF & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16) |
 8001254:	4302      	orrs	r2, r0
    hcan->Instance->sFilterRegister[sFilterConfig->FilterNumber].FR2 =
 8001256:	3348      	adds	r3, #72	; 0x48
 8001258:	00db      	lsls	r3, r3, #3
 800125a:	440b      	add	r3, r1
 800125c:	605a      	str	r2, [r3, #4]
  }

  /* Filter Mode */
  if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 800125e:	683b      	ldr	r3, [r7, #0]
 8001260:	699b      	ldr	r3, [r3, #24]
 8001262:	2b00      	cmp	r3, #0
 8001264:	d10b      	bne.n	800127e <HAL_CAN_ConfigFilter+0x11e>
  {
    /*Id/Mask mode for the filter*/
    CLEAR_BIT(hcan->Instance->FM1R, filternbrbitpos);
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	f8d3 1204 	ldr.w	r1, [r3, #516]	; 0x204
 800126e:	68fb      	ldr	r3, [r7, #12]
 8001270:	43da      	mvns	r2, r3
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	681b      	ldr	r3, [r3, #0]
 8001276:	400a      	ands	r2, r1
 8001278:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 800127c:	e009      	b.n	8001292 <HAL_CAN_ConfigFilter+0x132>
  }
  else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
  {
    /*Identifier list mode for the filter*/
    SET_BIT(hcan->Instance->FM1R, filternbrbitpos);
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	f8d3 1204 	ldr.w	r1, [r3, #516]	; 0x204
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	68fa      	ldr	r2, [r7, #12]
 800128c:	430a      	orrs	r2, r1
 800128e:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
  }

  /* Filter FIFO assignment */
  if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8001292:	683b      	ldr	r3, [r7, #0]
 8001294:	691b      	ldr	r3, [r3, #16]
 8001296:	2b00      	cmp	r3, #0
 8001298:	d10b      	bne.n	80012b2 <HAL_CAN_ConfigFilter+0x152>
  {
    /* FIFO 0 assignation for the filter */
    CLEAR_BIT(hcan->Instance->FFA1R, filternbrbitpos);
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	f8d3 1214 	ldr.w	r1, [r3, #532]	; 0x214
 80012a2:	68fb      	ldr	r3, [r7, #12]
 80012a4:	43da      	mvns	r2, r3
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	400a      	ands	r2, r1
 80012ac:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 80012b0:	e009      	b.n	80012c6 <HAL_CAN_ConfigFilter+0x166>
  }
  else
  {
    /* FIFO 1 assignation for the filter */
    SET_BIT(hcan->Instance->FFA1R, filternbrbitpos);
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	f8d3 1214 	ldr.w	r1, [r3, #532]	; 0x214
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	68fa      	ldr	r2, [r7, #12]
 80012c0:	430a      	orrs	r2, r1
 80012c2:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  }

  /* Filter activation */
  if (sFilterConfig->FilterActivation == ENABLE)
 80012c6:	683b      	ldr	r3, [r7, #0]
 80012c8:	6a1b      	ldr	r3, [r3, #32]
 80012ca:	2b01      	cmp	r3, #1
 80012cc:	d109      	bne.n	80012e2 <HAL_CAN_ConfigFilter+0x182>
  {
    SET_BIT(hcan->Instance->FA1R, filternbrbitpos);
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	f8d3 121c 	ldr.w	r1, [r3, #540]	; 0x21c
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	68fa      	ldr	r2, [r7, #12]
 80012dc:	430a      	orrs	r2, r1
 80012de:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
  }

  /* Leave the initialisation mode for the filter */
  CLEAR_BIT(hcan->Instance->FMR, ((uint32_t)CAN_FMR_FINIT));
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	f022 0201 	bic.w	r2, r2, #1
 80012f2:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

  /* Return function status */
  return HAL_OK;
 80012f6:	2300      	movs	r3, #0
}
 80012f8:	4618      	mov	r0, r3
 80012fa:	3714      	adds	r7, #20
 80012fc:	46bd      	mov	sp, r7
 80012fe:	bc80      	pop	{r7}
 8001300:	4770      	bx	lr

08001302 <HAL_CAN_MspInit>:
  * @param  hcan: pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8001302:	b480      	push	{r7}
 8001304:	b083      	sub	sp, #12
 8001306:	af00      	add	r7, sp, #0
 8001308:	6078      	str	r0, [r7, #4]
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_MspInit can be implemented in the user file
   */
}
 800130a:	bf00      	nop
 800130c:	370c      	adds	r7, #12
 800130e:	46bd      	mov	sp, r7
 8001310:	bc80      	pop	{r7}
 8001312:	4770      	bx	lr

08001314 <HAL_CAN_Transmit>:
  *         the configuration information for the specified CAN.
  * @param  Timeout: Specify Timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Transmit(CAN_HandleTypeDef* hcan, uint32_t Timeout)
{
 8001314:	b580      	push	{r7, lr}
 8001316:	b084      	sub	sp, #16
 8001318:	af00      	add	r7, sp, #0
 800131a:	6078      	str	r0, [r7, #4]
 800131c:	6039      	str	r1, [r7, #0]
  uint32_t transmitmailbox = CAN_TXSTATUS_NOMAILBOX;
 800131e:	2304      	movs	r3, #4
 8001320:	60fb      	str	r3, [r7, #12]
  uint32_t tickstart = 0;
 8001322:	2300      	movs	r3, #0
 8001324:	60bb      	str	r3, [r7, #8]
  assert_param(IS_CAN_IDTYPE(hcan->pTxMsg->IDE));
  assert_param(IS_CAN_RTR(hcan->pTxMsg->RTR));
  assert_param(IS_CAN_DLC(hcan->pTxMsg->DLC));

  /* Process locked */
  __HAL_LOCK(hcan);
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800132c:	2b01      	cmp	r3, #1
 800132e:	d101      	bne.n	8001334 <HAL_CAN_Transmit+0x20>
 8001330:	2302      	movs	r3, #2
 8001332:	e15a      	b.n	80015ea <HAL_CAN_Transmit+0x2d6>
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	2201      	movs	r2, #1
 8001338:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  if(hcan->State == HAL_CAN_STATE_BUSY_RX)
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8001342:	b2db      	uxtb	r3, r3
 8001344:	2b22      	cmp	r3, #34	; 0x22
 8001346:	d104      	bne.n	8001352 <HAL_CAN_Transmit+0x3e>
  {
    /* Change CAN state */
    hcan->State = HAL_CAN_STATE_BUSY_TX_RX;
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	2232      	movs	r2, #50	; 0x32
 800134c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
 8001350:	e003      	b.n	800135a <HAL_CAN_Transmit+0x46>
  }
  else
  {
    /* Change CAN state */
    hcan->State = HAL_CAN_STATE_BUSY_TX;
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	2212      	movs	r2, #18
 8001356:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  }

  /* Select one empty transmit mailbox */
  if (HAL_IS_BIT_SET(hcan->Instance->TSR, CAN_TSR_TME0))
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	689b      	ldr	r3, [r3, #8]
 8001360:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001364:	2b00      	cmp	r3, #0
 8001366:	d002      	beq.n	800136e <HAL_CAN_Transmit+0x5a>
  {
    transmitmailbox = 0;
 8001368:	2300      	movs	r3, #0
 800136a:	60fb      	str	r3, [r7, #12]
 800136c:	e015      	b.n	800139a <HAL_CAN_Transmit+0x86>
  }
  else if (HAL_IS_BIT_SET(hcan->Instance->TSR, CAN_TSR_TME1))
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	689b      	ldr	r3, [r3, #8]
 8001374:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001378:	2b00      	cmp	r3, #0
 800137a:	d002      	beq.n	8001382 <HAL_CAN_Transmit+0x6e>
  {
    transmitmailbox = 1;
 800137c:	2301      	movs	r3, #1
 800137e:	60fb      	str	r3, [r7, #12]
 8001380:	e00b      	b.n	800139a <HAL_CAN_Transmit+0x86>
  }
  else if (HAL_IS_BIT_SET(hcan->Instance->TSR, CAN_TSR_TME2))
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	689b      	ldr	r3, [r3, #8]
 8001388:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800138c:	2b00      	cmp	r3, #0
 800138e:	d002      	beq.n	8001396 <HAL_CAN_Transmit+0x82>
  {
    transmitmailbox = 2;
 8001390:	2302      	movs	r3, #2
 8001392:	60fb      	str	r3, [r7, #12]
 8001394:	e001      	b.n	800139a <HAL_CAN_Transmit+0x86>
  }
  else
  {
    transmitmailbox = CAN_TXSTATUS_NOMAILBOX;
 8001396:	2304      	movs	r3, #4
 8001398:	60fb      	str	r3, [r7, #12]
  }

  if (transmitmailbox != CAN_TXSTATUS_NOMAILBOX)
 800139a:	68fb      	ldr	r3, [r7, #12]
 800139c:	2b04      	cmp	r3, #4
 800139e:	f000 811b 	beq.w	80015d8 <HAL_CAN_Transmit+0x2c4>
  {
    /* Set up the Id */
    hcan->Instance->sTxMailBox[transmitmailbox].TIR &= CAN_TI0R_TXRQ;
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	681a      	ldr	r2, [r3, #0]
 80013a6:	68fb      	ldr	r3, [r7, #12]
 80013a8:	3318      	adds	r3, #24
 80013aa:	011b      	lsls	r3, r3, #4
 80013ac:	4413      	add	r3, r2
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	687a      	ldr	r2, [r7, #4]
 80013b2:	6811      	ldr	r1, [r2, #0]
 80013b4:	f003 0201 	and.w	r2, r3, #1
 80013b8:	68fb      	ldr	r3, [r7, #12]
 80013ba:	3318      	adds	r3, #24
 80013bc:	011b      	lsls	r3, r3, #4
 80013be:	440b      	add	r3, r1
 80013c0:	601a      	str	r2, [r3, #0]
    if (hcan->pTxMsg->IDE == CAN_ID_STD)
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013c6:	689b      	ldr	r3, [r3, #8]
 80013c8:	2b00      	cmp	r3, #0
 80013ca:	d117      	bne.n	80013fc <HAL_CAN_Transmit+0xe8>
    {
      assert_param(IS_CAN_STDID(hcan->pTxMsg->StdId));
      hcan->Instance->sTxMailBox[transmitmailbox].TIR |= ((hcan->pTxMsg->StdId << CAN_TI0R_STID_BIT_POSITION) |
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	681a      	ldr	r2, [r3, #0]
 80013d0:	68fb      	ldr	r3, [r7, #12]
 80013d2:	3318      	adds	r3, #24
 80013d4:	011b      	lsls	r3, r3, #4
 80013d6:	4413      	add	r3, r2
 80013d8:	681a      	ldr	r2, [r3, #0]
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	0559      	lsls	r1, r3, #21
                                                           hcan->pTxMsg->RTR);
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013e6:	68db      	ldr	r3, [r3, #12]
      hcan->Instance->sTxMailBox[transmitmailbox].TIR |= ((hcan->pTxMsg->StdId << CAN_TI0R_STID_BIT_POSITION) |
 80013e8:	430b      	orrs	r3, r1
 80013ea:	6879      	ldr	r1, [r7, #4]
 80013ec:	6809      	ldr	r1, [r1, #0]
 80013ee:	431a      	orrs	r2, r3
 80013f0:	68fb      	ldr	r3, [r7, #12]
 80013f2:	3318      	adds	r3, #24
 80013f4:	011b      	lsls	r3, r3, #4
 80013f6:	440b      	add	r3, r1
 80013f8:	601a      	str	r2, [r3, #0]
 80013fa:	e01a      	b.n	8001432 <HAL_CAN_Transmit+0x11e>
    }
    else
    {
      assert_param(IS_CAN_EXTID(hcan->pTxMsg->ExtId));
      hcan->Instance->sTxMailBox[transmitmailbox].TIR |= ((hcan->pTxMsg->ExtId << CAN_TI0R_EXID_BIT_POSITION) |
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	681a      	ldr	r2, [r3, #0]
 8001400:	68fb      	ldr	r3, [r7, #12]
 8001402:	3318      	adds	r3, #24
 8001404:	011b      	lsls	r3, r3, #4
 8001406:	4413      	add	r3, r2
 8001408:	681a      	ldr	r2, [r3, #0]
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800140e:	685b      	ldr	r3, [r3, #4]
 8001410:	00d9      	lsls	r1, r3, #3
                                                           hcan->pTxMsg->IDE |
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001416:	689b      	ldr	r3, [r3, #8]
      hcan->Instance->sTxMailBox[transmitmailbox].TIR |= ((hcan->pTxMsg->ExtId << CAN_TI0R_EXID_BIT_POSITION) |
 8001418:	4319      	orrs	r1, r3
                                                           hcan->pTxMsg->RTR);
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800141e:	68db      	ldr	r3, [r3, #12]
                                                           hcan->pTxMsg->IDE |
 8001420:	430b      	orrs	r3, r1
      hcan->Instance->sTxMailBox[transmitmailbox].TIR |= ((hcan->pTxMsg->ExtId << CAN_TI0R_EXID_BIT_POSITION) |
 8001422:	6879      	ldr	r1, [r7, #4]
 8001424:	6809      	ldr	r1, [r1, #0]
 8001426:	431a      	orrs	r2, r3
 8001428:	68fb      	ldr	r3, [r7, #12]
 800142a:	3318      	adds	r3, #24
 800142c:	011b      	lsls	r3, r3, #4
 800142e:	440b      	add	r3, r1
 8001430:	601a      	str	r2, [r3, #0]
    }

    /* Set up the DLC */
    hcan->pTxMsg->DLC &= (uint8_t)0x0000000F;
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001436:	691a      	ldr	r2, [r3, #16]
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800143c:	f002 020f 	and.w	r2, r2, #15
 8001440:	611a      	str	r2, [r3, #16]
    hcan->Instance->sTxMailBox[transmitmailbox].TDTR &= (uint32_t)0xFFFFFFF0;
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	681a      	ldr	r2, [r3, #0]
 8001446:	68fb      	ldr	r3, [r7, #12]
 8001448:	3318      	adds	r3, #24
 800144a:	011b      	lsls	r3, r3, #4
 800144c:	4413      	add	r3, r2
 800144e:	3304      	adds	r3, #4
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	687a      	ldr	r2, [r7, #4]
 8001454:	6811      	ldr	r1, [r2, #0]
 8001456:	f023 020f 	bic.w	r2, r3, #15
 800145a:	68fb      	ldr	r3, [r7, #12]
 800145c:	3318      	adds	r3, #24
 800145e:	011b      	lsls	r3, r3, #4
 8001460:	440b      	add	r3, r1
 8001462:	3304      	adds	r3, #4
 8001464:	601a      	str	r2, [r3, #0]
    hcan->Instance->sTxMailBox[transmitmailbox].TDTR |= hcan->pTxMsg->DLC;
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	681a      	ldr	r2, [r3, #0]
 800146a:	68fb      	ldr	r3, [r7, #12]
 800146c:	3318      	adds	r3, #24
 800146e:	011b      	lsls	r3, r3, #4
 8001470:	4413      	add	r3, r2
 8001472:	3304      	adds	r3, #4
 8001474:	681a      	ldr	r2, [r3, #0]
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800147a:	691b      	ldr	r3, [r3, #16]
 800147c:	6879      	ldr	r1, [r7, #4]
 800147e:	6809      	ldr	r1, [r1, #0]
 8001480:	431a      	orrs	r2, r3
 8001482:	68fb      	ldr	r3, [r7, #12]
 8001484:	3318      	adds	r3, #24
 8001486:	011b      	lsls	r3, r3, #4
 8001488:	440b      	add	r3, r1
 800148a:	3304      	adds	r3, #4
 800148c:	601a      	str	r2, [r3, #0]

    /* Set up the data field */
    WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR, ((uint32_t)hcan->pTxMsg->Data[3] << CAN_TDL0R_DATA3_BIT_POSITION) |
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001492:	6a1b      	ldr	r3, [r3, #32]
 8001494:	061a      	lsls	r2, r3, #24
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800149a:	69db      	ldr	r3, [r3, #28]
 800149c:	041b      	lsls	r3, r3, #16
 800149e:	431a      	orrs	r2, r3
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014a4:	699b      	ldr	r3, [r3, #24]
 80014a6:	021b      	lsls	r3, r3, #8
 80014a8:	431a      	orrs	r2, r3
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014ae:	695b      	ldr	r3, [r3, #20]
 80014b0:	6879      	ldr	r1, [r7, #4]
 80014b2:	6809      	ldr	r1, [r1, #0]
 80014b4:	431a      	orrs	r2, r3
 80014b6:	68fb      	ldr	r3, [r7, #12]
 80014b8:	011b      	lsls	r3, r3, #4
 80014ba:	440b      	add	r3, r1
 80014bc:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 80014c0:	601a      	str	r2, [r3, #0]
                                                                ((uint32_t)hcan->pTxMsg->Data[2] << CAN_TDL0R_DATA2_BIT_POSITION) |
                                                                ((uint32_t)hcan->pTxMsg->Data[1] << CAN_TDL0R_DATA1_BIT_POSITION) |
                                                                ((uint32_t)hcan->pTxMsg->Data[0] << CAN_TDL0R_DATA0_BIT_POSITION)  );
    WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR, ((uint32_t)hcan->pTxMsg->Data[7] << CAN_TDL0R_DATA3_BIT_POSITION) |
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014c8:	061a      	lsls	r2, r3, #24
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80014d0:	041b      	lsls	r3, r3, #16
 80014d2:	431a      	orrs	r2, r3
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80014da:	021b      	lsls	r3, r3, #8
 80014dc:	431a      	orrs	r2, r3
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014e4:	6879      	ldr	r1, [r7, #4]
 80014e6:	6809      	ldr	r1, [r1, #0]
 80014e8:	431a      	orrs	r2, r3
 80014ea:	68fb      	ldr	r3, [r7, #12]
 80014ec:	011b      	lsls	r3, r3, #4
 80014ee:	440b      	add	r3, r1
 80014f0:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 80014f4:	601a      	str	r2, [r3, #0]
                                                                ((uint32_t)hcan->pTxMsg->Data[6] << CAN_TDL0R_DATA2_BIT_POSITION) |
                                                                ((uint32_t)hcan->pTxMsg->Data[5] << CAN_TDL0R_DATA1_BIT_POSITION) |
                                                                ((uint32_t)hcan->pTxMsg->Data[4] << CAN_TDL0R_DATA0_BIT_POSITION)  );
    /* Request transmission */
    SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	681a      	ldr	r2, [r3, #0]
 80014fa:	68fb      	ldr	r3, [r7, #12]
 80014fc:	3318      	adds	r3, #24
 80014fe:	011b      	lsls	r3, r3, #4
 8001500:	4413      	add	r3, r2
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	687a      	ldr	r2, [r7, #4]
 8001506:	6811      	ldr	r1, [r2, #0]
 8001508:	f043 0201 	orr.w	r2, r3, #1
 800150c:	68fb      	ldr	r3, [r7, #12]
 800150e:	3318      	adds	r3, #24
 8001510:	011b      	lsls	r3, r3, #4
 8001512:	440b      	add	r3, r1
 8001514:	601a      	str	r2, [r3, #0]

    /* Get timeout */
    tickstart = HAL_GetTick();
 8001516:	f7ff fd13 	bl	8000f40 <HAL_GetTick>
 800151a:	60b8      	str	r0, [r7, #8]

    /* Check End of transmission flag */
    while(!(__HAL_CAN_TRANSMIT_STATUS(hcan, transmitmailbox)))
 800151c:	e018      	b.n	8001550 <HAL_CAN_Transmit+0x23c>
    {
      /* Check for the Timeout */
      if(Timeout != HAL_MAX_DELAY)
 800151e:	683b      	ldr	r3, [r7, #0]
 8001520:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001524:	d014      	beq.n	8001550 <HAL_CAN_Transmit+0x23c>
      {
        if((Timeout == 0) || ((HAL_GetTick()-tickstart) > Timeout))
 8001526:	683b      	ldr	r3, [r7, #0]
 8001528:	2b00      	cmp	r3, #0
 800152a:	d007      	beq.n	800153c <HAL_CAN_Transmit+0x228>
 800152c:	f7ff fd08 	bl	8000f40 <HAL_GetTick>
 8001530:	4602      	mov	r2, r0
 8001532:	68bb      	ldr	r3, [r7, #8]
 8001534:	1ad3      	subs	r3, r2, r3
 8001536:	683a      	ldr	r2, [r7, #0]
 8001538:	429a      	cmp	r2, r3
 800153a:	d209      	bcs.n	8001550 <HAL_CAN_Transmit+0x23c>
        {
          hcan->State = HAL_CAN_STATE_TIMEOUT;
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	2203      	movs	r2, #3
 8001540:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

          /* Process unlocked */
          __HAL_UNLOCK(hcan);
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	2200      	movs	r2, #0
 8001548:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

          return HAL_TIMEOUT;
 800154c:	2303      	movs	r3, #3
 800154e:	e04c      	b.n	80015ea <HAL_CAN_Transmit+0x2d6>
    while(!(__HAL_CAN_TRANSMIT_STATUS(hcan, transmitmailbox)))
 8001550:	68fb      	ldr	r3, [r7, #12]
 8001552:	2b00      	cmp	r3, #0
 8001554:	d10b      	bne.n	800156e <HAL_CAN_Transmit+0x25a>
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	689a      	ldr	r2, [r3, #8]
 800155c:	4b25      	ldr	r3, [pc, #148]	; (80015f4 <HAL_CAN_Transmit+0x2e0>)
 800155e:	4013      	ands	r3, r2
 8001560:	4a24      	ldr	r2, [pc, #144]	; (80015f4 <HAL_CAN_Transmit+0x2e0>)
 8001562:	4293      	cmp	r3, r2
 8001564:	bf14      	ite	ne
 8001566:	2301      	movne	r3, #1
 8001568:	2300      	moveq	r3, #0
 800156a:	b2db      	uxtb	r3, r3
 800156c:	e019      	b.n	80015a2 <HAL_CAN_Transmit+0x28e>
 800156e:	68fb      	ldr	r3, [r7, #12]
 8001570:	2b01      	cmp	r3, #1
 8001572:	d10b      	bne.n	800158c <HAL_CAN_Transmit+0x278>
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	689a      	ldr	r2, [r3, #8]
 800157a:	4b1f      	ldr	r3, [pc, #124]	; (80015f8 <HAL_CAN_Transmit+0x2e4>)
 800157c:	4013      	ands	r3, r2
 800157e:	4a1e      	ldr	r2, [pc, #120]	; (80015f8 <HAL_CAN_Transmit+0x2e4>)
 8001580:	4293      	cmp	r3, r2
 8001582:	bf14      	ite	ne
 8001584:	2301      	movne	r3, #1
 8001586:	2300      	moveq	r3, #0
 8001588:	b2db      	uxtb	r3, r3
 800158a:	e00a      	b.n	80015a2 <HAL_CAN_Transmit+0x28e>
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	689a      	ldr	r2, [r3, #8]
 8001592:	4b1a      	ldr	r3, [pc, #104]	; (80015fc <HAL_CAN_Transmit+0x2e8>)
 8001594:	4013      	ands	r3, r2
 8001596:	4a19      	ldr	r2, [pc, #100]	; (80015fc <HAL_CAN_Transmit+0x2e8>)
 8001598:	4293      	cmp	r3, r2
 800159a:	bf14      	ite	ne
 800159c:	2301      	movne	r3, #1
 800159e:	2300      	moveq	r3, #0
 80015a0:	b2db      	uxtb	r3, r3
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	d1bb      	bne.n	800151e <HAL_CAN_Transmit+0x20a>
        }
      }
    }
    if(hcan->State == HAL_CAN_STATE_BUSY_TX_RX)
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80015ac:	b2db      	uxtb	r3, r3
 80015ae:	2b32      	cmp	r3, #50	; 0x32
 80015b0:	d108      	bne.n	80015c4 <HAL_CAN_Transmit+0x2b0>
    {
      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_BUSY_RX;
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	2222      	movs	r2, #34	; 0x22
 80015b6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process unlocked */
      __HAL_UNLOCK(hcan);
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	2200      	movs	r2, #0
 80015be:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
 80015c2:	e003      	b.n	80015cc <HAL_CAN_Transmit+0x2b8>
    }
    else
    {
      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_READY;
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	2201      	movs	r2, #1
 80015c8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
    }

    /* Process unlocked */
    __HAL_UNLOCK(hcan);
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	2200      	movs	r2, #0
 80015d0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Return function status */
    return HAL_OK;
 80015d4:	2300      	movs	r3, #0
 80015d6:	e008      	b.n	80015ea <HAL_CAN_Transmit+0x2d6>
  }
  else
  {
    /* Change CAN state */
    hcan->State = HAL_CAN_STATE_ERROR;
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	2204      	movs	r2, #4
 80015dc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Process unlocked */
    __HAL_UNLOCK(hcan);
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	2200      	movs	r2, #0
 80015e4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Return function status */
    return HAL_ERROR;
 80015e8:	2301      	movs	r3, #1
  }
}
 80015ea:	4618      	mov	r0, r3
 80015ec:	3710      	adds	r7, #16
 80015ee:	46bd      	mov	sp, r7
 80015f0:	bd80      	pop	{r7, pc}
 80015f2:	bf00      	nop
 80015f4:	04000003 	.word	0x04000003
 80015f8:	08000300 	.word	0x08000300
 80015fc:	10030000 	.word	0x10030000

08001600 <HAL_CAN_Receive_IT>:
  * @param  FIFONumber: Specify the FIFO number
  * @retval HAL status
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_Receive_IT(CAN_HandleTypeDef* hcan, uint8_t FIFONumber)
{
 8001600:	b480      	push	{r7}
 8001602:	b083      	sub	sp, #12
 8001604:	af00      	add	r7, sp, #0
 8001606:	6078      	str	r0, [r7, #4]
 8001608:	460b      	mov	r3, r1
 800160a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_CAN_FIFO(FIFONumber));

  if((hcan->State == HAL_CAN_STATE_READY) || (hcan->State == HAL_CAN_STATE_BUSY_TX))
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8001612:	b2db      	uxtb	r3, r3
 8001614:	2b01      	cmp	r3, #1
 8001616:	d005      	beq.n	8001624 <HAL_CAN_Receive_IT+0x24>
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800161e:	b2db      	uxtb	r3, r3
 8001620:	2b12      	cmp	r3, #18
 8001622:	d13f      	bne.n	80016a4 <HAL_CAN_Receive_IT+0xa4>
  {
    /* Process locked */
    __HAL_LOCK(hcan);
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800162a:	2b01      	cmp	r3, #1
 800162c:	d101      	bne.n	8001632 <HAL_CAN_Receive_IT+0x32>
 800162e:	2302      	movs	r3, #2
 8001630:	e03b      	b.n	80016aa <HAL_CAN_Receive_IT+0xaa>
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	2201      	movs	r2, #1
 8001636:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    if(hcan->State == HAL_CAN_STATE_BUSY_TX)
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8001640:	b2db      	uxtb	r3, r3
 8001642:	2b12      	cmp	r3, #18
 8001644:	d104      	bne.n	8001650 <HAL_CAN_Receive_IT+0x50>
    {
      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_BUSY_TX_RX;
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	2232      	movs	r2, #50	; 0x32
 800164a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
 800164e:	e003      	b.n	8001658 <HAL_CAN_Receive_IT+0x58>
    }
    else
    {
      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_BUSY_RX;
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	2222      	movs	r2, #34	; 0x22
 8001654:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
    }

    /* Set CAN error code to none */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	2200      	movs	r2, #0
 800165c:	63da      	str	r2, [r3, #60]	; 0x3c
    /*  - Enable Error passive Interrupt */
    /*  - Enable Bus-off Interrupt */
    /*  - Enable Last error code Interrupt */
    /*  - Enable Error Interrupt */
    /*  - Enable Transmit mailbox empty Interrupt */
    __HAL_CAN_ENABLE_IT(hcan, CAN_IT_EWG |
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	695b      	ldr	r3, [r3, #20]
 8001664:	687a      	ldr	r2, [r7, #4]
 8001666:	6812      	ldr	r2, [r2, #0]
 8001668:	f443 430f 	orr.w	r3, r3, #36608	; 0x8f00
 800166c:	f043 0301 	orr.w	r3, r3, #1
 8001670:	6153      	str	r3, [r2, #20]
                              CAN_IT_LEC |
                              CAN_IT_ERR |
                              CAN_IT_TME  );

    /* Process unlocked */
    __HAL_UNLOCK(hcan);
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	2200      	movs	r2, #0
 8001676:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    if(FIFONumber == CAN_FIFO0)
 800167a:	78fb      	ldrb	r3, [r7, #3]
 800167c:	2b00      	cmp	r3, #0
 800167e:	d108      	bne.n	8001692 <HAL_CAN_Receive_IT+0x92>
    {
      /* Enable FIFO 0 message pending Interrupt */
      __HAL_CAN_ENABLE_IT(hcan, CAN_IT_FMP0);
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	695a      	ldr	r2, [r3, #20]
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	f042 0202 	orr.w	r2, r2, #2
 800168e:	615a      	str	r2, [r3, #20]
    if(FIFONumber == CAN_FIFO0)
 8001690:	e00a      	b.n	80016a8 <HAL_CAN_Receive_IT+0xa8>
    }
    else
    {
      /* Enable FIFO 1 message pending Interrupt */
      __HAL_CAN_ENABLE_IT(hcan, CAN_IT_FMP1);
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	695a      	ldr	r2, [r3, #20]
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	f042 0210 	orr.w	r2, r2, #16
 80016a0:	615a      	str	r2, [r3, #20]
    if(FIFONumber == CAN_FIFO0)
 80016a2:	e001      	b.n	80016a8 <HAL_CAN_Receive_IT+0xa8>
    }

  }
  else
  {
    return HAL_BUSY;
 80016a4:	2302      	movs	r3, #2
 80016a6:	e000      	b.n	80016aa <HAL_CAN_Receive_IT+0xaa>
  }

  /* Return function status */
  return HAL_OK;
 80016a8:	2300      	movs	r3, #0
}
 80016aa:	4618      	mov	r0, r3
 80016ac:	370c      	adds	r7, #12
 80016ae:	46bd      	mov	sp, r7
 80016b0:	bc80      	pop	{r7}
 80016b2:	4770      	bx	lr

080016b4 <HAL_CAN_IRQHandler>:
  * @param  hcan: pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef* hcan)
{
 80016b4:	b580      	push	{r7, lr}
 80016b6:	b082      	sub	sp, #8
 80016b8:	af00      	add	r7, sp, #0
 80016ba:	6078      	str	r0, [r7, #4]
  /* Check End of transmission flag */
  if(__HAL_CAN_GET_IT_SOURCE(hcan, CAN_IT_TME))
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	695b      	ldr	r3, [r3, #20]
 80016c2:	f003 0301 	and.w	r3, r3, #1
 80016c6:	2b01      	cmp	r3, #1
 80016c8:	d11a      	bne.n	8001700 <HAL_CAN_IRQHandler+0x4c>
  {
    if((__HAL_CAN_TRANSMIT_STATUS(hcan, CAN_TXMAILBOX_0)) ||
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	689a      	ldr	r2, [r3, #8]
 80016d0:	4b83      	ldr	r3, [pc, #524]	; (80018e0 <HAL_CAN_IRQHandler+0x22c>)
 80016d2:	4013      	ands	r3, r2
 80016d4:	4a82      	ldr	r2, [pc, #520]	; (80018e0 <HAL_CAN_IRQHandler+0x22c>)
 80016d6:	4293      	cmp	r3, r2
 80016d8:	d00f      	beq.n	80016fa <HAL_CAN_IRQHandler+0x46>
       (__HAL_CAN_TRANSMIT_STATUS(hcan, CAN_TXMAILBOX_1)) ||
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	689a      	ldr	r2, [r3, #8]
 80016e0:	4b80      	ldr	r3, [pc, #512]	; (80018e4 <HAL_CAN_IRQHandler+0x230>)
 80016e2:	4013      	ands	r3, r2
    if((__HAL_CAN_TRANSMIT_STATUS(hcan, CAN_TXMAILBOX_0)) ||
 80016e4:	4a7f      	ldr	r2, [pc, #508]	; (80018e4 <HAL_CAN_IRQHandler+0x230>)
 80016e6:	4293      	cmp	r3, r2
 80016e8:	d007      	beq.n	80016fa <HAL_CAN_IRQHandler+0x46>
       (__HAL_CAN_TRANSMIT_STATUS(hcan, CAN_TXMAILBOX_2)))
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	689a      	ldr	r2, [r3, #8]
 80016f0:	4b7d      	ldr	r3, [pc, #500]	; (80018e8 <HAL_CAN_IRQHandler+0x234>)
 80016f2:	4013      	ands	r3, r2
       (__HAL_CAN_TRANSMIT_STATUS(hcan, CAN_TXMAILBOX_1)) ||
 80016f4:	4a7c      	ldr	r2, [pc, #496]	; (80018e8 <HAL_CAN_IRQHandler+0x234>)
 80016f6:	4293      	cmp	r3, r2
 80016f8:	d102      	bne.n	8001700 <HAL_CAN_IRQHandler+0x4c>
    {
      /* Call transmit function */
      CAN_Transmit_IT(hcan);
 80016fa:	6878      	ldr	r0, [r7, #4]
 80016fc:	f000 f908 	bl	8001910 <CAN_Transmit_IT>
    }
  }

  /* Check End of reception flag for FIFO0 */
  if((__HAL_CAN_GET_IT_SOURCE(hcan, CAN_IT_FMP0)) &&
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	695b      	ldr	r3, [r3, #20]
 8001706:	f003 0302 	and.w	r3, r3, #2
 800170a:	2b02      	cmp	r3, #2
 800170c:	d10b      	bne.n	8001726 <HAL_CAN_IRQHandler+0x72>
     (__HAL_CAN_MSG_PENDING(hcan, CAN_FIFO0) != 0))
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	68db      	ldr	r3, [r3, #12]
 8001714:	b2db      	uxtb	r3, r3
 8001716:	f003 0303 	and.w	r3, r3, #3
  if((__HAL_CAN_GET_IT_SOURCE(hcan, CAN_IT_FMP0)) &&
 800171a:	2b00      	cmp	r3, #0
 800171c:	d003      	beq.n	8001726 <HAL_CAN_IRQHandler+0x72>
  {
    /* Call receive function */
    CAN_Receive_IT(hcan, CAN_FIFO0);
 800171e:	2100      	movs	r1, #0
 8001720:	6878      	ldr	r0, [r7, #4]
 8001722:	f000 f926 	bl	8001972 <CAN_Receive_IT>
  }

  /* Check End of reception flag for FIFO1 */
  if((__HAL_CAN_GET_IT_SOURCE(hcan, CAN_IT_FMP1)) &&
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	695b      	ldr	r3, [r3, #20]
 800172c:	f003 0310 	and.w	r3, r3, #16
 8001730:	2b10      	cmp	r3, #16
 8001732:	d10b      	bne.n	800174c <HAL_CAN_IRQHandler+0x98>
     (__HAL_CAN_MSG_PENDING(hcan, CAN_FIFO1) != 0))
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	691b      	ldr	r3, [r3, #16]
 800173a:	b2db      	uxtb	r3, r3
 800173c:	f003 0303 	and.w	r3, r3, #3
  if((__HAL_CAN_GET_IT_SOURCE(hcan, CAN_IT_FMP1)) &&
 8001740:	2b00      	cmp	r3, #0
 8001742:	d003      	beq.n	800174c <HAL_CAN_IRQHandler+0x98>
  {
    /* Call receive function */
    CAN_Receive_IT(hcan, CAN_FIFO1);
 8001744:	2101      	movs	r1, #1
 8001746:	6878      	ldr	r0, [r7, #4]
 8001748:	f000 f913 	bl	8001972 <CAN_Receive_IT>
  }

  /* Check Error Warning Flag */
  if((__HAL_CAN_GET_FLAG(hcan, CAN_FLAG_EWG))    &&
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	699b      	ldr	r3, [r3, #24]
 8001752:	f003 0301 	and.w	r3, r3, #1
 8001756:	2b01      	cmp	r3, #1
 8001758:	d115      	bne.n	8001786 <HAL_CAN_IRQHandler+0xd2>
     (__HAL_CAN_GET_IT_SOURCE(hcan, CAN_IT_EWG)) &&
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	695b      	ldr	r3, [r3, #20]
 8001760:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if((__HAL_CAN_GET_FLAG(hcan, CAN_FLAG_EWG))    &&
 8001764:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001768:	d10d      	bne.n	8001786 <HAL_CAN_IRQHandler+0xd2>
     (__HAL_CAN_GET_IT_SOURCE(hcan, CAN_IT_ERR)))
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	695b      	ldr	r3, [r3, #20]
 8001770:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
     (__HAL_CAN_GET_IT_SOURCE(hcan, CAN_IT_EWG)) &&
 8001774:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001778:	d105      	bne.n	8001786 <HAL_CAN_IRQHandler+0xd2>
  {
    /* Set CAN error code to EWG error */
    hcan->ErrorCode |= HAL_CAN_ERROR_EWG;
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800177e:	f043 0201 	orr.w	r2, r3, #1
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	63da      	str	r2, [r3, #60]	; 0x3c
    /* No need for clear of Error Warning Flag as read-only */
  }

  /* Check Error Passive Flag */
  if((__HAL_CAN_GET_FLAG(hcan, CAN_FLAG_EPV))    &&
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	699b      	ldr	r3, [r3, #24]
 800178c:	f003 0302 	and.w	r3, r3, #2
 8001790:	2b02      	cmp	r3, #2
 8001792:	d115      	bne.n	80017c0 <HAL_CAN_IRQHandler+0x10c>
     (__HAL_CAN_GET_IT_SOURCE(hcan, CAN_IT_EPV)) &&
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	695b      	ldr	r3, [r3, #20]
 800179a:	f403 7300 	and.w	r3, r3, #512	; 0x200
  if((__HAL_CAN_GET_FLAG(hcan, CAN_FLAG_EPV))    &&
 800179e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80017a2:	d10d      	bne.n	80017c0 <HAL_CAN_IRQHandler+0x10c>
     (__HAL_CAN_GET_IT_SOURCE(hcan, CAN_IT_ERR)))
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	695b      	ldr	r3, [r3, #20]
 80017aa:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
     (__HAL_CAN_GET_IT_SOURCE(hcan, CAN_IT_EPV)) &&
 80017ae:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80017b2:	d105      	bne.n	80017c0 <HAL_CAN_IRQHandler+0x10c>
  {
    /* Set CAN error code to EPV error */
    hcan->ErrorCode |= HAL_CAN_ERROR_EPV;
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80017b8:	f043 0202 	orr.w	r2, r3, #2
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	63da      	str	r2, [r3, #60]	; 0x3c
    /* No need for clear of Error Passive Flag as read-only */
  }

  /* Check Bus-Off Flag */
  if((__HAL_CAN_GET_FLAG(hcan, CAN_FLAG_BOF))    &&
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	699b      	ldr	r3, [r3, #24]
 80017c6:	f003 0304 	and.w	r3, r3, #4
 80017ca:	2b04      	cmp	r3, #4
 80017cc:	d115      	bne.n	80017fa <HAL_CAN_IRQHandler+0x146>
     (__HAL_CAN_GET_IT_SOURCE(hcan, CAN_IT_BOF)) &&
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	695b      	ldr	r3, [r3, #20]
 80017d4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
  if((__HAL_CAN_GET_FLAG(hcan, CAN_FLAG_BOF))    &&
 80017d8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80017dc:	d10d      	bne.n	80017fa <HAL_CAN_IRQHandler+0x146>
     (__HAL_CAN_GET_IT_SOURCE(hcan, CAN_IT_ERR)))
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	695b      	ldr	r3, [r3, #20]
 80017e4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
     (__HAL_CAN_GET_IT_SOURCE(hcan, CAN_IT_BOF)) &&
 80017e8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80017ec:	d105      	bne.n	80017fa <HAL_CAN_IRQHandler+0x146>
  {
    /* Set CAN error code to BOF error */
    hcan->ErrorCode |= HAL_CAN_ERROR_BOF;
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80017f2:	f043 0204 	orr.w	r2, r3, #4
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	63da      	str	r2, [r3, #60]	; 0x3c
    /* No need for clear of Bus-Off Flag as read-only */
  }

  /* Check Last error code Flag */
  if((!HAL_IS_BIT_CLR(hcan->Instance->ESR, CAN_ESR_LEC)) &&
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	699b      	ldr	r3, [r3, #24]
 8001800:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001804:	2b00      	cmp	r3, #0
 8001806:	d05c      	beq.n	80018c2 <HAL_CAN_IRQHandler+0x20e>
     (__HAL_CAN_GET_IT_SOURCE(hcan, CAN_IT_LEC))         &&
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	695b      	ldr	r3, [r3, #20]
 800180e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  if((!HAL_IS_BIT_CLR(hcan->Instance->ESR, CAN_ESR_LEC)) &&
 8001812:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001816:	d154      	bne.n	80018c2 <HAL_CAN_IRQHandler+0x20e>
     (__HAL_CAN_GET_IT_SOURCE(hcan, CAN_IT_ERR)))
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	695b      	ldr	r3, [r3, #20]
 800181e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
     (__HAL_CAN_GET_IT_SOURCE(hcan, CAN_IT_LEC))         &&
 8001822:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001826:	d14c      	bne.n	80018c2 <HAL_CAN_IRQHandler+0x20e>
  {
    switch(hcan->Instance->ESR & CAN_ESR_LEC)
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	699b      	ldr	r3, [r3, #24]
 800182e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001832:	2b60      	cmp	r3, #96	; 0x60
 8001834:	d035      	beq.n	80018a2 <HAL_CAN_IRQHandler+0x1ee>
 8001836:	2b60      	cmp	r3, #96	; 0x60
 8001838:	d83a      	bhi.n	80018b0 <HAL_CAN_IRQHandler+0x1fc>
 800183a:	2b50      	cmp	r3, #80	; 0x50
 800183c:	d02a      	beq.n	8001894 <HAL_CAN_IRQHandler+0x1e0>
 800183e:	2b50      	cmp	r3, #80	; 0x50
 8001840:	d836      	bhi.n	80018b0 <HAL_CAN_IRQHandler+0x1fc>
 8001842:	2b40      	cmp	r3, #64	; 0x40
 8001844:	d01f      	beq.n	8001886 <HAL_CAN_IRQHandler+0x1d2>
 8001846:	2b40      	cmp	r3, #64	; 0x40
 8001848:	d832      	bhi.n	80018b0 <HAL_CAN_IRQHandler+0x1fc>
 800184a:	2b30      	cmp	r3, #48	; 0x30
 800184c:	d014      	beq.n	8001878 <HAL_CAN_IRQHandler+0x1c4>
 800184e:	2b30      	cmp	r3, #48	; 0x30
 8001850:	d82e      	bhi.n	80018b0 <HAL_CAN_IRQHandler+0x1fc>
 8001852:	2b10      	cmp	r3, #16
 8001854:	d002      	beq.n	800185c <HAL_CAN_IRQHandler+0x1a8>
 8001856:	2b20      	cmp	r3, #32
 8001858:	d007      	beq.n	800186a <HAL_CAN_IRQHandler+0x1b6>
      case(CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
          /* Set CAN error code to CRC error */
          hcan->ErrorCode |= HAL_CAN_ERROR_CRC;
          break;
      default:
          break;
 800185a:	e029      	b.n	80018b0 <HAL_CAN_IRQHandler+0x1fc>
          hcan->ErrorCode |= HAL_CAN_ERROR_STF;
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001860:	f043 0208 	orr.w	r2, r3, #8
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	63da      	str	r2, [r3, #60]	; 0x3c
          break;
 8001868:	e023      	b.n	80018b2 <HAL_CAN_IRQHandler+0x1fe>
          hcan->ErrorCode |= HAL_CAN_ERROR_FOR;
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800186e:	f043 0210 	orr.w	r2, r3, #16
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	63da      	str	r2, [r3, #60]	; 0x3c
          break;
 8001876:	e01c      	b.n	80018b2 <HAL_CAN_IRQHandler+0x1fe>
          hcan->ErrorCode |= HAL_CAN_ERROR_ACK;
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800187c:	f043 0220 	orr.w	r2, r3, #32
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	63da      	str	r2, [r3, #60]	; 0x3c
          break;
 8001884:	e015      	b.n	80018b2 <HAL_CAN_IRQHandler+0x1fe>
          hcan->ErrorCode |= HAL_CAN_ERROR_BR;
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800188a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	63da      	str	r2, [r3, #60]	; 0x3c
          break;
 8001892:	e00e      	b.n	80018b2 <HAL_CAN_IRQHandler+0x1fe>
          hcan->ErrorCode |= HAL_CAN_ERROR_BD;
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001898:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	63da      	str	r2, [r3, #60]	; 0x3c
          break;
 80018a0:	e007      	b.n	80018b2 <HAL_CAN_IRQHandler+0x1fe>
          hcan->ErrorCode |= HAL_CAN_ERROR_CRC;
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80018a6:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	63da      	str	r2, [r3, #60]	; 0x3c
          break;
 80018ae:	e000      	b.n	80018b2 <HAL_CAN_IRQHandler+0x1fe>
          break;
 80018b0:	bf00      	nop
    }

    /* Clear Last error code Flag */
    CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	699a      	ldr	r2, [r3, #24]
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80018c0:	619a      	str	r2, [r3, #24]
  }

  /* Call the Error call Back in case of Errors */
  if(hcan->ErrorCode != HAL_CAN_ERROR_NONE)
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	d006      	beq.n	80018d8 <HAL_CAN_IRQHandler+0x224>
  {
    /* Set the CAN state ready to be able to start again the process */
    hcan->State = HAL_CAN_STATE_READY;
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	2201      	movs	r2, #1
 80018ce:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Call Error callback function */
    HAL_CAN_ErrorCallback(hcan);
 80018d2:	6878      	ldr	r0, [r7, #4]
 80018d4:	f000 f813 	bl	80018fe <HAL_CAN_ErrorCallback>
  }
}
 80018d8:	bf00      	nop
 80018da:	3708      	adds	r7, #8
 80018dc:	46bd      	mov	sp, r7
 80018de:	bd80      	pop	{r7, pc}
 80018e0:	04000003 	.word	0x04000003
 80018e4:	08000300 	.word	0x08000300
 80018e8:	10030000 	.word	0x10030000

080018ec <HAL_CAN_TxCpltCallback>:
  * @param  hcan: pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxCpltCallback(CAN_HandleTypeDef* hcan)
{
 80018ec:	b480      	push	{r7}
 80018ee:	b083      	sub	sp, #12
 80018f0:	af00      	add	r7, sp, #0
 80018f2:	6078      	str	r0, [r7, #4]
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxCpltCallback can be implemented in the user file
   */
}
 80018f4:	bf00      	nop
 80018f6:	370c      	adds	r7, #12
 80018f8:	46bd      	mov	sp, r7
 80018fa:	bc80      	pop	{r7}
 80018fc:	4770      	bx	lr

080018fe <HAL_CAN_ErrorCallback>:
  * @param  hcan: pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 80018fe:	b480      	push	{r7}
 8001900:	b083      	sub	sp, #12
 8001902:	af00      	add	r7, sp, #0
 8001904:	6078      	str	r0, [r7, #4]
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback can be implemented in the user file
   */
}
 8001906:	bf00      	nop
 8001908:	370c      	adds	r7, #12
 800190a:	46bd      	mov	sp, r7
 800190c:	bc80      	pop	{r7}
 800190e:	4770      	bx	lr

08001910 <CAN_Transmit_IT>:
  * @param  hcan: pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
static HAL_StatusTypeDef CAN_Transmit_IT(CAN_HandleTypeDef* hcan)
{
 8001910:	b580      	push	{r7, lr}
 8001912:	b082      	sub	sp, #8
 8001914:	af00      	add	r7, sp, #0
 8001916:	6078      	str	r0, [r7, #4]
  /* Disable Transmit mailbox empty Interrupt */
  __HAL_CAN_DISABLE_IT(hcan, CAN_IT_TME);
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	695a      	ldr	r2, [r3, #20]
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	f022 0201 	bic.w	r2, r2, #1
 8001926:	615a      	str	r2, [r3, #20]

  if(hcan->State == HAL_CAN_STATE_BUSY_TX)
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800192e:	b2db      	uxtb	r3, r3
 8001930:	2b12      	cmp	r3, #18
 8001932:	d107      	bne.n	8001944 <CAN_Transmit_IT+0x34>
    /*  - Disable Error warning Interrupt */
    /*  - Disable Error passive Interrupt */
    /*  - Disable Bus-off Interrupt */
    /*  - Disable Last error code Interrupt */
    /*  - Disable Error Interrupt */
    __HAL_CAN_DISABLE_IT(hcan, CAN_IT_EWG |
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	695a      	ldr	r2, [r3, #20]
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	f422 420f 	bic.w	r2, r2, #36608	; 0x8f00
 8001942:	615a      	str	r2, [r3, #20]
                               CAN_IT_BOF |
                               CAN_IT_LEC |
                               CAN_IT_ERR  );
  }

  if(hcan->State == HAL_CAN_STATE_BUSY_TX_RX)
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800194a:	b2db      	uxtb	r3, r3
 800194c:	2b32      	cmp	r3, #50	; 0x32
 800194e:	d104      	bne.n	800195a <CAN_Transmit_IT+0x4a>
  {
    /* Change CAN state */
    hcan->State = HAL_CAN_STATE_BUSY_RX;
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	2222      	movs	r2, #34	; 0x22
 8001954:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
 8001958:	e003      	b.n	8001962 <CAN_Transmit_IT+0x52>
  }
  else
  {
    /* Change CAN state */
    hcan->State = HAL_CAN_STATE_READY;
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	2201      	movs	r2, #1
 800195e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  }

  /* Transmission complete callback */
  HAL_CAN_TxCpltCallback(hcan);
 8001962:	6878      	ldr	r0, [r7, #4]
 8001964:	f7ff ffc2 	bl	80018ec <HAL_CAN_TxCpltCallback>

  return HAL_OK;
 8001968:	2300      	movs	r3, #0
}
 800196a:	4618      	mov	r0, r3
 800196c:	3708      	adds	r7, #8
 800196e:	46bd      	mov	sp, r7
 8001970:	bd80      	pop	{r7, pc}

08001972 <CAN_Receive_IT>:
  * @param  FIFONumber: Specify the FIFO number
  * @retval HAL status
  * @retval None
  */
static HAL_StatusTypeDef CAN_Receive_IT(CAN_HandleTypeDef* hcan, uint8_t FIFONumber)
{
 8001972:	b580      	push	{r7, lr}
 8001974:	b082      	sub	sp, #8
 8001976:	af00      	add	r7, sp, #0
 8001978:	6078      	str	r0, [r7, #4]
 800197a:	460b      	mov	r3, r1
 800197c:	70fb      	strb	r3, [r7, #3]
  /* Get the Id */
  hcan->pRxMsg->IDE = (uint8_t)0x04 & hcan->Instance->sFIFOMailBox[FIFONumber].RIR;
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	681a      	ldr	r2, [r3, #0]
 8001982:	78fb      	ldrb	r3, [r7, #3]
 8001984:	331b      	adds	r3, #27
 8001986:	011b      	lsls	r3, r3, #4
 8001988:	4413      	add	r3, r2
 800198a:	681a      	ldr	r2, [r3, #0]
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001990:	f002 0204 	and.w	r2, r2, #4
 8001994:	609a      	str	r2, [r3, #8]
  if (hcan->pRxMsg->IDE == CAN_ID_STD)
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800199a:	689b      	ldr	r3, [r3, #8]
 800199c:	2b00      	cmp	r3, #0
 800199e:	d10d      	bne.n	80019bc <CAN_Receive_IT+0x4a>
  {
    hcan->pRxMsg->StdId = (uint32_t)0x000007FF & (hcan->Instance->sFIFOMailBox[FIFONumber].RIR >> 21);
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	681a      	ldr	r2, [r3, #0]
 80019a4:	78fb      	ldrb	r3, [r7, #3]
 80019a6:	331b      	adds	r3, #27
 80019a8:	011b      	lsls	r3, r3, #4
 80019aa:	4413      	add	r3, r2
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	0d5a      	lsrs	r2, r3, #21
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80019b4:	f3c2 020a 	ubfx	r2, r2, #0, #11
 80019b8:	601a      	str	r2, [r3, #0]
 80019ba:	e00c      	b.n	80019d6 <CAN_Receive_IT+0x64>
  }
  else
  {
    hcan->pRxMsg->ExtId = (uint32_t)0x1FFFFFFF & (hcan->Instance->sFIFOMailBox[FIFONumber].RIR >> 3);
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	681a      	ldr	r2, [r3, #0]
 80019c0:	78fb      	ldrb	r3, [r7, #3]
 80019c2:	331b      	adds	r3, #27
 80019c4:	011b      	lsls	r3, r3, #4
 80019c6:	4413      	add	r3, r2
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	08da      	lsrs	r2, r3, #3
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80019d0:	f022 4260 	bic.w	r2, r2, #3758096384	; 0xe0000000
 80019d4:	605a      	str	r2, [r3, #4]
  }

  hcan->pRxMsg->RTR = (uint8_t)0x02 & hcan->Instance->sFIFOMailBox[FIFONumber].RIR;
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	681a      	ldr	r2, [r3, #0]
 80019da:	78fb      	ldrb	r3, [r7, #3]
 80019dc:	331b      	adds	r3, #27
 80019de:	011b      	lsls	r3, r3, #4
 80019e0:	4413      	add	r3, r2
 80019e2:	681a      	ldr	r2, [r3, #0]
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80019e8:	f002 0202 	and.w	r2, r2, #2
 80019ec:	60da      	str	r2, [r3, #12]
  /* Get the DLC */
  hcan->pRxMsg->DLC = (uint8_t)0x0F & hcan->Instance->sFIFOMailBox[FIFONumber].RDTR;
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	681a      	ldr	r2, [r3, #0]
 80019f2:	78fb      	ldrb	r3, [r7, #3]
 80019f4:	331b      	adds	r3, #27
 80019f6:	011b      	lsls	r3, r3, #4
 80019f8:	4413      	add	r3, r2
 80019fa:	3304      	adds	r3, #4
 80019fc:	681a      	ldr	r2, [r3, #0]
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001a02:	f002 020f 	and.w	r2, r2, #15
 8001a06:	611a      	str	r2, [r3, #16]
  /* Get the FMI */
  hcan->pRxMsg->FMI = (uint8_t)0xFF & (hcan->Instance->sFIFOMailBox[FIFONumber].RDTR >> 8);
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	681a      	ldr	r2, [r3, #0]
 8001a0c:	78fb      	ldrb	r3, [r7, #3]
 8001a0e:	331b      	adds	r3, #27
 8001a10:	011b      	lsls	r3, r3, #4
 8001a12:	4413      	add	r3, r2
 8001a14:	3304      	adds	r3, #4
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	0a1a      	lsrs	r2, r3, #8
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001a1e:	b2d2      	uxtb	r2, r2
 8001a20:	635a      	str	r2, [r3, #52]	; 0x34
  /* Get the data field */
  hcan->pRxMsg->Data[0] = (uint8_t)0xFF & hcan->Instance->sFIFOMailBox[FIFONumber].RDLR;
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	681a      	ldr	r2, [r3, #0]
 8001a26:	78fb      	ldrb	r3, [r7, #3]
 8001a28:	011b      	lsls	r3, r3, #4
 8001a2a:	4413      	add	r3, r2
 8001a2c:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001a30:	681a      	ldr	r2, [r3, #0]
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001a36:	b2d2      	uxtb	r2, r2
 8001a38:	615a      	str	r2, [r3, #20]
  hcan->pRxMsg->Data[1] = (uint8_t)0xFF & (hcan->Instance->sFIFOMailBox[FIFONumber].RDLR >> 8);
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	681a      	ldr	r2, [r3, #0]
 8001a3e:	78fb      	ldrb	r3, [r7, #3]
 8001a40:	011b      	lsls	r3, r3, #4
 8001a42:	4413      	add	r3, r2
 8001a44:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	0a1a      	lsrs	r2, r3, #8
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001a50:	b2d2      	uxtb	r2, r2
 8001a52:	619a      	str	r2, [r3, #24]
  hcan->pRxMsg->Data[2] = (uint8_t)0xFF & (hcan->Instance->sFIFOMailBox[FIFONumber].RDLR >> 16);
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	681a      	ldr	r2, [r3, #0]
 8001a58:	78fb      	ldrb	r3, [r7, #3]
 8001a5a:	011b      	lsls	r3, r3, #4
 8001a5c:	4413      	add	r3, r2
 8001a5e:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	0c1a      	lsrs	r2, r3, #16
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001a6a:	b2d2      	uxtb	r2, r2
 8001a6c:	61da      	str	r2, [r3, #28]
  hcan->pRxMsg->Data[3] = (uint8_t)0xFF & (hcan->Instance->sFIFOMailBox[FIFONumber].RDLR >> 24);
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	681a      	ldr	r2, [r3, #0]
 8001a72:	78fb      	ldrb	r3, [r7, #3]
 8001a74:	011b      	lsls	r3, r3, #4
 8001a76:	4413      	add	r3, r2
 8001a78:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	0e1a      	lsrs	r2, r3, #24
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001a84:	b2d2      	uxtb	r2, r2
 8001a86:	621a      	str	r2, [r3, #32]
  hcan->pRxMsg->Data[4] = (uint8_t)0xFF & hcan->Instance->sFIFOMailBox[FIFONumber].RDHR;
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	681a      	ldr	r2, [r3, #0]
 8001a8c:	78fb      	ldrb	r3, [r7, #3]
 8001a8e:	011b      	lsls	r3, r3, #4
 8001a90:	4413      	add	r3, r2
 8001a92:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001a96:	681a      	ldr	r2, [r3, #0]
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001a9c:	b2d2      	uxtb	r2, r2
 8001a9e:	625a      	str	r2, [r3, #36]	; 0x24
  hcan->pRxMsg->Data[5] = (uint8_t)0xFF & (hcan->Instance->sFIFOMailBox[FIFONumber].RDHR >> 8);
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	681a      	ldr	r2, [r3, #0]
 8001aa4:	78fb      	ldrb	r3, [r7, #3]
 8001aa6:	011b      	lsls	r3, r3, #4
 8001aa8:	4413      	add	r3, r2
 8001aaa:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	0a1a      	lsrs	r2, r3, #8
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001ab6:	b2d2      	uxtb	r2, r2
 8001ab8:	629a      	str	r2, [r3, #40]	; 0x28
  hcan->pRxMsg->Data[6] = (uint8_t)0xFF & (hcan->Instance->sFIFOMailBox[FIFONumber].RDHR >> 16);
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	681a      	ldr	r2, [r3, #0]
 8001abe:	78fb      	ldrb	r3, [r7, #3]
 8001ac0:	011b      	lsls	r3, r3, #4
 8001ac2:	4413      	add	r3, r2
 8001ac4:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	0c1a      	lsrs	r2, r3, #16
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001ad0:	b2d2      	uxtb	r2, r2
 8001ad2:	62da      	str	r2, [r3, #44]	; 0x2c
  hcan->pRxMsg->Data[7] = (uint8_t)0xFF & (hcan->Instance->sFIFOMailBox[FIFONumber].RDHR >> 24);
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	681a      	ldr	r2, [r3, #0]
 8001ad8:	78fb      	ldrb	r3, [r7, #3]
 8001ada:	011b      	lsls	r3, r3, #4
 8001adc:	4413      	add	r3, r2
 8001ade:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	0e1a      	lsrs	r2, r3, #24
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001aea:	b2d2      	uxtb	r2, r2
 8001aec:	631a      	str	r2, [r3, #48]	; 0x30
  /* Release the FIFO */
  /* Release FIFO0 */
  if (FIFONumber == CAN_FIFO0)
 8001aee:	78fb      	ldrb	r3, [r7, #3]
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	d110      	bne.n	8001b16 <CAN_Receive_IT+0x1a4>
  {
    __HAL_CAN_FIFO_RELEASE(hcan, CAN_FIFO0);
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	68da      	ldr	r2, [r3, #12]
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	f042 0220 	orr.w	r2, r2, #32
 8001b02:	60da      	str	r2, [r3, #12]

    /* Disable FIFO 0 message pending Interrupt */
    __HAL_CAN_DISABLE_IT(hcan, CAN_IT_FMP0);
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	695a      	ldr	r2, [r3, #20]
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	f022 0202 	bic.w	r2, r2, #2
 8001b12:	615a      	str	r2, [r3, #20]
 8001b14:	e00f      	b.n	8001b36 <CAN_Receive_IT+0x1c4>
  }
  /* Release FIFO1 */
  else /* FIFONumber == CAN_FIFO1 */
  {
    __HAL_CAN_FIFO_RELEASE(hcan, CAN_FIFO1);
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	691a      	ldr	r2, [r3, #16]
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	f042 0220 	orr.w	r2, r2, #32
 8001b24:	611a      	str	r2, [r3, #16]

    /* Disable FIFO 1 message pending Interrupt */
    __HAL_CAN_DISABLE_IT(hcan, CAN_IT_FMP1);
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	695a      	ldr	r2, [r3, #20]
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	f022 0210 	bic.w	r2, r2, #16
 8001b34:	615a      	str	r2, [r3, #20]
  }

  if(hcan->State == HAL_CAN_STATE_BUSY_RX)
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8001b3c:	b2db      	uxtb	r3, r3
 8001b3e:	2b22      	cmp	r3, #34	; 0x22
 8001b40:	d107      	bne.n	8001b52 <CAN_Receive_IT+0x1e0>
    /*  - Disable Error warning Interrupt */
    /*  - Disable Error passive Interrupt */
    /*  - Disable Bus-off Interrupt */
    /*  - Disable Last error code Interrupt */
    /*  - Disable Error Interrupt */
    __HAL_CAN_DISABLE_IT(hcan, CAN_IT_EWG |
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	695a      	ldr	r2, [r3, #20]
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	f422 420f 	bic.w	r2, r2, #36608	; 0x8f00
 8001b50:	615a      	str	r2, [r3, #20]
                               CAN_IT_BOF |
                               CAN_IT_LEC |
                               CAN_IT_ERR  );
  }

  if(hcan->State == HAL_CAN_STATE_BUSY_TX_RX)
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8001b58:	b2db      	uxtb	r3, r3
 8001b5a:	2b32      	cmp	r3, #50	; 0x32
 8001b5c:	d104      	bne.n	8001b68 <CAN_Receive_IT+0x1f6>
  {
    /* Disable CAN state */
    hcan->State = HAL_CAN_STATE_BUSY_TX;
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	2212      	movs	r2, #18
 8001b62:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
 8001b66:	e003      	b.n	8001b70 <CAN_Receive_IT+0x1fe>
  }
  else
  {
    /* Change CAN state */
    hcan->State = HAL_CAN_STATE_READY;
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	2201      	movs	r2, #1
 8001b6c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  }

  /* Receive complete callback */
  HAL_CAN_RxCpltCallback(hcan);
 8001b70:	6878      	ldr	r0, [r7, #4]
 8001b72:	f004 fa2b 	bl	8005fcc <HAL_CAN_RxCpltCallback>

  /* Return function status */
  return HAL_OK;
 8001b76:	2300      	movs	r3, #0
}
 8001b78:	4618      	mov	r0, r3
 8001b7a:	3708      	adds	r7, #8
 8001b7c:	46bd      	mov	sp, r7
 8001b7e:	bd80      	pop	{r7, pc}

08001b80 <NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b80:	b480      	push	{r7}
 8001b82:	b085      	sub	sp, #20
 8001b84:	af00      	add	r7, sp, #0
 8001b86:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	f003 0307 	and.w	r3, r3, #7
 8001b8e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001b90:	4b0c      	ldr	r3, [pc, #48]	; (8001bc4 <NVIC_SetPriorityGrouping+0x44>)
 8001b92:	68db      	ldr	r3, [r3, #12]
 8001b94:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001b96:	68ba      	ldr	r2, [r7, #8]
 8001b98:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001b9c:	4013      	ands	r3, r2
 8001b9e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8001ba0:	68fb      	ldr	r3, [r7, #12]
 8001ba2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001ba4:	68bb      	ldr	r3, [r7, #8]
 8001ba6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001ba8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001bac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001bb0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001bb2:	4a04      	ldr	r2, [pc, #16]	; (8001bc4 <NVIC_SetPriorityGrouping+0x44>)
 8001bb4:	68bb      	ldr	r3, [r7, #8]
 8001bb6:	60d3      	str	r3, [r2, #12]
}
 8001bb8:	bf00      	nop
 8001bba:	3714      	adds	r7, #20
 8001bbc:	46bd      	mov	sp, r7
 8001bbe:	bc80      	pop	{r7}
 8001bc0:	4770      	bx	lr
 8001bc2:	bf00      	nop
 8001bc4:	e000ed00 	.word	0xe000ed00

08001bc8 <NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
 8001bc8:	b480      	push	{r7}
 8001bca:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001bcc:	4b04      	ldr	r3, [pc, #16]	; (8001be0 <NVIC_GetPriorityGrouping+0x18>)
 8001bce:	68db      	ldr	r3, [r3, #12]
 8001bd0:	0a1b      	lsrs	r3, r3, #8
 8001bd2:	f003 0307 	and.w	r3, r3, #7
}
 8001bd6:	4618      	mov	r0, r3
 8001bd8:	46bd      	mov	sp, r7
 8001bda:	bc80      	pop	{r7}
 8001bdc:	4770      	bx	lr
 8001bde:	bf00      	nop
 8001be0:	e000ed00 	.word	0xe000ed00

08001be4 <NVIC_EnableIRQ>:
  \brief   Enable External Interrupt
  \details Enables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001be4:	b480      	push	{r7}
 8001be6:	b083      	sub	sp, #12
 8001be8:	af00      	add	r7, sp, #0
 8001bea:	4603      	mov	r3, r0
 8001bec:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8001bee:	79fb      	ldrb	r3, [r7, #7]
 8001bf0:	f003 021f 	and.w	r2, r3, #31
 8001bf4:	4906      	ldr	r1, [pc, #24]	; (8001c10 <NVIC_EnableIRQ+0x2c>)
 8001bf6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bfa:	095b      	lsrs	r3, r3, #5
 8001bfc:	2001      	movs	r0, #1
 8001bfe:	fa00 f202 	lsl.w	r2, r0, r2
 8001c02:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001c06:	bf00      	nop
 8001c08:	370c      	adds	r7, #12
 8001c0a:	46bd      	mov	sp, r7
 8001c0c:	bc80      	pop	{r7}
 8001c0e:	4770      	bx	lr
 8001c10:	e000e100 	.word	0xe000e100

08001c14 <NVIC_DisableIRQ>:
  \brief   Disable External Interrupt
  \details Disables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8001c14:	b480      	push	{r7}
 8001c16:	b083      	sub	sp, #12
 8001c18:	af00      	add	r7, sp, #0
 8001c1a:	4603      	mov	r3, r0
 8001c1c:	71fb      	strb	r3, [r7, #7]
  NVIC->ICER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8001c1e:	79fb      	ldrb	r3, [r7, #7]
 8001c20:	f003 021f 	and.w	r2, r3, #31
 8001c24:	4907      	ldr	r1, [pc, #28]	; (8001c44 <NVIC_DisableIRQ+0x30>)
 8001c26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c2a:	095b      	lsrs	r3, r3, #5
 8001c2c:	2001      	movs	r0, #1
 8001c2e:	fa00 f202 	lsl.w	r2, r0, r2
 8001c32:	3320      	adds	r3, #32
 8001c34:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001c38:	bf00      	nop
 8001c3a:	370c      	adds	r7, #12
 8001c3c:	46bd      	mov	sp, r7
 8001c3e:	bc80      	pop	{r7}
 8001c40:	4770      	bx	lr
 8001c42:	bf00      	nop
 8001c44:	e000e100 	.word	0xe000e100

08001c48 <NVIC_SetPriority>:
  \note    The priority cannot be set for every core interrupt.
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001c48:	b480      	push	{r7}
 8001c4a:	b083      	sub	sp, #12
 8001c4c:	af00      	add	r7, sp, #0
 8001c4e:	4603      	mov	r3, r0
 8001c50:	6039      	str	r1, [r7, #0]
 8001c52:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) < 0)
 8001c54:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	da0b      	bge.n	8001c74 <NVIC_SetPriority+0x2c>
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c5c:	683b      	ldr	r3, [r7, #0]
 8001c5e:	b2da      	uxtb	r2, r3
 8001c60:	490c      	ldr	r1, [pc, #48]	; (8001c94 <NVIC_SetPriority+0x4c>)
 8001c62:	79fb      	ldrb	r3, [r7, #7]
 8001c64:	f003 030f 	and.w	r3, r3, #15
 8001c68:	3b04      	subs	r3, #4
 8001c6a:	0112      	lsls	r2, r2, #4
 8001c6c:	b2d2      	uxtb	r2, r2
 8001c6e:	440b      	add	r3, r1
 8001c70:	761a      	strb	r2, [r3, #24]
  }
  else
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001c72:	e009      	b.n	8001c88 <NVIC_SetPriority+0x40>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c74:	683b      	ldr	r3, [r7, #0]
 8001c76:	b2da      	uxtb	r2, r3
 8001c78:	4907      	ldr	r1, [pc, #28]	; (8001c98 <NVIC_SetPriority+0x50>)
 8001c7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c7e:	0112      	lsls	r2, r2, #4
 8001c80:	b2d2      	uxtb	r2, r2
 8001c82:	440b      	add	r3, r1
 8001c84:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8001c88:	bf00      	nop
 8001c8a:	370c      	adds	r7, #12
 8001c8c:	46bd      	mov	sp, r7
 8001c8e:	bc80      	pop	{r7}
 8001c90:	4770      	bx	lr
 8001c92:	bf00      	nop
 8001c94:	e000ed00 	.word	0xe000ed00
 8001c98:	e000e100 	.word	0xe000e100

08001c9c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001c9c:	b480      	push	{r7}
 8001c9e:	b089      	sub	sp, #36	; 0x24
 8001ca0:	af00      	add	r7, sp, #0
 8001ca2:	60f8      	str	r0, [r7, #12]
 8001ca4:	60b9      	str	r1, [r7, #8]
 8001ca6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001ca8:	68fb      	ldr	r3, [r7, #12]
 8001caa:	f003 0307 	and.w	r3, r3, #7
 8001cae:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001cb0:	69fb      	ldr	r3, [r7, #28]
 8001cb2:	f1c3 0307 	rsb	r3, r3, #7
 8001cb6:	2b04      	cmp	r3, #4
 8001cb8:	bf28      	it	cs
 8001cba:	2304      	movcs	r3, #4
 8001cbc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001cbe:	69fb      	ldr	r3, [r7, #28]
 8001cc0:	3304      	adds	r3, #4
 8001cc2:	2b06      	cmp	r3, #6
 8001cc4:	d902      	bls.n	8001ccc <NVIC_EncodePriority+0x30>
 8001cc6:	69fb      	ldr	r3, [r7, #28]
 8001cc8:	3b03      	subs	r3, #3
 8001cca:	e000      	b.n	8001cce <NVIC_EncodePriority+0x32>
 8001ccc:	2300      	movs	r3, #0
 8001cce:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001cd0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001cd4:	69bb      	ldr	r3, [r7, #24]
 8001cd6:	fa02 f303 	lsl.w	r3, r2, r3
 8001cda:	43da      	mvns	r2, r3
 8001cdc:	68bb      	ldr	r3, [r7, #8]
 8001cde:	401a      	ands	r2, r3
 8001ce0:	697b      	ldr	r3, [r7, #20]
 8001ce2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001ce4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001ce8:	697b      	ldr	r3, [r7, #20]
 8001cea:	fa01 f303 	lsl.w	r3, r1, r3
 8001cee:	43d9      	mvns	r1, r3
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001cf4:	4313      	orrs	r3, r2
         );
}
 8001cf6:	4618      	mov	r0, r3
 8001cf8:	3724      	adds	r7, #36	; 0x24
 8001cfa:	46bd      	mov	sp, r7
 8001cfc:	bc80      	pop	{r7}
 8001cfe:	4770      	bx	lr

08001d00 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001d00:	b580      	push	{r7, lr}
 8001d02:	b082      	sub	sp, #8
 8001d04:	af00      	add	r7, sp, #0
 8001d06:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	3b01      	subs	r3, #1
 8001d0c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001d10:	d301      	bcc.n	8001d16 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001d12:	2301      	movs	r3, #1
 8001d14:	e00f      	b.n	8001d36 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001d16:	4a0a      	ldr	r2, [pc, #40]	; (8001d40 <SysTick_Config+0x40>)
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	3b01      	subs	r3, #1
 8001d1c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001d1e:	210f      	movs	r1, #15
 8001d20:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001d24:	f7ff ff90 	bl	8001c48 <NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001d28:	4b05      	ldr	r3, [pc, #20]	; (8001d40 <SysTick_Config+0x40>)
 8001d2a:	2200      	movs	r2, #0
 8001d2c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001d2e:	4b04      	ldr	r3, [pc, #16]	; (8001d40 <SysTick_Config+0x40>)
 8001d30:	2207      	movs	r2, #7
 8001d32:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001d34:	2300      	movs	r3, #0
}
 8001d36:	4618      	mov	r0, r3
 8001d38:	3708      	adds	r7, #8
 8001d3a:	46bd      	mov	sp, r7
 8001d3c:	bd80      	pop	{r7, pc}
 8001d3e:	bf00      	nop
 8001d40:	e000e010 	.word	0xe000e010

08001d44 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d44:	b580      	push	{r7, lr}
 8001d46:	b082      	sub	sp, #8
 8001d48:	af00      	add	r7, sp, #0
 8001d4a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001d4c:	6878      	ldr	r0, [r7, #4]
 8001d4e:	f7ff ff17 	bl	8001b80 <NVIC_SetPriorityGrouping>
}
 8001d52:	bf00      	nop
 8001d54:	3708      	adds	r7, #8
 8001d56:	46bd      	mov	sp, r7
 8001d58:	bd80      	pop	{r7, pc}

08001d5a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001d5a:	b580      	push	{r7, lr}
 8001d5c:	b086      	sub	sp, #24
 8001d5e:	af00      	add	r7, sp, #0
 8001d60:	4603      	mov	r3, r0
 8001d62:	60b9      	str	r1, [r7, #8]
 8001d64:	607a      	str	r2, [r7, #4]
 8001d66:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001d68:	2300      	movs	r3, #0
 8001d6a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001d6c:	f7ff ff2c 	bl	8001bc8 <NVIC_GetPriorityGrouping>
 8001d70:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001d72:	687a      	ldr	r2, [r7, #4]
 8001d74:	68b9      	ldr	r1, [r7, #8]
 8001d76:	6978      	ldr	r0, [r7, #20]
 8001d78:	f7ff ff90 	bl	8001c9c <NVIC_EncodePriority>
 8001d7c:	4602      	mov	r2, r0
 8001d7e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001d82:	4611      	mov	r1, r2
 8001d84:	4618      	mov	r0, r3
 8001d86:	f7ff ff5f 	bl	8001c48 <NVIC_SetPriority>
}
 8001d8a:	bf00      	nop
 8001d8c:	3718      	adds	r7, #24
 8001d8e:	46bd      	mov	sp, r7
 8001d90:	bd80      	pop	{r7, pc}

08001d92 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d92:	b580      	push	{r7, lr}
 8001d94:	b082      	sub	sp, #8
 8001d96:	af00      	add	r7, sp, #0
 8001d98:	4603      	mov	r3, r0
 8001d9a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001d9c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001da0:	4618      	mov	r0, r3
 8001da2:	f7ff ff1f 	bl	8001be4 <NVIC_EnableIRQ>
}
 8001da6:	bf00      	nop
 8001da8:	3708      	adds	r7, #8
 8001daa:	46bd      	mov	sp, r7
 8001dac:	bd80      	pop	{r7, pc}

08001dae <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))  
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8001dae:	b580      	push	{r7, lr}
 8001db0:	b082      	sub	sp, #8
 8001db2:	af00      	add	r7, sp, #0
 8001db4:	4603      	mov	r3, r0
 8001db6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8001db8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001dbc:	4618      	mov	r0, r3
 8001dbe:	f7ff ff29 	bl	8001c14 <NVIC_DisableIRQ>
}
 8001dc2:	bf00      	nop
 8001dc4:	3708      	adds	r7, #8
 8001dc6:	46bd      	mov	sp, r7
 8001dc8:	bd80      	pop	{r7, pc}

08001dca <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001dca:	b580      	push	{r7, lr}
 8001dcc:	b082      	sub	sp, #8
 8001dce:	af00      	add	r7, sp, #0
 8001dd0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001dd2:	6878      	ldr	r0, [r7, #4]
 8001dd4:	f7ff ff94 	bl	8001d00 <SysTick_Config>
 8001dd8:	4603      	mov	r3, r0
}
 8001dda:	4618      	mov	r0, r3
 8001ddc:	3708      	adds	r7, #8
 8001dde:	46bd      	mov	sp, r7
 8001de0:	bd80      	pop	{r7, pc}
	...

08001de4 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 8001de4:	b480      	push	{r7}
 8001de6:	b083      	sub	sp, #12
 8001de8:	af00      	add	r7, sp, #0
 8001dea:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	2b04      	cmp	r3, #4
 8001df0:	d106      	bne.n	8001e00 <HAL_SYSTICK_CLKSourceConfig+0x1c>
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 8001df2:	4b09      	ldr	r3, [pc, #36]	; (8001e18 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	4a08      	ldr	r2, [pc, #32]	; (8001e18 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8001df8:	f043 0304 	orr.w	r3, r3, #4
 8001dfc:	6013      	str	r3, [r2, #0]
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
  }
}
 8001dfe:	e005      	b.n	8001e0c <HAL_SYSTICK_CLKSourceConfig+0x28>
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 8001e00:	4b05      	ldr	r3, [pc, #20]	; (8001e18 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	4a04      	ldr	r2, [pc, #16]	; (8001e18 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8001e06:	f023 0304 	bic.w	r3, r3, #4
 8001e0a:	6013      	str	r3, [r2, #0]
}
 8001e0c:	bf00      	nop
 8001e0e:	370c      	adds	r7, #12
 8001e10:	46bd      	mov	sp, r7
 8001e12:	bc80      	pop	{r7}
 8001e14:	4770      	bx	lr
 8001e16:	bf00      	nop
 8001e18:	e000e010 	.word	0xe000e010

08001e1c <HAL_SYSTICK_IRQHandler>:
/**
  * @brief  This function handles SYSTICK interrupt request.
  * @retval None
  */
void HAL_SYSTICK_IRQHandler(void)
{
 8001e1c:	b580      	push	{r7, lr}
 8001e1e:	af00      	add	r7, sp, #0
  HAL_SYSTICK_Callback();
 8001e20:	f005 fccc 	bl	80077bc <HAL_SYSTICK_Callback>
}
 8001e24:	bf00      	nop
 8001e26:	bd80      	pop	{r7, pc}

08001e28 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8001e28:	b580      	push	{r7, lr}
 8001e2a:	b084      	sub	sp, #16
 8001e2c:	af00      	add	r7, sp, #0
 8001e2e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001e30:	2300      	movs	r3, #0
 8001e32:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001e3a:	2b02      	cmp	r3, #2
 8001e3c:	d005      	beq.n	8001e4a <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	2204      	movs	r2, #4
 8001e42:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8001e44:	2301      	movs	r3, #1
 8001e46:	73fb      	strb	r3, [r7, #15]
 8001e48:	e051      	b.n	8001eee <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	681a      	ldr	r2, [r3, #0]
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	f022 020e 	bic.w	r2, r2, #14
 8001e58:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	681a      	ldr	r2, [r3, #0]
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	f022 0201 	bic.w	r2, r2, #1
 8001e68:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	4a22      	ldr	r2, [pc, #136]	; (8001ef8 <HAL_DMA_Abort_IT+0xd0>)
 8001e70:	4293      	cmp	r3, r2
 8001e72:	d029      	beq.n	8001ec8 <HAL_DMA_Abort_IT+0xa0>
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	4a20      	ldr	r2, [pc, #128]	; (8001efc <HAL_DMA_Abort_IT+0xd4>)
 8001e7a:	4293      	cmp	r3, r2
 8001e7c:	d022      	beq.n	8001ec4 <HAL_DMA_Abort_IT+0x9c>
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	4a1f      	ldr	r2, [pc, #124]	; (8001f00 <HAL_DMA_Abort_IT+0xd8>)
 8001e84:	4293      	cmp	r3, r2
 8001e86:	d01a      	beq.n	8001ebe <HAL_DMA_Abort_IT+0x96>
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	4a1d      	ldr	r2, [pc, #116]	; (8001f04 <HAL_DMA_Abort_IT+0xdc>)
 8001e8e:	4293      	cmp	r3, r2
 8001e90:	d012      	beq.n	8001eb8 <HAL_DMA_Abort_IT+0x90>
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	4a1c      	ldr	r2, [pc, #112]	; (8001f08 <HAL_DMA_Abort_IT+0xe0>)
 8001e98:	4293      	cmp	r3, r2
 8001e9a:	d00a      	beq.n	8001eb2 <HAL_DMA_Abort_IT+0x8a>
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	4a1a      	ldr	r2, [pc, #104]	; (8001f0c <HAL_DMA_Abort_IT+0xe4>)
 8001ea2:	4293      	cmp	r3, r2
 8001ea4:	d102      	bne.n	8001eac <HAL_DMA_Abort_IT+0x84>
 8001ea6:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8001eaa:	e00e      	b.n	8001eca <HAL_DMA_Abort_IT+0xa2>
 8001eac:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001eb0:	e00b      	b.n	8001eca <HAL_DMA_Abort_IT+0xa2>
 8001eb2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001eb6:	e008      	b.n	8001eca <HAL_DMA_Abort_IT+0xa2>
 8001eb8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001ebc:	e005      	b.n	8001eca <HAL_DMA_Abort_IT+0xa2>
 8001ebe:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001ec2:	e002      	b.n	8001eca <HAL_DMA_Abort_IT+0xa2>
 8001ec4:	2310      	movs	r3, #16
 8001ec6:	e000      	b.n	8001eca <HAL_DMA_Abort_IT+0xa2>
 8001ec8:	2301      	movs	r3, #1
 8001eca:	4a11      	ldr	r2, [pc, #68]	; (8001f10 <HAL_DMA_Abort_IT+0xe8>)
 8001ecc:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	2201      	movs	r2, #1
 8001ed2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	2200      	movs	r2, #0
 8001eda:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d003      	beq.n	8001eee <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001eea:	6878      	ldr	r0, [r7, #4]
 8001eec:	4798      	blx	r3
    } 
  }
  return status;
 8001eee:	7bfb      	ldrb	r3, [r7, #15]
}
 8001ef0:	4618      	mov	r0, r3
 8001ef2:	3710      	adds	r7, #16
 8001ef4:	46bd      	mov	sp, r7
 8001ef6:	bd80      	pop	{r7, pc}
 8001ef8:	40020008 	.word	0x40020008
 8001efc:	4002001c 	.word	0x4002001c
 8001f00:	40020030 	.word	0x40020030
 8001f04:	40020044 	.word	0x40020044
 8001f08:	40020058 	.word	0x40020058
 8001f0c:	4002006c 	.word	0x4002006c
 8001f10:	40020000 	.word	0x40020000

08001f14 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001f14:	b480      	push	{r7}
 8001f16:	b08b      	sub	sp, #44	; 0x2c
 8001f18:	af00      	add	r7, sp, #0
 8001f1a:	6078      	str	r0, [r7, #4]
 8001f1c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001f1e:	2300      	movs	r3, #0
 8001f20:	61fb      	str	r3, [r7, #28]
  uint32_t iocurrent = 0x00U;
 8001f22:	2300      	movs	r3, #0
 8001f24:	61bb      	str	r3, [r7, #24]
  uint32_t temp = 0x00U;
 8001f26:	2300      	movs	r3, #0
 8001f28:	617b      	str	r3, [r7, #20]
  uint32_t config = 0x00U;
 8001f2a:	2300      	movs	r3, #0
 8001f2c:	623b      	str	r3, [r7, #32]
  __IO uint32_t *configregister; /* Store the address of CRL or CRH register based on pin number */
  uint32_t registeroffset = 0U; /* offset used during computation of CNF and MODE bits placement inside CRL or CRH register */
 8001f2e:	2300      	movs	r3, #0
 8001f30:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0U; position < GPIO_NUMBER; position++)
 8001f32:	2300      	movs	r3, #0
 8001f34:	627b      	str	r3, [r7, #36]	; 0x24
 8001f36:	e169      	b.n	800220c <HAL_GPIO_Init+0x2f8>
  {
    /* Get the IO position */
    ioposition = (0x01U << position);
 8001f38:	2201      	movs	r2, #1
 8001f3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f3c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f40:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001f42:	683b      	ldr	r3, [r7, #0]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	69fa      	ldr	r2, [r7, #28]
 8001f48:	4013      	ands	r3, r2
 8001f4a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001f4c:	69ba      	ldr	r2, [r7, #24]
 8001f4e:	69fb      	ldr	r3, [r7, #28]
 8001f50:	429a      	cmp	r2, r3
 8001f52:	f040 8158 	bne.w	8002206 <HAL_GPIO_Init+0x2f2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001f56:	683b      	ldr	r3, [r7, #0]
 8001f58:	685b      	ldr	r3, [r3, #4]
 8001f5a:	4a9a      	ldr	r2, [pc, #616]	; (80021c4 <HAL_GPIO_Init+0x2b0>)
 8001f5c:	4293      	cmp	r3, r2
 8001f5e:	d05e      	beq.n	800201e <HAL_GPIO_Init+0x10a>
 8001f60:	4a98      	ldr	r2, [pc, #608]	; (80021c4 <HAL_GPIO_Init+0x2b0>)
 8001f62:	4293      	cmp	r3, r2
 8001f64:	d875      	bhi.n	8002052 <HAL_GPIO_Init+0x13e>
 8001f66:	4a98      	ldr	r2, [pc, #608]	; (80021c8 <HAL_GPIO_Init+0x2b4>)
 8001f68:	4293      	cmp	r3, r2
 8001f6a:	d058      	beq.n	800201e <HAL_GPIO_Init+0x10a>
 8001f6c:	4a96      	ldr	r2, [pc, #600]	; (80021c8 <HAL_GPIO_Init+0x2b4>)
 8001f6e:	4293      	cmp	r3, r2
 8001f70:	d86f      	bhi.n	8002052 <HAL_GPIO_Init+0x13e>
 8001f72:	4a96      	ldr	r2, [pc, #600]	; (80021cc <HAL_GPIO_Init+0x2b8>)
 8001f74:	4293      	cmp	r3, r2
 8001f76:	d052      	beq.n	800201e <HAL_GPIO_Init+0x10a>
 8001f78:	4a94      	ldr	r2, [pc, #592]	; (80021cc <HAL_GPIO_Init+0x2b8>)
 8001f7a:	4293      	cmp	r3, r2
 8001f7c:	d869      	bhi.n	8002052 <HAL_GPIO_Init+0x13e>
 8001f7e:	4a94      	ldr	r2, [pc, #592]	; (80021d0 <HAL_GPIO_Init+0x2bc>)
 8001f80:	4293      	cmp	r3, r2
 8001f82:	d04c      	beq.n	800201e <HAL_GPIO_Init+0x10a>
 8001f84:	4a92      	ldr	r2, [pc, #584]	; (80021d0 <HAL_GPIO_Init+0x2bc>)
 8001f86:	4293      	cmp	r3, r2
 8001f88:	d863      	bhi.n	8002052 <HAL_GPIO_Init+0x13e>
 8001f8a:	4a92      	ldr	r2, [pc, #584]	; (80021d4 <HAL_GPIO_Init+0x2c0>)
 8001f8c:	4293      	cmp	r3, r2
 8001f8e:	d046      	beq.n	800201e <HAL_GPIO_Init+0x10a>
 8001f90:	4a90      	ldr	r2, [pc, #576]	; (80021d4 <HAL_GPIO_Init+0x2c0>)
 8001f92:	4293      	cmp	r3, r2
 8001f94:	d85d      	bhi.n	8002052 <HAL_GPIO_Init+0x13e>
 8001f96:	2b12      	cmp	r3, #18
 8001f98:	d82a      	bhi.n	8001ff0 <HAL_GPIO_Init+0xdc>
 8001f9a:	2b12      	cmp	r3, #18
 8001f9c:	d859      	bhi.n	8002052 <HAL_GPIO_Init+0x13e>
 8001f9e:	a201      	add	r2, pc, #4	; (adr r2, 8001fa4 <HAL_GPIO_Init+0x90>)
 8001fa0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001fa4:	0800201f 	.word	0x0800201f
 8001fa8:	08001ff9 	.word	0x08001ff9
 8001fac:	0800200b 	.word	0x0800200b
 8001fb0:	0800204d 	.word	0x0800204d
 8001fb4:	08002053 	.word	0x08002053
 8001fb8:	08002053 	.word	0x08002053
 8001fbc:	08002053 	.word	0x08002053
 8001fc0:	08002053 	.word	0x08002053
 8001fc4:	08002053 	.word	0x08002053
 8001fc8:	08002053 	.word	0x08002053
 8001fcc:	08002053 	.word	0x08002053
 8001fd0:	08002053 	.word	0x08002053
 8001fd4:	08002053 	.word	0x08002053
 8001fd8:	08002053 	.word	0x08002053
 8001fdc:	08002053 	.word	0x08002053
 8001fe0:	08002053 	.word	0x08002053
 8001fe4:	08002053 	.word	0x08002053
 8001fe8:	08002001 	.word	0x08002001
 8001fec:	08002015 	.word	0x08002015
 8001ff0:	4a79      	ldr	r2, [pc, #484]	; (80021d8 <HAL_GPIO_Init+0x2c4>)
 8001ff2:	4293      	cmp	r3, r2
 8001ff4:	d013      	beq.n	800201e <HAL_GPIO_Init+0x10a>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001ff6:	e02c      	b.n	8002052 <HAL_GPIO_Init+0x13e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001ff8:	683b      	ldr	r3, [r7, #0]
 8001ffa:	68db      	ldr	r3, [r3, #12]
 8001ffc:	623b      	str	r3, [r7, #32]
          break;
 8001ffe:	e029      	b.n	8002054 <HAL_GPIO_Init+0x140>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002000:	683b      	ldr	r3, [r7, #0]
 8002002:	68db      	ldr	r3, [r3, #12]
 8002004:	3304      	adds	r3, #4
 8002006:	623b      	str	r3, [r7, #32]
          break;
 8002008:	e024      	b.n	8002054 <HAL_GPIO_Init+0x140>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800200a:	683b      	ldr	r3, [r7, #0]
 800200c:	68db      	ldr	r3, [r3, #12]
 800200e:	3308      	adds	r3, #8
 8002010:	623b      	str	r3, [r7, #32]
          break;
 8002012:	e01f      	b.n	8002054 <HAL_GPIO_Init+0x140>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002014:	683b      	ldr	r3, [r7, #0]
 8002016:	68db      	ldr	r3, [r3, #12]
 8002018:	330c      	adds	r3, #12
 800201a:	623b      	str	r3, [r7, #32]
          break;
 800201c:	e01a      	b.n	8002054 <HAL_GPIO_Init+0x140>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800201e:	683b      	ldr	r3, [r7, #0]
 8002020:	689b      	ldr	r3, [r3, #8]
 8002022:	2b00      	cmp	r3, #0
 8002024:	d102      	bne.n	800202c <HAL_GPIO_Init+0x118>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002026:	2304      	movs	r3, #4
 8002028:	623b      	str	r3, [r7, #32]
          break;
 800202a:	e013      	b.n	8002054 <HAL_GPIO_Init+0x140>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800202c:	683b      	ldr	r3, [r7, #0]
 800202e:	689b      	ldr	r3, [r3, #8]
 8002030:	2b01      	cmp	r3, #1
 8002032:	d105      	bne.n	8002040 <HAL_GPIO_Init+0x12c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002034:	2308      	movs	r3, #8
 8002036:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	69fa      	ldr	r2, [r7, #28]
 800203c:	611a      	str	r2, [r3, #16]
          break;
 800203e:	e009      	b.n	8002054 <HAL_GPIO_Init+0x140>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002040:	2308      	movs	r3, #8
 8002042:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	69fa      	ldr	r2, [r7, #28]
 8002048:	615a      	str	r2, [r3, #20]
          break;
 800204a:	e003      	b.n	8002054 <HAL_GPIO_Init+0x140>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800204c:	2300      	movs	r3, #0
 800204e:	623b      	str	r3, [r7, #32]
          break;
 8002050:	e000      	b.n	8002054 <HAL_GPIO_Init+0x140>
          break;
 8002052:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002054:	69bb      	ldr	r3, [r7, #24]
 8002056:	2bff      	cmp	r3, #255	; 0xff
 8002058:	d801      	bhi.n	800205e <HAL_GPIO_Init+0x14a>
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	e001      	b.n	8002062 <HAL_GPIO_Init+0x14e>
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	3304      	adds	r3, #4
 8002062:	60fb      	str	r3, [r7, #12]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2U) : ((position - 8U) << 2U);
 8002064:	69bb      	ldr	r3, [r7, #24]
 8002066:	2bff      	cmp	r3, #255	; 0xff
 8002068:	d802      	bhi.n	8002070 <HAL_GPIO_Init+0x15c>
 800206a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800206c:	009b      	lsls	r3, r3, #2
 800206e:	e002      	b.n	8002076 <HAL_GPIO_Init+0x162>
 8002070:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002072:	3b08      	subs	r3, #8
 8002074:	009b      	lsls	r3, r3, #2
 8002076:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002078:	68fb      	ldr	r3, [r7, #12]
 800207a:	681a      	ldr	r2, [r3, #0]
 800207c:	210f      	movs	r1, #15
 800207e:	693b      	ldr	r3, [r7, #16]
 8002080:	fa01 f303 	lsl.w	r3, r1, r3
 8002084:	43db      	mvns	r3, r3
 8002086:	401a      	ands	r2, r3
 8002088:	6a39      	ldr	r1, [r7, #32]
 800208a:	693b      	ldr	r3, [r7, #16]
 800208c:	fa01 f303 	lsl.w	r3, r1, r3
 8002090:	431a      	orrs	r2, r3
 8002092:	68fb      	ldr	r3, [r7, #12]
 8002094:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002096:	683b      	ldr	r3, [r7, #0]
 8002098:	685b      	ldr	r3, [r3, #4]
 800209a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800209e:	2b00      	cmp	r3, #0
 80020a0:	f000 80b1 	beq.w	8002206 <HAL_GPIO_Init+0x2f2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80020a4:	4b4d      	ldr	r3, [pc, #308]	; (80021dc <HAL_GPIO_Init+0x2c8>)
 80020a6:	699b      	ldr	r3, [r3, #24]
 80020a8:	4a4c      	ldr	r2, [pc, #304]	; (80021dc <HAL_GPIO_Init+0x2c8>)
 80020aa:	f043 0301 	orr.w	r3, r3, #1
 80020ae:	6193      	str	r3, [r2, #24]
 80020b0:	4b4a      	ldr	r3, [pc, #296]	; (80021dc <HAL_GPIO_Init+0x2c8>)
 80020b2:	699b      	ldr	r3, [r3, #24]
 80020b4:	f003 0301 	and.w	r3, r3, #1
 80020b8:	60bb      	str	r3, [r7, #8]
 80020ba:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2U];
 80020bc:	4a48      	ldr	r2, [pc, #288]	; (80021e0 <HAL_GPIO_Init+0x2cc>)
 80020be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020c0:	089b      	lsrs	r3, r3, #2
 80020c2:	3302      	adds	r3, #2
 80020c4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80020c8:	617b      	str	r3, [r7, #20]
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 80020ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020cc:	f003 0303 	and.w	r3, r3, #3
 80020d0:	009b      	lsls	r3, r3, #2
 80020d2:	220f      	movs	r2, #15
 80020d4:	fa02 f303 	lsl.w	r3, r2, r3
 80020d8:	43db      	mvns	r3, r3
 80020da:	697a      	ldr	r2, [r7, #20]
 80020dc:	4013      	ands	r3, r2
 80020de:	617b      	str	r3, [r7, #20]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	4a40      	ldr	r2, [pc, #256]	; (80021e4 <HAL_GPIO_Init+0x2d0>)
 80020e4:	4293      	cmp	r3, r2
 80020e6:	d013      	beq.n	8002110 <HAL_GPIO_Init+0x1fc>
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	4a3f      	ldr	r2, [pc, #252]	; (80021e8 <HAL_GPIO_Init+0x2d4>)
 80020ec:	4293      	cmp	r3, r2
 80020ee:	d00d      	beq.n	800210c <HAL_GPIO_Init+0x1f8>
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	4a3e      	ldr	r2, [pc, #248]	; (80021ec <HAL_GPIO_Init+0x2d8>)
 80020f4:	4293      	cmp	r3, r2
 80020f6:	d007      	beq.n	8002108 <HAL_GPIO_Init+0x1f4>
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	4a3d      	ldr	r2, [pc, #244]	; (80021f0 <HAL_GPIO_Init+0x2dc>)
 80020fc:	4293      	cmp	r3, r2
 80020fe:	d101      	bne.n	8002104 <HAL_GPIO_Init+0x1f0>
 8002100:	2303      	movs	r3, #3
 8002102:	e006      	b.n	8002112 <HAL_GPIO_Init+0x1fe>
 8002104:	2304      	movs	r3, #4
 8002106:	e004      	b.n	8002112 <HAL_GPIO_Init+0x1fe>
 8002108:	2302      	movs	r3, #2
 800210a:	e002      	b.n	8002112 <HAL_GPIO_Init+0x1fe>
 800210c:	2301      	movs	r3, #1
 800210e:	e000      	b.n	8002112 <HAL_GPIO_Init+0x1fe>
 8002110:	2300      	movs	r3, #0
 8002112:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002114:	f002 0203 	and.w	r2, r2, #3
 8002118:	0092      	lsls	r2, r2, #2
 800211a:	4093      	lsls	r3, r2
 800211c:	697a      	ldr	r2, [r7, #20]
 800211e:	4313      	orrs	r3, r2
 8002120:	617b      	str	r3, [r7, #20]
        AFIO->EXTICR[position >> 2U] = temp;
 8002122:	492f      	ldr	r1, [pc, #188]	; (80021e0 <HAL_GPIO_Init+0x2cc>)
 8002124:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002126:	089b      	lsrs	r3, r3, #2
 8002128:	3302      	adds	r3, #2
 800212a:	697a      	ldr	r2, [r7, #20]
 800212c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002130:	683b      	ldr	r3, [r7, #0]
 8002132:	685b      	ldr	r3, [r3, #4]
 8002134:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002138:	2b00      	cmp	r3, #0
 800213a:	d006      	beq.n	800214a <HAL_GPIO_Init+0x236>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800213c:	4b2d      	ldr	r3, [pc, #180]	; (80021f4 <HAL_GPIO_Init+0x2e0>)
 800213e:	681a      	ldr	r2, [r3, #0]
 8002140:	492c      	ldr	r1, [pc, #176]	; (80021f4 <HAL_GPIO_Init+0x2e0>)
 8002142:	69bb      	ldr	r3, [r7, #24]
 8002144:	4313      	orrs	r3, r2
 8002146:	600b      	str	r3, [r1, #0]
 8002148:	e006      	b.n	8002158 <HAL_GPIO_Init+0x244>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800214a:	4b2a      	ldr	r3, [pc, #168]	; (80021f4 <HAL_GPIO_Init+0x2e0>)
 800214c:	681a      	ldr	r2, [r3, #0]
 800214e:	69bb      	ldr	r3, [r7, #24]
 8002150:	43db      	mvns	r3, r3
 8002152:	4928      	ldr	r1, [pc, #160]	; (80021f4 <HAL_GPIO_Init+0x2e0>)
 8002154:	4013      	ands	r3, r2
 8002156:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002158:	683b      	ldr	r3, [r7, #0]
 800215a:	685b      	ldr	r3, [r3, #4]
 800215c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002160:	2b00      	cmp	r3, #0
 8002162:	d006      	beq.n	8002172 <HAL_GPIO_Init+0x25e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002164:	4b23      	ldr	r3, [pc, #140]	; (80021f4 <HAL_GPIO_Init+0x2e0>)
 8002166:	685a      	ldr	r2, [r3, #4]
 8002168:	4922      	ldr	r1, [pc, #136]	; (80021f4 <HAL_GPIO_Init+0x2e0>)
 800216a:	69bb      	ldr	r3, [r7, #24]
 800216c:	4313      	orrs	r3, r2
 800216e:	604b      	str	r3, [r1, #4]
 8002170:	e006      	b.n	8002180 <HAL_GPIO_Init+0x26c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002172:	4b20      	ldr	r3, [pc, #128]	; (80021f4 <HAL_GPIO_Init+0x2e0>)
 8002174:	685a      	ldr	r2, [r3, #4]
 8002176:	69bb      	ldr	r3, [r7, #24]
 8002178:	43db      	mvns	r3, r3
 800217a:	491e      	ldr	r1, [pc, #120]	; (80021f4 <HAL_GPIO_Init+0x2e0>)
 800217c:	4013      	ands	r3, r2
 800217e:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002180:	683b      	ldr	r3, [r7, #0]
 8002182:	685b      	ldr	r3, [r3, #4]
 8002184:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002188:	2b00      	cmp	r3, #0
 800218a:	d006      	beq.n	800219a <HAL_GPIO_Init+0x286>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800218c:	4b19      	ldr	r3, [pc, #100]	; (80021f4 <HAL_GPIO_Init+0x2e0>)
 800218e:	689a      	ldr	r2, [r3, #8]
 8002190:	4918      	ldr	r1, [pc, #96]	; (80021f4 <HAL_GPIO_Init+0x2e0>)
 8002192:	69bb      	ldr	r3, [r7, #24]
 8002194:	4313      	orrs	r3, r2
 8002196:	608b      	str	r3, [r1, #8]
 8002198:	e006      	b.n	80021a8 <HAL_GPIO_Init+0x294>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800219a:	4b16      	ldr	r3, [pc, #88]	; (80021f4 <HAL_GPIO_Init+0x2e0>)
 800219c:	689a      	ldr	r2, [r3, #8]
 800219e:	69bb      	ldr	r3, [r7, #24]
 80021a0:	43db      	mvns	r3, r3
 80021a2:	4914      	ldr	r1, [pc, #80]	; (80021f4 <HAL_GPIO_Init+0x2e0>)
 80021a4:	4013      	ands	r3, r2
 80021a6:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80021a8:	683b      	ldr	r3, [r7, #0]
 80021aa:	685b      	ldr	r3, [r3, #4]
 80021ac:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	d021      	beq.n	80021f8 <HAL_GPIO_Init+0x2e4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80021b4:	4b0f      	ldr	r3, [pc, #60]	; (80021f4 <HAL_GPIO_Init+0x2e0>)
 80021b6:	68da      	ldr	r2, [r3, #12]
 80021b8:	490e      	ldr	r1, [pc, #56]	; (80021f4 <HAL_GPIO_Init+0x2e0>)
 80021ba:	69bb      	ldr	r3, [r7, #24]
 80021bc:	4313      	orrs	r3, r2
 80021be:	60cb      	str	r3, [r1, #12]
 80021c0:	e021      	b.n	8002206 <HAL_GPIO_Init+0x2f2>
 80021c2:	bf00      	nop
 80021c4:	10320000 	.word	0x10320000
 80021c8:	10310000 	.word	0x10310000
 80021cc:	10220000 	.word	0x10220000
 80021d0:	10210000 	.word	0x10210000
 80021d4:	10120000 	.word	0x10120000
 80021d8:	10110000 	.word	0x10110000
 80021dc:	40021000 	.word	0x40021000
 80021e0:	40010000 	.word	0x40010000
 80021e4:	40010800 	.word	0x40010800
 80021e8:	40010c00 	.word	0x40010c00
 80021ec:	40011000 	.word	0x40011000
 80021f0:	40011400 	.word	0x40011400
 80021f4:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80021f8:	4b09      	ldr	r3, [pc, #36]	; (8002220 <HAL_GPIO_Init+0x30c>)
 80021fa:	68da      	ldr	r2, [r3, #12]
 80021fc:	69bb      	ldr	r3, [r7, #24]
 80021fe:	43db      	mvns	r3, r3
 8002200:	4907      	ldr	r1, [pc, #28]	; (8002220 <HAL_GPIO_Init+0x30c>)
 8002202:	4013      	ands	r3, r2
 8002204:	60cb      	str	r3, [r1, #12]
  for (position = 0U; position < GPIO_NUMBER; position++)
 8002206:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002208:	3301      	adds	r3, #1
 800220a:	627b      	str	r3, [r7, #36]	; 0x24
 800220c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800220e:	2b0f      	cmp	r3, #15
 8002210:	f67f ae92 	bls.w	8001f38 <HAL_GPIO_Init+0x24>
        }
      }
    }
  }
}
 8002214:	bf00      	nop
 8002216:	bf00      	nop
 8002218:	372c      	adds	r7, #44	; 0x2c
 800221a:	46bd      	mov	sp, r7
 800221c:	bc80      	pop	{r7}
 800221e:	4770      	bx	lr
 8002220:	40010400 	.word	0x40010400

08002224 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002224:	b580      	push	{r7, lr}
 8002226:	b082      	sub	sp, #8
 8002228:	af00      	add	r7, sp, #0
 800222a:	4603      	mov	r3, r0
 800222c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800222e:	4b08      	ldr	r3, [pc, #32]	; (8002250 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002230:	695a      	ldr	r2, [r3, #20]
 8002232:	88fb      	ldrh	r3, [r7, #6]
 8002234:	4013      	ands	r3, r2
 8002236:	2b00      	cmp	r3, #0
 8002238:	d006      	beq.n	8002248 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800223a:	4a05      	ldr	r2, [pc, #20]	; (8002250 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800223c:	88fb      	ldrh	r3, [r7, #6]
 800223e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002240:	88fb      	ldrh	r3, [r7, #6]
 8002242:	4618      	mov	r0, r3
 8002244:	f005 faac 	bl	80077a0 <HAL_GPIO_EXTI_Callback>
  }
}
 8002248:	bf00      	nop
 800224a:	3708      	adds	r7, #8
 800224c:	46bd      	mov	sp, r7
 800224e:	bd80      	pop	{r7, pc}
 8002250:	40010400 	.word	0x40010400

08002254 <HAL_I2C_Init>:
  * @param  hi2c: pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002254:	b580      	push	{r7, lr}
 8002256:	b084      	sub	sp, #16
 8002258:	af00      	add	r7, sp, #0
 800225a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange = 0U;
 800225c:	2300      	movs	r3, #0
 800225e:	60fb      	str	r3, [r7, #12]
  uint32_t pclk1 = 0U;
 8002260:	2300      	movs	r3, #0
 8002262:	60bb      	str	r3, [r7, #8]

  /* Check the I2C handle allocation */
  if(hi2c == NULL)
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	2b00      	cmp	r3, #0
 8002268:	d101      	bne.n	800226e <HAL_I2C_Init+0x1a>
  {
    return HAL_ERROR;
 800226a:	2301      	movs	r3, #1
 800226c:	e0f3      	b.n	8002456 <HAL_I2C_Init+0x202>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if(hi2c->State == HAL_I2C_STATE_RESET)
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002274:	b2db      	uxtb	r3, r3
 8002276:	2b00      	cmp	r3, #0
 8002278:	d106      	bne.n	8002288 <HAL_I2C_Init+0x34>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	2200      	movs	r2, #0
 800227e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002282:	6878      	ldr	r0, [r7, #4]
 8002284:	f000 f8f6 	bl	8002474 <HAL_I2C_MspInit>
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	2224      	movs	r2, #36	; 0x24
 800228c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	681a      	ldr	r2, [r3, #0]
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	f022 0201 	bic.w	r2, r2, #1
 800229e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80022a0:	f002 fe8a 	bl	8004fb8 <HAL_RCC_GetPCLK1Freq>
 80022a4:	60b8      	str	r0, [r7, #8]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	685b      	ldr	r3, [r3, #4]
 80022aa:	4a6d      	ldr	r2, [pc, #436]	; (8002460 <HAL_I2C_Init+0x20c>)
 80022ac:	4293      	cmp	r3, r2
 80022ae:	d807      	bhi.n	80022c0 <HAL_I2C_Init+0x6c>
 80022b0:	68bb      	ldr	r3, [r7, #8]
 80022b2:	4a6c      	ldr	r2, [pc, #432]	; (8002464 <HAL_I2C_Init+0x210>)
 80022b4:	4293      	cmp	r3, r2
 80022b6:	bf94      	ite	ls
 80022b8:	2301      	movls	r3, #1
 80022ba:	2300      	movhi	r3, #0
 80022bc:	b2db      	uxtb	r3, r3
 80022be:	e006      	b.n	80022ce <HAL_I2C_Init+0x7a>
 80022c0:	68bb      	ldr	r3, [r7, #8]
 80022c2:	4a69      	ldr	r2, [pc, #420]	; (8002468 <HAL_I2C_Init+0x214>)
 80022c4:	4293      	cmp	r3, r2
 80022c6:	bf94      	ite	ls
 80022c8:	2301      	movls	r3, #1
 80022ca:	2300      	movhi	r3, #0
 80022cc:	b2db      	uxtb	r3, r3
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d001      	beq.n	80022d6 <HAL_I2C_Init+0x82>
  {
    return HAL_ERROR;
 80022d2:	2301      	movs	r3, #1
 80022d4:	e0bf      	b.n	8002456 <HAL_I2C_Init+0x202>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80022d6:	68bb      	ldr	r3, [r7, #8]
 80022d8:	4a64      	ldr	r2, [pc, #400]	; (800246c <HAL_I2C_Init+0x218>)
 80022da:	fba2 2303 	umull	r2, r3, r2, r3
 80022de:	0c9b      	lsrs	r3, r3, #18
 80022e0:	60fb      	str	r3, [r7, #12]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->CR2 = freqrange;
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	68fa      	ldr	r2, [r7, #12]
 80022e8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  hi2c->Instance->TRISE = I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed);
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	685b      	ldr	r3, [r3, #4]
 80022ee:	4a5c      	ldr	r2, [pc, #368]	; (8002460 <HAL_I2C_Init+0x20c>)
 80022f0:	4293      	cmp	r3, r2
 80022f2:	d802      	bhi.n	80022fa <HAL_I2C_Init+0xa6>
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	3301      	adds	r3, #1
 80022f8:	e009      	b.n	800230e <HAL_I2C_Init+0xba>
 80022fa:	68fb      	ldr	r3, [r7, #12]
 80022fc:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002300:	fb02 f303 	mul.w	r3, r2, r3
 8002304:	4a5a      	ldr	r2, [pc, #360]	; (8002470 <HAL_I2C_Init+0x21c>)
 8002306:	fba2 2303 	umull	r2, r3, r2, r3
 800230a:	099b      	lsrs	r3, r3, #6
 800230c:	3301      	adds	r3, #1
 800230e:	687a      	ldr	r2, [r7, #4]
 8002310:	6812      	ldr	r2, [r2, #0]
 8002312:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  hi2c->Instance->CCR = I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle);
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	685b      	ldr	r3, [r3, #4]
 8002318:	4a51      	ldr	r2, [pc, #324]	; (8002460 <HAL_I2C_Init+0x20c>)
 800231a:	4293      	cmp	r3, r2
 800231c:	d819      	bhi.n	8002352 <HAL_I2C_Init+0xfe>
 800231e:	68bb      	ldr	r3, [r7, #8]
 8002320:	1e5a      	subs	r2, r3, #1
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	685b      	ldr	r3, [r3, #4]
 8002326:	005b      	lsls	r3, r3, #1
 8002328:	fbb2 f3f3 	udiv	r3, r2, r3
 800232c:	1c5a      	adds	r2, r3, #1
 800232e:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002332:	4013      	ands	r3, r2
 8002334:	2b00      	cmp	r3, #0
 8002336:	d00a      	beq.n	800234e <HAL_I2C_Init+0xfa>
 8002338:	68bb      	ldr	r3, [r7, #8]
 800233a:	1e5a      	subs	r2, r3, #1
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	685b      	ldr	r3, [r3, #4]
 8002340:	005b      	lsls	r3, r3, #1
 8002342:	fbb2 f3f3 	udiv	r3, r2, r3
 8002346:	3301      	adds	r3, #1
 8002348:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800234c:	e051      	b.n	80023f2 <HAL_I2C_Init+0x19e>
 800234e:	2304      	movs	r3, #4
 8002350:	e04f      	b.n	80023f2 <HAL_I2C_Init+0x19e>
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	689b      	ldr	r3, [r3, #8]
 8002356:	2b00      	cmp	r3, #0
 8002358:	d111      	bne.n	800237e <HAL_I2C_Init+0x12a>
 800235a:	68bb      	ldr	r3, [r7, #8]
 800235c:	1e59      	subs	r1, r3, #1
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	685a      	ldr	r2, [r3, #4]
 8002362:	4613      	mov	r3, r2
 8002364:	005b      	lsls	r3, r3, #1
 8002366:	4413      	add	r3, r2
 8002368:	fbb1 f3f3 	udiv	r3, r1, r3
 800236c:	3301      	adds	r3, #1
 800236e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002372:	2b00      	cmp	r3, #0
 8002374:	bf0c      	ite	eq
 8002376:	2301      	moveq	r3, #1
 8002378:	2300      	movne	r3, #0
 800237a:	b2db      	uxtb	r3, r3
 800237c:	e012      	b.n	80023a4 <HAL_I2C_Init+0x150>
 800237e:	68bb      	ldr	r3, [r7, #8]
 8002380:	1e59      	subs	r1, r3, #1
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	685a      	ldr	r2, [r3, #4]
 8002386:	4613      	mov	r3, r2
 8002388:	009b      	lsls	r3, r3, #2
 800238a:	4413      	add	r3, r2
 800238c:	009a      	lsls	r2, r3, #2
 800238e:	4413      	add	r3, r2
 8002390:	fbb1 f3f3 	udiv	r3, r1, r3
 8002394:	3301      	adds	r3, #1
 8002396:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800239a:	2b00      	cmp	r3, #0
 800239c:	bf0c      	ite	eq
 800239e:	2301      	moveq	r3, #1
 80023a0:	2300      	movne	r3, #0
 80023a2:	b2db      	uxtb	r3, r3
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	d001      	beq.n	80023ac <HAL_I2C_Init+0x158>
 80023a8:	2301      	movs	r3, #1
 80023aa:	e022      	b.n	80023f2 <HAL_I2C_Init+0x19e>
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	689b      	ldr	r3, [r3, #8]
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d10e      	bne.n	80023d2 <HAL_I2C_Init+0x17e>
 80023b4:	68bb      	ldr	r3, [r7, #8]
 80023b6:	1e59      	subs	r1, r3, #1
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	685a      	ldr	r2, [r3, #4]
 80023bc:	4613      	mov	r3, r2
 80023be:	005b      	lsls	r3, r3, #1
 80023c0:	4413      	add	r3, r2
 80023c2:	fbb1 f3f3 	udiv	r3, r1, r3
 80023c6:	3301      	adds	r3, #1
 80023c8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80023cc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80023d0:	e00f      	b.n	80023f2 <HAL_I2C_Init+0x19e>
 80023d2:	68bb      	ldr	r3, [r7, #8]
 80023d4:	1e59      	subs	r1, r3, #1
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	685a      	ldr	r2, [r3, #4]
 80023da:	4613      	mov	r3, r2
 80023dc:	009b      	lsls	r3, r3, #2
 80023de:	4413      	add	r3, r2
 80023e0:	009a      	lsls	r2, r3, #2
 80023e2:	4413      	add	r3, r2
 80023e4:	fbb1 f3f3 	udiv	r3, r1, r3
 80023e8:	3301      	adds	r3, #1
 80023ea:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80023ee:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80023f2:	687a      	ldr	r2, [r7, #4]
 80023f4:	6812      	ldr	r2, [r2, #0]
 80023f6:	61d3      	str	r3, [r2, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	69d9      	ldr	r1, [r3, #28]
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	6a1a      	ldr	r2, [r3, #32]
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	430a      	orrs	r2, r1
 8002406:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  hi2c->Instance->OAR1 = (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1);
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	6919      	ldr	r1, [r3, #16]
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	68da      	ldr	r2, [r3, #12]
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	430a      	orrs	r2, r1
 8002416:	609a      	str	r2, [r3, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2);
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	6959      	ldr	r1, [r3, #20]
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	699a      	ldr	r2, [r3, #24]
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	430a      	orrs	r2, r1
 8002426:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	681a      	ldr	r2, [r3, #0]
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	f042 0201 	orr.w	r2, r2, #1
 8002436:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	2200      	movs	r2, #0
 800243c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	2220      	movs	r2, #32
 8002442:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	2200      	movs	r2, #0
 800244a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	2200      	movs	r2, #0
 8002450:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002454:	2300      	movs	r3, #0
}
 8002456:	4618      	mov	r0, r3
 8002458:	3710      	adds	r7, #16
 800245a:	46bd      	mov	sp, r7
 800245c:	bd80      	pop	{r7, pc}
 800245e:	bf00      	nop
 8002460:	000186a0 	.word	0x000186a0
 8002464:	001e847f 	.word	0x001e847f
 8002468:	003d08ff 	.word	0x003d08ff
 800246c:	431bde83 	.word	0x431bde83
 8002470:	10624dd3 	.word	0x10624dd3

08002474 <HAL_I2C_MspInit>:
  * @param  hi2c: pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
 __weak void HAL_I2C_MspInit(I2C_HandleTypeDef *hi2c)
{
 8002474:	b480      	push	{r7}
 8002476:	b083      	sub	sp, #12
 8002478:	af00      	add	r7, sp, #0
 800247a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hi2c);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2C_MspInit could be implemented in the user file
   */
}
 800247c:	bf00      	nop
 800247e:	370c      	adds	r7, #12
 8002480:	46bd      	mov	sp, r7
 8002482:	bc80      	pop	{r7}
 8002484:	4770      	bx	lr
	...

08002488 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002488:	b580      	push	{r7, lr}
 800248a:	b088      	sub	sp, #32
 800248c:	af02      	add	r7, sp, #8
 800248e:	60f8      	str	r0, [r7, #12]
 8002490:	607a      	str	r2, [r7, #4]
 8002492:	461a      	mov	r2, r3
 8002494:	460b      	mov	r3, r1
 8002496:	817b      	strh	r3, [r7, #10]
 8002498:	4613      	mov	r3, r2
 800249a:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart = 0x00U;
 800249c:	2300      	movs	r3, #0
 800249e:	617b      	str	r3, [r7, #20]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80024a0:	f7fe fd4e 	bl	8000f40 <HAL_GetTick>
 80024a4:	6178      	str	r0, [r7, #20]

  if(hi2c->State == HAL_I2C_STATE_READY)
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80024ac:	b2db      	uxtb	r3, r3
 80024ae:	2b20      	cmp	r3, #32
 80024b0:	f040 80ee 	bne.w	8002690 <HAL_I2C_Master_Transmit+0x208>
  {
    /* Wait until BUSY flag is reset */
    if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80024b4:	697b      	ldr	r3, [r7, #20]
 80024b6:	9300      	str	r3, [sp, #0]
 80024b8:	2319      	movs	r3, #25
 80024ba:	2201      	movs	r2, #1
 80024bc:	4977      	ldr	r1, [pc, #476]	; (800269c <HAL_I2C_Master_Transmit+0x214>)
 80024be:	68f8      	ldr	r0, [r7, #12]
 80024c0:	f001 fff8 	bl	80044b4 <I2C_WaitOnFlagUntilTimeout>
 80024c4:	4603      	mov	r3, r0
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d001      	beq.n	80024ce <HAL_I2C_Master_Transmit+0x46>
    {
      return HAL_BUSY;
 80024ca:	2302      	movs	r3, #2
 80024cc:	e0e1      	b.n	8002692 <HAL_I2C_Master_Transmit+0x20a>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80024d4:	2b01      	cmp	r3, #1
 80024d6:	d101      	bne.n	80024dc <HAL_I2C_Master_Transmit+0x54>
 80024d8:	2302      	movs	r3, #2
 80024da:	e0da      	b.n	8002692 <HAL_I2C_Master_Transmit+0x20a>
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	2201      	movs	r2, #1
 80024e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	f003 0301 	and.w	r3, r3, #1
 80024ee:	2b01      	cmp	r3, #1
 80024f0:	d007      	beq.n	8002502 <HAL_I2C_Master_Transmit+0x7a>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	681a      	ldr	r2, [r3, #0]
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	f042 0201 	orr.w	r2, r2, #1
 8002500:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8002502:	68fb      	ldr	r3, [r7, #12]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	681a      	ldr	r2, [r3, #0]
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002510:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	2221      	movs	r2, #33	; 0x21
 8002516:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	2210      	movs	r2, #16
 800251e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	2200      	movs	r2, #0
 8002526:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	687a      	ldr	r2, [r7, #4]
 800252c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800252e:	68fb      	ldr	r3, [r7, #12]
 8002530:	893a      	ldrh	r2, [r7, #8]
 8002532:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	4a5a      	ldr	r2, [pc, #360]	; (80026a0 <HAL_I2C_Master_Transmit+0x218>)
 8002538:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->XferSize    = hi2c->XferCount;
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800253e:	b29a      	uxth	r2, r3
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	851a      	strh	r2, [r3, #40]	; 0x28

    /* Send Slave Address */
    if(I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002544:	8979      	ldrh	r1, [r7, #10]
 8002546:	697b      	ldr	r3, [r7, #20]
 8002548:	6a3a      	ldr	r2, [r7, #32]
 800254a:	68f8      	ldr	r0, [r7, #12]
 800254c:	f001 fe1a 	bl	8004184 <I2C_MasterRequestWrite>
 8002550:	4603      	mov	r3, r0
 8002552:	2b00      	cmp	r3, #0
 8002554:	d00f      	beq.n	8002576 <HAL_I2C_Master_Transmit+0xee>
    {
      if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800255a:	2b04      	cmp	r3, #4
 800255c:	d105      	bne.n	800256a <HAL_I2C_Master_Transmit+0xe2>
      {
        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800255e:	68fb      	ldr	r3, [r7, #12]
 8002560:	2200      	movs	r2, #0
 8002562:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        return HAL_ERROR;
 8002566:	2301      	movs	r3, #1
 8002568:	e093      	b.n	8002692 <HAL_I2C_Master_Transmit+0x20a>
      }
      else
      {
        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	2200      	movs	r2, #0
 800256e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        return HAL_TIMEOUT;
 8002572:	2303      	movs	r3, #3
 8002574:	e08d      	b.n	8002692 <HAL_I2C_Master_Transmit+0x20a>
      }
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002576:	2300      	movs	r3, #0
 8002578:	613b      	str	r3, [r7, #16]
 800257a:	68fb      	ldr	r3, [r7, #12]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	695b      	ldr	r3, [r3, #20]
 8002580:	613b      	str	r3, [r7, #16]
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	699b      	ldr	r3, [r3, #24]
 8002588:	613b      	str	r3, [r7, #16]
 800258a:	693b      	ldr	r3, [r7, #16]

    while(hi2c->XferSize > 0U)
 800258c:	e066      	b.n	800265c <HAL_I2C_Master_Transmit+0x1d4>
    {
      /* Wait until TXE flag is set */
      if(I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800258e:	697a      	ldr	r2, [r7, #20]
 8002590:	6a39      	ldr	r1, [r7, #32]
 8002592:	68f8      	ldr	r0, [r7, #12]
 8002594:	f002 f84d 	bl	8004632 <I2C_WaitOnTXEFlagUntilTimeout>
 8002598:	4603      	mov	r3, r0
 800259a:	2b00      	cmp	r3, #0
 800259c:	d00f      	beq.n	80025be <HAL_I2C_Master_Transmit+0x136>
      {
        if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025a2:	2b04      	cmp	r3, #4
 80025a4:	d109      	bne.n	80025ba <HAL_I2C_Master_Transmit+0x132>
        {
          /* Generate Stop */
          hi2c->Instance->CR1 |= I2C_CR1_STOP;
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	681a      	ldr	r2, [r3, #0]
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80025b4:	601a      	str	r2, [r3, #0]
          return HAL_ERROR;
 80025b6:	2301      	movs	r3, #1
 80025b8:	e06b      	b.n	8002692 <HAL_I2C_Master_Transmit+0x20a>
        }
        else
        {
          return HAL_TIMEOUT;
 80025ba:	2303      	movs	r3, #3
 80025bc:	e069      	b.n	8002692 <HAL_I2C_Master_Transmit+0x20a>
        }
      }

      /* Write data to DR */
      hi2c->Instance->DR = (*hi2c->pBuffPtr++);
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025c2:	1c59      	adds	r1, r3, #1
 80025c4:	68fa      	ldr	r2, [r7, #12]
 80025c6:	6251      	str	r1, [r2, #36]	; 0x24
 80025c8:	781a      	ldrb	r2, [r3, #0]
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	611a      	str	r2, [r3, #16]
      hi2c->XferCount--;
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80025d4:	b29b      	uxth	r3, r3
 80025d6:	3b01      	subs	r3, #1
 80025d8:	b29a      	uxth	r2, r3
 80025da:	68fb      	ldr	r3, [r7, #12]
 80025dc:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80025e2:	3b01      	subs	r3, #1
 80025e4:	b29a      	uxth	r2, r3
 80025e6:	68fb      	ldr	r3, [r7, #12]
 80025e8:	851a      	strh	r2, [r3, #40]	; 0x28

      if((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	695b      	ldr	r3, [r3, #20]
 80025f0:	f003 0304 	and.w	r3, r3, #4
 80025f4:	2b04      	cmp	r3, #4
 80025f6:	d119      	bne.n	800262c <HAL_I2C_Master_Transmit+0x1a4>
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d015      	beq.n	800262c <HAL_I2C_Master_Transmit+0x1a4>
      {
        /* Write data to DR */
        hi2c->Instance->DR = (*hi2c->pBuffPtr++);
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002604:	1c59      	adds	r1, r3, #1
 8002606:	68fa      	ldr	r2, [r7, #12]
 8002608:	6251      	str	r1, [r2, #36]	; 0x24
 800260a:	781a      	ldrb	r2, [r3, #0]
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	611a      	str	r2, [r3, #16]
        hi2c->XferCount--;
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002616:	b29b      	uxth	r3, r3
 8002618:	3b01      	subs	r3, #1
 800261a:	b29a      	uxth	r2, r3
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002624:	3b01      	subs	r3, #1
 8002626:	b29a      	uxth	r2, r3
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	851a      	strh	r2, [r3, #40]	; 0x28
      }
      
      /* Wait until BTF flag is set */
      if(I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800262c:	697a      	ldr	r2, [r7, #20]
 800262e:	6a39      	ldr	r1, [r7, #32]
 8002630:	68f8      	ldr	r0, [r7, #12]
 8002632:	f002 f83b 	bl	80046ac <I2C_WaitOnBTFFlagUntilTimeout>
 8002636:	4603      	mov	r3, r0
 8002638:	2b00      	cmp	r3, #0
 800263a:	d00f      	beq.n	800265c <HAL_I2C_Master_Transmit+0x1d4>
      {
        if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002640:	2b04      	cmp	r3, #4
 8002642:	d109      	bne.n	8002658 <HAL_I2C_Master_Transmit+0x1d0>
        {
          /* Generate Stop */
          hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	681a      	ldr	r2, [r3, #0]
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002652:	601a      	str	r2, [r3, #0]
          return HAL_ERROR;
 8002654:	2301      	movs	r3, #1
 8002656:	e01c      	b.n	8002692 <HAL_I2C_Master_Transmit+0x20a>
        }
        else
        {
          return HAL_TIMEOUT;
 8002658:	2303      	movs	r3, #3
 800265a:	e01a      	b.n	8002692 <HAL_I2C_Master_Transmit+0x20a>
    while(hi2c->XferSize > 0U)
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002660:	2b00      	cmp	r3, #0
 8002662:	d194      	bne.n	800258e <HAL_I2C_Master_Transmit+0x106>
        }
      }
    }

    /* Generate Stop */
    hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	681a      	ldr	r2, [r3, #0]
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002672:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	2220      	movs	r2, #32
 8002678:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	2200      	movs	r2, #0
 8002680:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    
    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	2200      	movs	r2, #0
 8002688:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800268c:	2300      	movs	r3, #0
 800268e:	e000      	b.n	8002692 <HAL_I2C_Master_Transmit+0x20a>
  }
  else
  {
    return HAL_BUSY;
 8002690:	2302      	movs	r3, #2
  }
}
 8002692:	4618      	mov	r0, r3
 8002694:	3718      	adds	r7, #24
 8002696:	46bd      	mov	sp, r7
 8002698:	bd80      	pop	{r7, pc}
 800269a:	bf00      	nop
 800269c:	00100002 	.word	0x00100002
 80026a0:	ffff0000 	.word	0xffff0000

080026a4 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80026a4:	b580      	push	{r7, lr}
 80026a6:	b08c      	sub	sp, #48	; 0x30
 80026a8:	af02      	add	r7, sp, #8
 80026aa:	60f8      	str	r0, [r7, #12]
 80026ac:	607a      	str	r2, [r7, #4]
 80026ae:	461a      	mov	r2, r3
 80026b0:	460b      	mov	r3, r1
 80026b2:	817b      	strh	r3, [r7, #10]
 80026b4:	4613      	mov	r3, r2
 80026b6:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart = 0x00U;
 80026b8:	2300      	movs	r3, #0
 80026ba:	627b      	str	r3, [r7, #36]	; 0x24

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80026bc:	f7fe fc40 	bl	8000f40 <HAL_GetTick>
 80026c0:	6278      	str	r0, [r7, #36]	; 0x24

  if(hi2c->State == HAL_I2C_STATE_READY)
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80026c8:	b2db      	uxtb	r3, r3
 80026ca:	2b20      	cmp	r3, #32
 80026cc:	f040 8223 	bne.w	8002b16 <HAL_I2C_Master_Receive+0x472>
  {
    /* Wait until BUSY flag is reset */
    if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80026d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026d2:	9300      	str	r3, [sp, #0]
 80026d4:	2319      	movs	r3, #25
 80026d6:	2201      	movs	r2, #1
 80026d8:	4988      	ldr	r1, [pc, #544]	; (80028fc <HAL_I2C_Master_Receive+0x258>)
 80026da:	68f8      	ldr	r0, [r7, #12]
 80026dc:	f001 feea 	bl	80044b4 <I2C_WaitOnFlagUntilTimeout>
 80026e0:	4603      	mov	r3, r0
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d001      	beq.n	80026ea <HAL_I2C_Master_Receive+0x46>
    {
      return HAL_BUSY;
 80026e6:	2302      	movs	r3, #2
 80026e8:	e216      	b.n	8002b18 <HAL_I2C_Master_Receive+0x474>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80026f0:	2b01      	cmp	r3, #1
 80026f2:	d101      	bne.n	80026f8 <HAL_I2C_Master_Receive+0x54>
 80026f4:	2302      	movs	r3, #2
 80026f6:	e20f      	b.n	8002b18 <HAL_I2C_Master_Receive+0x474>
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	2201      	movs	r2, #1
 80026fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	f003 0301 	and.w	r3, r3, #1
 800270a:	2b01      	cmp	r3, #1
 800270c:	d007      	beq.n	800271e <HAL_I2C_Master_Receive+0x7a>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	681a      	ldr	r2, [r3, #0]
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	f042 0201 	orr.w	r2, r2, #1
 800271c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	681a      	ldr	r2, [r3, #0]
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800272c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	2222      	movs	r2, #34	; 0x22
 8002732:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	2210      	movs	r2, #16
 800273a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	2200      	movs	r2, #0
 8002742:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	687a      	ldr	r2, [r7, #4]
 8002748:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	893a      	ldrh	r2, [r7, #8]
 800274e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	4a6b      	ldr	r2, [pc, #428]	; (8002900 <HAL_I2C_Master_Receive+0x25c>)
 8002754:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->XferSize    = hi2c->XferCount;
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800275a:	b29a      	uxth	r2, r3
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	851a      	strh	r2, [r3, #40]	; 0x28

    /* Send Slave Address */
    if(I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002760:	8979      	ldrh	r1, [r7, #10]
 8002762:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002764:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002766:	68f8      	ldr	r0, [r7, #12]
 8002768:	f001 fd8e 	bl	8004288 <I2C_MasterRequestRead>
 800276c:	4603      	mov	r3, r0
 800276e:	2b00      	cmp	r3, #0
 8002770:	d00f      	beq.n	8002792 <HAL_I2C_Master_Receive+0xee>
    {
      if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002776:	2b04      	cmp	r3, #4
 8002778:	d105      	bne.n	8002786 <HAL_I2C_Master_Receive+0xe2>
      {
        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	2200      	movs	r2, #0
 800277e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        return HAL_ERROR;
 8002782:	2301      	movs	r3, #1
 8002784:	e1c8      	b.n	8002b18 <HAL_I2C_Master_Receive+0x474>
      }
      else
      {
        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	2200      	movs	r2, #0
 800278a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        return HAL_TIMEOUT;
 800278e:	2303      	movs	r3, #3
 8002790:	e1c2      	b.n	8002b18 <HAL_I2C_Master_Receive+0x474>
      }
    }

    if(hi2c->XferSize == 0U)
 8002792:	68fb      	ldr	r3, [r7, #12]
 8002794:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002796:	2b00      	cmp	r3, #0
 8002798:	d113      	bne.n	80027c2 <HAL_I2C_Master_Receive+0x11e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800279a:	2300      	movs	r3, #0
 800279c:	623b      	str	r3, [r7, #32]
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	695b      	ldr	r3, [r3, #20]
 80027a4:	623b      	str	r3, [r7, #32]
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	699b      	ldr	r3, [r3, #24]
 80027ac:	623b      	str	r3, [r7, #32]
 80027ae:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      hi2c->Instance->CR1 |= I2C_CR1_STOP;
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	681a      	ldr	r2, [r3, #0]
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80027be:	601a      	str	r2, [r3, #0]
 80027c0:	e196      	b.n	8002af0 <HAL_I2C_Master_Receive+0x44c>
    }
    else if(hi2c->XferSize == 1U)
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80027c6:	2b01      	cmp	r3, #1
 80027c8:	d11e      	bne.n	8002808 <HAL_I2C_Master_Receive+0x164>
    {
      /* Disable Acknowledge */
      hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	681a      	ldr	r2, [r3, #0]
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80027d8:	601a      	str	r2, [r3, #0]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80027da:	b672      	cpsid	i
}
 80027dc:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80027de:	2300      	movs	r3, #0
 80027e0:	61fb      	str	r3, [r7, #28]
 80027e2:	68fb      	ldr	r3, [r7, #12]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	695b      	ldr	r3, [r3, #20]
 80027e8:	61fb      	str	r3, [r7, #28]
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	699b      	ldr	r3, [r3, #24]
 80027f0:	61fb      	str	r3, [r7, #28]
 80027f2:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      hi2c->Instance->CR1 |= I2C_CR1_STOP;
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	681a      	ldr	r2, [r3, #0]
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002802:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8002804:	b662      	cpsie	i
}
 8002806:	e035      	b.n	8002874 <HAL_I2C_Master_Receive+0x1d0>

      /* Re-enable IRQs */
      __enable_irq(); 
    }
    else if(hi2c->XferSize == 2U)
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800280c:	2b02      	cmp	r3, #2
 800280e:	d11e      	bne.n	800284e <HAL_I2C_Master_Receive+0x1aa>
    {
      /* Enable Pos */
      hi2c->Instance->CR1 |= I2C_CR1_POS;
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	681a      	ldr	r2, [r3, #0]
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800281e:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8002820:	b672      	cpsid	i
}
 8002822:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002824:	2300      	movs	r3, #0
 8002826:	61bb      	str	r3, [r7, #24]
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	695b      	ldr	r3, [r3, #20]
 800282e:	61bb      	str	r3, [r7, #24]
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	699b      	ldr	r3, [r3, #24]
 8002836:	61bb      	str	r3, [r7, #24]
 8002838:	69bb      	ldr	r3, [r7, #24]

      /* Disable Acknowledge */
      hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	681a      	ldr	r2, [r3, #0]
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002848:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 800284a:	b662      	cpsie	i
}
 800284c:	e012      	b.n	8002874 <HAL_I2C_Master_Receive+0x1d0>
      __enable_irq(); 
    }
    else
    {
      /* Enable Acknowledge */
      hi2c->Instance->CR1 |= I2C_CR1_ACK;
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	681a      	ldr	r2, [r3, #0]
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800285c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800285e:	2300      	movs	r3, #0
 8002860:	617b      	str	r3, [r7, #20]
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	695b      	ldr	r3, [r3, #20]
 8002868:	617b      	str	r3, [r7, #20]
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	699b      	ldr	r3, [r3, #24]
 8002870:	617b      	str	r3, [r7, #20]
 8002872:	697b      	ldr	r3, [r7, #20]
    }

    while(hi2c->XferSize > 0U)
 8002874:	e13c      	b.n	8002af0 <HAL_I2C_Master_Receive+0x44c>
    {
      if(hi2c->XferSize <= 3U)
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800287a:	2b03      	cmp	r3, #3
 800287c:	f200 80f3 	bhi.w	8002a66 <HAL_I2C_Master_Receive+0x3c2>
      {
        /* One byte */
        if(hi2c->XferSize == 1U)
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002884:	2b01      	cmp	r3, #1
 8002886:	d127      	bne.n	80028d8 <HAL_I2C_Master_Receive+0x234>
        {
          /* Wait until RXNE flag is set */
          if(I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)      
 8002888:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800288a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800288c:	68f8      	ldr	r0, [r7, #12]
 800288e:	f001 ff4a 	bl	8004726 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002892:	4603      	mov	r3, r0
 8002894:	2b00      	cmp	r3, #0
 8002896:	d007      	beq.n	80028a8 <HAL_I2C_Master_Receive+0x204>
          {
            if(hi2c->ErrorCode == HAL_I2C_ERROR_TIMEOUT)
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800289c:	2b20      	cmp	r3, #32
 800289e:	d101      	bne.n	80028a4 <HAL_I2C_Master_Receive+0x200>
            {
              return HAL_TIMEOUT;
 80028a0:	2303      	movs	r3, #3
 80028a2:	e139      	b.n	8002b18 <HAL_I2C_Master_Receive+0x474>
            }
            else
            {
              return HAL_ERROR;
 80028a4:	2301      	movs	r3, #1
 80028a6:	e137      	b.n	8002b18 <HAL_I2C_Master_Receive+0x474>
            }
          }

          /* Read data from DR */
          (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	6918      	ldr	r0, [r3, #16]
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028b2:	1c59      	adds	r1, r3, #1
 80028b4:	68fa      	ldr	r2, [r7, #12]
 80028b6:	6251      	str	r1, [r2, #36]	; 0x24
 80028b8:	b2c2      	uxtb	r2, r0
 80028ba:	701a      	strb	r2, [r3, #0]
          hi2c->XferSize--;
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80028c0:	3b01      	subs	r3, #1
 80028c2:	b29a      	uxth	r2, r3
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80028cc:	b29b      	uxth	r3, r3
 80028ce:	3b01      	subs	r3, #1
 80028d0:	b29a      	uxth	r2, r3
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	855a      	strh	r2, [r3, #42]	; 0x2a
 80028d6:	e10b      	b.n	8002af0 <HAL_I2C_Master_Receive+0x44c>
        }
        /* Two bytes */
        else if(hi2c->XferSize == 2U)
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80028dc:	2b02      	cmp	r3, #2
 80028de:	d14e      	bne.n	800297e <HAL_I2C_Master_Receive+0x2da>
        {
          /* Wait until BTF flag is set */
          if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80028e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028e2:	9300      	str	r3, [sp, #0]
 80028e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80028e6:	2200      	movs	r2, #0
 80028e8:	4906      	ldr	r1, [pc, #24]	; (8002904 <HAL_I2C_Master_Receive+0x260>)
 80028ea:	68f8      	ldr	r0, [r7, #12]
 80028ec:	f001 fde2 	bl	80044b4 <I2C_WaitOnFlagUntilTimeout>
 80028f0:	4603      	mov	r3, r0
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d008      	beq.n	8002908 <HAL_I2C_Master_Receive+0x264>
          {
            return HAL_TIMEOUT;
 80028f6:	2303      	movs	r3, #3
 80028f8:	e10e      	b.n	8002b18 <HAL_I2C_Master_Receive+0x474>
 80028fa:	bf00      	nop
 80028fc:	00100002 	.word	0x00100002
 8002900:	ffff0000 	.word	0xffff0000
 8002904:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8002908:	b672      	cpsid	i
}
 800290a:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
           __disable_irq();

          /* Generate Stop */
          hi2c->Instance->CR1 |= I2C_CR1_STOP;
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	681a      	ldr	r2, [r3, #0]
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800291a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	6918      	ldr	r0, [r3, #16]
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002926:	1c59      	adds	r1, r3, #1
 8002928:	68fa      	ldr	r2, [r7, #12]
 800292a:	6251      	str	r1, [r2, #36]	; 0x24
 800292c:	b2c2      	uxtb	r2, r0
 800292e:	701a      	strb	r2, [r3, #0]
          hi2c->XferSize--;
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002934:	3b01      	subs	r3, #1
 8002936:	b29a      	uxth	r2, r3
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002940:	b29b      	uxth	r3, r3
 8002942:	3b01      	subs	r3, #1
 8002944:	b29a      	uxth	r2, r3
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 800294a:	b662      	cpsie	i
}
 800294c:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	6918      	ldr	r0, [r3, #16]
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002958:	1c59      	adds	r1, r3, #1
 800295a:	68fa      	ldr	r2, [r7, #12]
 800295c:	6251      	str	r1, [r2, #36]	; 0x24
 800295e:	b2c2      	uxtb	r2, r0
 8002960:	701a      	strb	r2, [r3, #0]
          hi2c->XferSize--;
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002966:	3b01      	subs	r3, #1
 8002968:	b29a      	uxth	r2, r3
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002972:	b29b      	uxth	r3, r3
 8002974:	3b01      	subs	r3, #1
 8002976:	b29a      	uxth	r2, r3
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800297c:	e0b8      	b.n	8002af0 <HAL_I2C_Master_Receive+0x44c>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800297e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002980:	9300      	str	r3, [sp, #0]
 8002982:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002984:	2200      	movs	r2, #0
 8002986:	4966      	ldr	r1, [pc, #408]	; (8002b20 <HAL_I2C_Master_Receive+0x47c>)
 8002988:	68f8      	ldr	r0, [r7, #12]
 800298a:	f001 fd93 	bl	80044b4 <I2C_WaitOnFlagUntilTimeout>
 800298e:	4603      	mov	r3, r0
 8002990:	2b00      	cmp	r3, #0
 8002992:	d001      	beq.n	8002998 <HAL_I2C_Master_Receive+0x2f4>
          {
            return HAL_TIMEOUT;
 8002994:	2303      	movs	r3, #3
 8002996:	e0bf      	b.n	8002b18 <HAL_I2C_Master_Receive+0x474>
          }

          /* Disable Acknowledge */
          hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	681a      	ldr	r2, [r3, #0]
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80029a6:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80029a8:	b672      	cpsid	i
}
 80029aa:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	6918      	ldr	r0, [r3, #16]
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029b6:	1c59      	adds	r1, r3, #1
 80029b8:	68fa      	ldr	r2, [r7, #12]
 80029ba:	6251      	str	r1, [r2, #36]	; 0x24
 80029bc:	b2c2      	uxtb	r2, r0
 80029be:	701a      	strb	r2, [r3, #0]
          hi2c->XferSize--;
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80029c4:	3b01      	subs	r3, #1
 80029c6:	b29a      	uxth	r2, r3
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80029d0:	b29b      	uxth	r3, r3
 80029d2:	3b01      	subs	r3, #1
 80029d4:	b29a      	uxth	r2, r3
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80029da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029dc:	9300      	str	r3, [sp, #0]
 80029de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80029e0:	2200      	movs	r2, #0
 80029e2:	494f      	ldr	r1, [pc, #316]	; (8002b20 <HAL_I2C_Master_Receive+0x47c>)
 80029e4:	68f8      	ldr	r0, [r7, #12]
 80029e6:	f001 fd65 	bl	80044b4 <I2C_WaitOnFlagUntilTimeout>
 80029ea:	4603      	mov	r3, r0
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d001      	beq.n	80029f4 <HAL_I2C_Master_Receive+0x350>
          {
            return HAL_TIMEOUT;
 80029f0:	2303      	movs	r3, #3
 80029f2:	e091      	b.n	8002b18 <HAL_I2C_Master_Receive+0x474>
          }

          /* Generate Stop */
          hi2c->Instance->CR1 |= I2C_CR1_STOP;
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	681a      	ldr	r2, [r3, #0]
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002a02:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	6918      	ldr	r0, [r3, #16]
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a0e:	1c59      	adds	r1, r3, #1
 8002a10:	68fa      	ldr	r2, [r7, #12]
 8002a12:	6251      	str	r1, [r2, #36]	; 0x24
 8002a14:	b2c2      	uxtb	r2, r0
 8002a16:	701a      	strb	r2, [r3, #0]
          hi2c->XferSize--;
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a1c:	3b01      	subs	r3, #1
 8002a1e:	b29a      	uxth	r2, r3
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a28:	b29b      	uxth	r3, r3
 8002a2a:	3b01      	subs	r3, #1
 8002a2c:	b29a      	uxth	r2, r3
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8002a32:	b662      	cpsie	i
}
 8002a34:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq(); 

          /* Read data from DR */
          (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	6918      	ldr	r0, [r3, #16]
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a40:	1c59      	adds	r1, r3, #1
 8002a42:	68fa      	ldr	r2, [r7, #12]
 8002a44:	6251      	str	r1, [r2, #36]	; 0x24
 8002a46:	b2c2      	uxtb	r2, r0
 8002a48:	701a      	strb	r2, [r3, #0]
          hi2c->XferSize--;
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a4e:	3b01      	subs	r3, #1
 8002a50:	b29a      	uxth	r2, r3
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a5a:	b29b      	uxth	r3, r3
 8002a5c:	3b01      	subs	r3, #1
 8002a5e:	b29a      	uxth	r2, r3
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002a64:	e044      	b.n	8002af0 <HAL_I2C_Master_Receive+0x44c>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if(I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)      
 8002a66:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002a68:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002a6a:	68f8      	ldr	r0, [r7, #12]
 8002a6c:	f001 fe5b 	bl	8004726 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002a70:	4603      	mov	r3, r0
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d007      	beq.n	8002a86 <HAL_I2C_Master_Receive+0x3e2>
        {
          if(hi2c->ErrorCode == HAL_I2C_ERROR_TIMEOUT)
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a7a:	2b20      	cmp	r3, #32
 8002a7c:	d101      	bne.n	8002a82 <HAL_I2C_Master_Receive+0x3de>
          {
            return HAL_TIMEOUT;
 8002a7e:	2303      	movs	r3, #3
 8002a80:	e04a      	b.n	8002b18 <HAL_I2C_Master_Receive+0x474>
          }
          else
          {
            return HAL_ERROR;
 8002a82:	2301      	movs	r3, #1
 8002a84:	e048      	b.n	8002b18 <HAL_I2C_Master_Receive+0x474>
          }
        }

        /* Read data from DR */
        (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	6918      	ldr	r0, [r3, #16]
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a90:	1c59      	adds	r1, r3, #1
 8002a92:	68fa      	ldr	r2, [r7, #12]
 8002a94:	6251      	str	r1, [r2, #36]	; 0x24
 8002a96:	b2c2      	uxtb	r2, r0
 8002a98:	701a      	strb	r2, [r3, #0]
        hi2c->XferSize--;
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a9e:	3b01      	subs	r3, #1
 8002aa0:	b29a      	uxth	r2, r3
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002aaa:	b29b      	uxth	r3, r3
 8002aac:	3b01      	subs	r3, #1
 8002aae:	b29a      	uxth	r2, r3
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	855a      	strh	r2, [r3, #42]	; 0x2a

        if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	695b      	ldr	r3, [r3, #20]
 8002aba:	f003 0304 	and.w	r3, r3, #4
 8002abe:	2b04      	cmp	r3, #4
 8002ac0:	d116      	bne.n	8002af0 <HAL_I2C_Master_Receive+0x44c>
        {
          /* Read data from DR */
          (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	6918      	ldr	r0, [r3, #16]
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002acc:	1c59      	adds	r1, r3, #1
 8002ace:	68fa      	ldr	r2, [r7, #12]
 8002ad0:	6251      	str	r1, [r2, #36]	; 0x24
 8002ad2:	b2c2      	uxtb	r2, r0
 8002ad4:	701a      	strb	r2, [r3, #0]
          hi2c->XferSize--;
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ada:	3b01      	subs	r3, #1
 8002adc:	b29a      	uxth	r2, r3
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ae6:	b29b      	uxth	r3, r3
 8002ae8:	3b01      	subs	r3, #1
 8002aea:	b29a      	uxth	r2, r3
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	855a      	strh	r2, [r3, #42]	; 0x2a
    while(hi2c->XferSize > 0U)
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	f47f aebe 	bne.w	8002876 <HAL_I2C_Master_Receive+0x1d2>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	2220      	movs	r2, #32
 8002afe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	2200      	movs	r2, #0
 8002b06:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	2200      	movs	r2, #0
 8002b0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002b12:	2300      	movs	r3, #0
 8002b14:	e000      	b.n	8002b18 <HAL_I2C_Master_Receive+0x474>
  }
  else
  {
    return HAL_BUSY;
 8002b16:	2302      	movs	r3, #2
  }
}
 8002b18:	4618      	mov	r0, r3
 8002b1a:	3728      	adds	r7, #40	; 0x28
 8002b1c:	46bd      	mov	sp, r7
 8002b1e:	bd80      	pop	{r7, pc}
 8002b20:	00010004 	.word	0x00010004

08002b24 <HAL_I2C_Master_Transmit_IT>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size)
{
 8002b24:	b480      	push	{r7}
 8002b26:	b087      	sub	sp, #28
 8002b28:	af00      	add	r7, sp, #0
 8002b2a:	60f8      	str	r0, [r7, #12]
 8002b2c:	607a      	str	r2, [r7, #4]
 8002b2e:	461a      	mov	r2, r3
 8002b30:	460b      	mov	r3, r1
 8002b32:	817b      	strh	r3, [r7, #10]
 8002b34:	4613      	mov	r3, r2
 8002b36:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 8002b38:	2300      	movs	r3, #0
 8002b3a:	617b      	str	r3, [r7, #20]

  if(hi2c->State == HAL_I2C_STATE_READY)
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002b42:	b2db      	uxtb	r3, r3
 8002b44:	2b20      	cmp	r3, #32
 8002b46:	d179      	bne.n	8002c3c <HAL_I2C_Master_Transmit_IT+0x118>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock /25U /1000U);
 8002b48:	4b3f      	ldr	r3, [pc, #252]	; (8002c48 <HAL_I2C_Master_Transmit_IT+0x124>)
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	08db      	lsrs	r3, r3, #3
 8002b4e:	4a3f      	ldr	r2, [pc, #252]	; (8002c4c <HAL_I2C_Master_Transmit_IT+0x128>)
 8002b50:	fba2 2303 	umull	r2, r3, r2, r3
 8002b54:	0a1a      	lsrs	r2, r3, #8
 8002b56:	4613      	mov	r3, r2
 8002b58:	009b      	lsls	r3, r3, #2
 8002b5a:	4413      	add	r3, r2
 8002b5c:	009a      	lsls	r2, r3, #2
 8002b5e:	4413      	add	r3, r2
 8002b60:	617b      	str	r3, [r7, #20]
    do
    {
      if(count-- == 0U)
 8002b62:	697b      	ldr	r3, [r7, #20]
 8002b64:	1e5a      	subs	r2, r3, #1
 8002b66:	617a      	str	r2, [r7, #20]
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	d10c      	bne.n	8002b86 <HAL_I2C_Master_Transmit_IT+0x62>
      {
        hi2c->PreviousState = I2C_STATE_NONE;
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	2200      	movs	r2, #0
 8002b70:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State= HAL_I2C_STATE_READY;
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	2220      	movs	r2, #32
 8002b76:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	2200      	movs	r2, #0
 8002b7e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8002b82:	2303      	movs	r3, #3
 8002b84:	e05b      	b.n	8002c3e <HAL_I2C_Master_Transmit_IT+0x11a>
      }
    }
    while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	699b      	ldr	r3, [r3, #24]
 8002b8c:	f003 0302 	and.w	r3, r3, #2
 8002b90:	2b02      	cmp	r3, #2
 8002b92:	d0e6      	beq.n	8002b62 <HAL_I2C_Master_Transmit_IT+0x3e>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002b9a:	2b01      	cmp	r3, #1
 8002b9c:	d101      	bne.n	8002ba2 <HAL_I2C_Master_Transmit_IT+0x7e>
 8002b9e:	2302      	movs	r3, #2
 8002ba0:	e04d      	b.n	8002c3e <HAL_I2C_Master_Transmit_IT+0x11a>
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	2201      	movs	r2, #1
 8002ba6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Check if the I2C is already enabled */
    if((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	f003 0301 	and.w	r3, r3, #1
 8002bb4:	2b01      	cmp	r3, #1
 8002bb6:	d007      	beq.n	8002bc8 <HAL_I2C_Master_Transmit_IT+0xa4>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	681a      	ldr	r2, [r3, #0]
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	f042 0201 	orr.w	r2, r2, #1
 8002bc6:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	681a      	ldr	r2, [r3, #0]
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002bd6:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	2221      	movs	r2, #33	; 0x21
 8002bdc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	2210      	movs	r2, #16
 8002be4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	2200      	movs	r2, #0
 8002bec:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	687a      	ldr	r2, [r7, #4]
 8002bf2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	893a      	ldrh	r2, [r7, #8]
 8002bf8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	4a14      	ldr	r2, [pc, #80]	; (8002c50 <HAL_I2C_Master_Transmit_IT+0x12c>)
 8002bfe:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->XferSize    = hi2c->XferCount;
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c04:	b29a      	uxth	r2, r3
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->Devaddress  = DevAddress;
 8002c0a:	897a      	ldrh	r2, [r7, #10]
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Generate Start */
    hi2c->Instance->CR1 |= I2C_CR1_START;
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	681a      	ldr	r2, [r3, #0]
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002c1e:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	2200      	movs	r2, #0
 8002c24:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Note : The I2C interrupts must be enabled after unlocking current process
              to avoid the risk of I2C interrupt handle execution before current
              process unlock */
    /* Enable EVT, BUF and ERR interrupt */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	685a      	ldr	r2, [r3, #4]
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	f442 62e0 	orr.w	r2, r2, #1792	; 0x700
 8002c36:	605a      	str	r2, [r3, #4]

    return HAL_OK;
 8002c38:	2300      	movs	r3, #0
 8002c3a:	e000      	b.n	8002c3e <HAL_I2C_Master_Transmit_IT+0x11a>
  }
  else
  {
    return HAL_BUSY;
 8002c3c:	2302      	movs	r3, #2
  }
}
 8002c3e:	4618      	mov	r0, r3
 8002c40:	371c      	adds	r7, #28
 8002c42:	46bd      	mov	sp, r7
 8002c44:	bc80      	pop	{r7}
 8002c46:	4770      	bx	lr
 8002c48:	20000008 	.word	0x20000008
 8002c4c:	14f8b589 	.word	0x14f8b589
 8002c50:	ffff0000 	.word	0xffff0000

08002c54 <HAL_I2C_Master_Receive_IT>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size)
{
 8002c54:	b480      	push	{r7}
 8002c56:	b087      	sub	sp, #28
 8002c58:	af00      	add	r7, sp, #0
 8002c5a:	60f8      	str	r0, [r7, #12]
 8002c5c:	607a      	str	r2, [r7, #4]
 8002c5e:	461a      	mov	r2, r3
 8002c60:	460b      	mov	r3, r1
 8002c62:	817b      	strh	r3, [r7, #10]
 8002c64:	4613      	mov	r3, r2
 8002c66:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 8002c68:	2300      	movs	r3, #0
 8002c6a:	617b      	str	r3, [r7, #20]

  if(hi2c->State == HAL_I2C_STATE_READY)
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002c72:	b2db      	uxtb	r3, r3
 8002c74:	2b20      	cmp	r3, #32
 8002c76:	f040 8082 	bne.w	8002d7e <HAL_I2C_Master_Receive_IT+0x12a>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock /25U /1000U);
 8002c7a:	4b44      	ldr	r3, [pc, #272]	; (8002d8c <HAL_I2C_Master_Receive_IT+0x138>)
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	08db      	lsrs	r3, r3, #3
 8002c80:	4a43      	ldr	r2, [pc, #268]	; (8002d90 <HAL_I2C_Master_Receive_IT+0x13c>)
 8002c82:	fba2 2303 	umull	r2, r3, r2, r3
 8002c86:	0a1a      	lsrs	r2, r3, #8
 8002c88:	4613      	mov	r3, r2
 8002c8a:	009b      	lsls	r3, r3, #2
 8002c8c:	4413      	add	r3, r2
 8002c8e:	009a      	lsls	r2, r3, #2
 8002c90:	4413      	add	r3, r2
 8002c92:	617b      	str	r3, [r7, #20]
    do
    {
      if(count-- == 0U)
 8002c94:	697b      	ldr	r3, [r7, #20]
 8002c96:	1e5a      	subs	r2, r3, #1
 8002c98:	617a      	str	r2, [r7, #20]
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d10c      	bne.n	8002cb8 <HAL_I2C_Master_Receive_IT+0x64>
      {
        hi2c->PreviousState = I2C_STATE_NONE;
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	2200      	movs	r2, #0
 8002ca2:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State= HAL_I2C_STATE_READY;
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	2220      	movs	r2, #32
 8002ca8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	2200      	movs	r2, #0
 8002cb0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT; 
 8002cb4:	2303      	movs	r3, #3
 8002cb6:	e063      	b.n	8002d80 <HAL_I2C_Master_Receive_IT+0x12c>
      }
    }
    while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	699b      	ldr	r3, [r3, #24]
 8002cbe:	f003 0302 	and.w	r3, r3, #2
 8002cc2:	2b02      	cmp	r3, #2
 8002cc4:	d0e6      	beq.n	8002c94 <HAL_I2C_Master_Receive_IT+0x40>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002ccc:	2b01      	cmp	r3, #1
 8002cce:	d101      	bne.n	8002cd4 <HAL_I2C_Master_Receive_IT+0x80>
 8002cd0:	2302      	movs	r3, #2
 8002cd2:	e055      	b.n	8002d80 <HAL_I2C_Master_Receive_IT+0x12c>
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	2201      	movs	r2, #1
 8002cd8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Check if the I2C is already enabled */
    if((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	f003 0301 	and.w	r3, r3, #1
 8002ce6:	2b01      	cmp	r3, #1
 8002ce8:	d007      	beq.n	8002cfa <HAL_I2C_Master_Receive_IT+0xa6>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	681a      	ldr	r2, [r3, #0]
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	f042 0201 	orr.w	r2, r2, #1
 8002cf8:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	681a      	ldr	r2, [r3, #0]
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002d08:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	2222      	movs	r2, #34	; 0x22
 8002d0e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	2210      	movs	r2, #16
 8002d16:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	2200      	movs	r2, #0
 8002d1e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	687a      	ldr	r2, [r7, #4]
 8002d24:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	893a      	ldrh	r2, [r7, #8]
 8002d2a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	4a19      	ldr	r2, [pc, #100]	; (8002d94 <HAL_I2C_Master_Receive_IT+0x140>)
 8002d30:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->XferSize    = hi2c->XferCount;
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d36:	b29a      	uxth	r2, r3
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->Devaddress  = DevAddress;
 8002d3c:	897a      	ldrh	r2, [r7, #10]
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	645a      	str	r2, [r3, #68]	; 0x44

    /* Enable Acknowledge */
    hi2c->Instance->CR1 |= I2C_CR1_ACK;
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	681a      	ldr	r2, [r3, #0]
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002d50:	601a      	str	r2, [r3, #0]

    /* Generate Start */
    hi2c->Instance->CR1 |= I2C_CR1_START;
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	681a      	ldr	r2, [r3, #0]
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002d60:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	2200      	movs	r2, #0
 8002d66:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    /* Note : The I2C interrupts must be enabled after unlocking current process
    to avoid the risk of I2C interrupt handle execution before current
    process unlock */

    /* Enable EVT, BUF and ERR interrupt */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	685a      	ldr	r2, [r3, #4]
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	f442 62e0 	orr.w	r2, r2, #1792	; 0x700
 8002d78:	605a      	str	r2, [r3, #4]

    return HAL_OK;
 8002d7a:	2300      	movs	r3, #0
 8002d7c:	e000      	b.n	8002d80 <HAL_I2C_Master_Receive_IT+0x12c>
  }
  else
  {
    return HAL_BUSY;
 8002d7e:	2302      	movs	r3, #2
  }
}
 8002d80:	4618      	mov	r0, r3
 8002d82:	371c      	adds	r7, #28
 8002d84:	46bd      	mov	sp, r7
 8002d86:	bc80      	pop	{r7}
 8002d88:	4770      	bx	lr
 8002d8a:	bf00      	nop
 8002d8c:	20000008 	.word	0x20000008
 8002d90:	14f8b589 	.word	0x14f8b589
 8002d94:	ffff0000 	.word	0xffff0000

08002d98 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8002d98:	b580      	push	{r7, lr}
 8002d9a:	b086      	sub	sp, #24
 8002d9c:	af00      	add	r7, sp, #0
 8002d9e:	6078      	str	r0, [r7, #4]
  uint32_t sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	699b      	ldr	r3, [r3, #24]
 8002da6:	617b      	str	r3, [r7, #20]
  uint32_t sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	695b      	ldr	r3, [r3, #20]
 8002dae:	613b      	str	r3, [r7, #16]
  uint32_t itsources    = READ_REG(hi2c->Instance->CR2);
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	685b      	ldr	r3, [r3, #4]
 8002db6:	60fb      	str	r3, [r7, #12]

  uint32_t CurrentMode  = hi2c->Mode;
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002dbe:	b2db      	uxtb	r3, r3
 8002dc0:	60bb      	str	r3, [r7, #8]

  /* Master or Memory mode selected */
  if((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8002dc2:	68bb      	ldr	r3, [r7, #8]
 8002dc4:	2b10      	cmp	r3, #16
 8002dc6:	d002      	beq.n	8002dce <HAL_I2C_EV_IRQHandler+0x36>
 8002dc8:	68bb      	ldr	r3, [r7, #8]
 8002dca:	2b40      	cmp	r3, #64	; 0x40
 8002dcc:	d172      	bne.n	8002eb4 <HAL_I2C_EV_IRQHandler+0x11c>
  {
    /* SB Set ----------------------------------------------------------------*/
    if(((sr1itflags & I2C_FLAG_SB) != RESET) && ((itsources & I2C_IT_EVT) != RESET))
 8002dce:	693b      	ldr	r3, [r7, #16]
 8002dd0:	f003 1301 	and.w	r3, r3, #65537	; 0x10001
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d008      	beq.n	8002dea <HAL_I2C_EV_IRQHandler+0x52>
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d003      	beq.n	8002dea <HAL_I2C_EV_IRQHandler+0x52>
    {
      I2C_Master_SB(hi2c);
 8002de2:	6878      	ldr	r0, [r7, #4]
 8002de4:	f000 fcc5 	bl	8003772 <I2C_Master_SB>
 8002de8:	e01a      	b.n	8002e20 <HAL_I2C_EV_IRQHandler+0x88>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if(((sr1itflags & I2C_FLAG_ADD10) != RESET) && ((itsources & I2C_IT_EVT) != RESET))
 8002dea:	693a      	ldr	r2, [r7, #16]
 8002dec:	4b65      	ldr	r3, [pc, #404]	; (8002f84 <HAL_I2C_EV_IRQHandler+0x1ec>)
 8002dee:	4013      	ands	r3, r2
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	d008      	beq.n	8002e06 <HAL_I2C_EV_IRQHandler+0x6e>
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d003      	beq.n	8002e06 <HAL_I2C_EV_IRQHandler+0x6e>
    {
      I2C_Master_ADD10(hi2c);
 8002dfe:	6878      	ldr	r0, [r7, #4]
 8002e00:	f000 fd23 	bl	800384a <I2C_Master_ADD10>
 8002e04:	e00c      	b.n	8002e20 <HAL_I2C_EV_IRQHandler+0x88>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if(((sr1itflags & I2C_FLAG_ADDR) != RESET) && ((itsources & I2C_IT_EVT) != RESET))
 8002e06:	693a      	ldr	r2, [r7, #16]
 8002e08:	4b5f      	ldr	r3, [pc, #380]	; (8002f88 <HAL_I2C_EV_IRQHandler+0x1f0>)
 8002e0a:	4013      	ands	r3, r2
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	d007      	beq.n	8002e20 <HAL_I2C_EV_IRQHandler+0x88>
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d002      	beq.n	8002e20 <HAL_I2C_EV_IRQHandler+0x88>
    {
      I2C_Master_ADDR(hi2c);
 8002e1a:	6878      	ldr	r0, [r7, #4]
 8002e1c:	f000 fd25 	bl	800386a <I2C_Master_ADDR>
    }

    /* I2C in mode Transmitter -----------------------------------------------*/
    if((sr2itflags & I2C_FLAG_TRA) != RESET)
 8002e20:	697a      	ldr	r2, [r7, #20]
 8002e22:	4b5a      	ldr	r3, [pc, #360]	; (8002f8c <HAL_I2C_EV_IRQHandler+0x1f4>)
 8002e24:	4013      	ands	r3, r2
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d022      	beq.n	8002e70 <HAL_I2C_EV_IRQHandler+0xd8>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if(((sr1itflags & I2C_FLAG_TXE) != RESET) && ((itsources & I2C_IT_BUF) != RESET) && ((sr1itflags & I2C_FLAG_BTF) == RESET))
 8002e2a:	693a      	ldr	r2, [r7, #16]
 8002e2c:	4b58      	ldr	r3, [pc, #352]	; (8002f90 <HAL_I2C_EV_IRQHandler+0x1f8>)
 8002e2e:	4013      	ands	r3, r2
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	d00d      	beq.n	8002e50 <HAL_I2C_EV_IRQHandler+0xb8>
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d008      	beq.n	8002e50 <HAL_I2C_EV_IRQHandler+0xb8>
 8002e3e:	693a      	ldr	r2, [r7, #16]
 8002e40:	4b54      	ldr	r3, [pc, #336]	; (8002f94 <HAL_I2C_EV_IRQHandler+0x1fc>)
 8002e42:	4013      	ands	r3, r2
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d103      	bne.n	8002e50 <HAL_I2C_EV_IRQHandler+0xb8>
      {
        I2C_MasterTransmit_TXE(hi2c);
 8002e48:	6878      	ldr	r0, [r7, #4]
 8002e4a:	f000 f9c6 	bl	80031da <I2C_MasterTransmit_TXE>
 8002e4e:	e030      	b.n	8002eb2 <HAL_I2C_EV_IRQHandler+0x11a>
      }
      /* BTF set -------------------------------------------------------------*/
      else if(((sr1itflags & I2C_FLAG_BTF) != RESET) && ((itsources & I2C_IT_EVT) != RESET))
 8002e50:	693a      	ldr	r2, [r7, #16]
 8002e52:	4b50      	ldr	r3, [pc, #320]	; (8002f94 <HAL_I2C_EV_IRQHandler+0x1fc>)
 8002e54:	4013      	ands	r3, r2
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	f000 808f 	beq.w	8002f7a <HAL_I2C_EV_IRQHandler+0x1e2>
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	f000 8089 	beq.w	8002f7a <HAL_I2C_EV_IRQHandler+0x1e2>
      {
        I2C_MasterTransmit_BTF(hi2c);
 8002e68:	6878      	ldr	r0, [r7, #4]
 8002e6a:	f000 faab 	bl	80033c4 <I2C_MasterTransmit_BTF>
    if((sr2itflags & I2C_FLAG_TRA) != RESET)
 8002e6e:	e084      	b.n	8002f7a <HAL_I2C_EV_IRQHandler+0x1e2>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset -----------------------------------------------*/
      if(((sr1itflags & I2C_FLAG_RXNE) != RESET) && ((itsources & I2C_IT_BUF) != RESET) && ((sr1itflags & I2C_FLAG_BTF) == RESET))
 8002e70:	693a      	ldr	r2, [r7, #16]
 8002e72:	4b49      	ldr	r3, [pc, #292]	; (8002f98 <HAL_I2C_EV_IRQHandler+0x200>)
 8002e74:	4013      	ands	r3, r2
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d00d      	beq.n	8002e96 <HAL_I2C_EV_IRQHandler+0xfe>
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d008      	beq.n	8002e96 <HAL_I2C_EV_IRQHandler+0xfe>
 8002e84:	693a      	ldr	r2, [r7, #16]
 8002e86:	4b43      	ldr	r3, [pc, #268]	; (8002f94 <HAL_I2C_EV_IRQHandler+0x1fc>)
 8002e88:	4013      	ands	r3, r2
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d103      	bne.n	8002e96 <HAL_I2C_EV_IRQHandler+0xfe>
      {
        I2C_MasterReceive_RXNE(hi2c);
 8002e8e:	6878      	ldr	r0, [r7, #4]
 8002e90:	f000 fb0d 	bl	80034ae <I2C_MasterReceive_RXNE>
 8002e94:	e00d      	b.n	8002eb2 <HAL_I2C_EV_IRQHandler+0x11a>
      }
      /* BTF set -------------------------------------------------------------*/
      else if(((sr1itflags & I2C_FLAG_BTF) != RESET) && ((itsources & I2C_IT_EVT) != RESET))
 8002e96:	693a      	ldr	r2, [r7, #16]
 8002e98:	4b3e      	ldr	r3, [pc, #248]	; (8002f94 <HAL_I2C_EV_IRQHandler+0x1fc>)
 8002e9a:	4013      	ands	r3, r2
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d06c      	beq.n	8002f7a <HAL_I2C_EV_IRQHandler+0x1e2>
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d067      	beq.n	8002f7a <HAL_I2C_EV_IRQHandler+0x1e2>
      {
        I2C_MasterReceive_BTF(hi2c);
 8002eaa:	6878      	ldr	r0, [r7, #4]
 8002eac:	f000 fba0 	bl	80035f0 <I2C_MasterReceive_BTF>
    if((sr2itflags & I2C_FLAG_TRA) != RESET)
 8002eb0:	e063      	b.n	8002f7a <HAL_I2C_EV_IRQHandler+0x1e2>
 8002eb2:	e062      	b.n	8002f7a <HAL_I2C_EV_IRQHandler+0x1e2>
  }
  /* Slave mode selected */
  else
  {
    /* ADDR set --------------------------------------------------------------*/
    if(((sr1itflags & I2C_FLAG_ADDR) != RESET) && ((itsources & I2C_IT_EVT) != RESET))
 8002eb4:	693a      	ldr	r2, [r7, #16]
 8002eb6:	4b34      	ldr	r3, [pc, #208]	; (8002f88 <HAL_I2C_EV_IRQHandler+0x1f0>)
 8002eb8:	4013      	ands	r3, r2
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d008      	beq.n	8002ed0 <HAL_I2C_EV_IRQHandler+0x138>
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	d003      	beq.n	8002ed0 <HAL_I2C_EV_IRQHandler+0x138>
    {
      I2C_Slave_ADDR(hi2c);
 8002ec8:	6878      	ldr	r0, [r7, #4]
 8002eca:	f000 fef5 	bl	8003cb8 <I2C_Slave_ADDR>
 8002ece:	e055      	b.n	8002f7c <HAL_I2C_EV_IRQHandler+0x1e4>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if(((sr1itflags & I2C_FLAG_STOPF) != RESET) && ((itsources & I2C_IT_EVT) != RESET))
 8002ed0:	693a      	ldr	r2, [r7, #16]
 8002ed2:	4b32      	ldr	r3, [pc, #200]	; (8002f9c <HAL_I2C_EV_IRQHandler+0x204>)
 8002ed4:	4013      	ands	r3, r2
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d008      	beq.n	8002eec <HAL_I2C_EV_IRQHandler+0x154>
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	d003      	beq.n	8002eec <HAL_I2C_EV_IRQHandler+0x154>
    {
      I2C_Slave_STOPF(hi2c);
 8002ee4:	6878      	ldr	r0, [r7, #4]
 8002ee6:	f000 ff11 	bl	8003d0c <I2C_Slave_STOPF>
 8002eea:	e047      	b.n	8002f7c <HAL_I2C_EV_IRQHandler+0x1e4>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if((sr2itflags & I2C_FLAG_TRA) != RESET)
 8002eec:	697a      	ldr	r2, [r7, #20]
 8002eee:	4b27      	ldr	r3, [pc, #156]	; (8002f8c <HAL_I2C_EV_IRQHandler+0x1f4>)
 8002ef0:	4013      	ands	r3, r2
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d020      	beq.n	8002f38 <HAL_I2C_EV_IRQHandler+0x1a0>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if(((sr1itflags & I2C_FLAG_TXE) != RESET) && ((itsources & I2C_IT_BUF) != RESET) && ((sr1itflags & I2C_FLAG_BTF) == RESET))
 8002ef6:	693a      	ldr	r2, [r7, #16]
 8002ef8:	4b25      	ldr	r3, [pc, #148]	; (8002f90 <HAL_I2C_EV_IRQHandler+0x1f8>)
 8002efa:	4013      	ands	r3, r2
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d00d      	beq.n	8002f1c <HAL_I2C_EV_IRQHandler+0x184>
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d008      	beq.n	8002f1c <HAL_I2C_EV_IRQHandler+0x184>
 8002f0a:	693a      	ldr	r2, [r7, #16]
 8002f0c:	4b21      	ldr	r3, [pc, #132]	; (8002f94 <HAL_I2C_EV_IRQHandler+0x1fc>)
 8002f0e:	4013      	ands	r3, r2
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	d103      	bne.n	8002f1c <HAL_I2C_EV_IRQHandler+0x184>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 8002f14:	6878      	ldr	r0, [r7, #4]
 8002f16:	f000 fe15 	bl	8003b44 <I2C_SlaveTransmit_TXE>
 8002f1a:	e02f      	b.n	8002f7c <HAL_I2C_EV_IRQHandler+0x1e4>
      }
      /* BTF set -------------------------------------------------------------*/
      else if(((sr1itflags & I2C_FLAG_BTF) != RESET) && ((itsources & I2C_IT_EVT) != RESET))
 8002f1c:	693a      	ldr	r2, [r7, #16]
 8002f1e:	4b1d      	ldr	r3, [pc, #116]	; (8002f94 <HAL_I2C_EV_IRQHandler+0x1fc>)
 8002f20:	4013      	ands	r3, r2
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d02a      	beq.n	8002f7c <HAL_I2C_EV_IRQHandler+0x1e4>
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	d025      	beq.n	8002f7c <HAL_I2C_EV_IRQHandler+0x1e4>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 8002f30:	6878      	ldr	r0, [r7, #4]
 8002f32:	f000 fe44 	bl	8003bbe <I2C_SlaveTransmit_BTF>
      {
        I2C_SlaveReceive_BTF(hi2c);
      }
    }
  }
}
 8002f36:	e021      	b.n	8002f7c <HAL_I2C_EV_IRQHandler+0x1e4>
      if(((sr1itflags & I2C_FLAG_RXNE) != RESET) && ((itsources & I2C_IT_BUF) != RESET) && ((sr1itflags & I2C_FLAG_BTF) == RESET))
 8002f38:	693a      	ldr	r2, [r7, #16]
 8002f3a:	4b17      	ldr	r3, [pc, #92]	; (8002f98 <HAL_I2C_EV_IRQHandler+0x200>)
 8002f3c:	4013      	ands	r3, r2
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d00d      	beq.n	8002f5e <HAL_I2C_EV_IRQHandler+0x1c6>
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d008      	beq.n	8002f5e <HAL_I2C_EV_IRQHandler+0x1c6>
 8002f4c:	693a      	ldr	r2, [r7, #16]
 8002f4e:	4b11      	ldr	r3, [pc, #68]	; (8002f94 <HAL_I2C_EV_IRQHandler+0x1fc>)
 8002f50:	4013      	ands	r3, r2
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d103      	bne.n	8002f5e <HAL_I2C_EV_IRQHandler+0x1c6>
        I2C_SlaveReceive_RXNE(hi2c);
 8002f56:	6878      	ldr	r0, [r7, #4]
 8002f58:	f000 fe50 	bl	8003bfc <I2C_SlaveReceive_RXNE>
 8002f5c:	e00e      	b.n	8002f7c <HAL_I2C_EV_IRQHandler+0x1e4>
      else if(((sr1itflags & I2C_FLAG_BTF) != RESET) && ((itsources & I2C_IT_EVT) != RESET))
 8002f5e:	693a      	ldr	r2, [r7, #16]
 8002f60:	4b0c      	ldr	r3, [pc, #48]	; (8002f94 <HAL_I2C_EV_IRQHandler+0x1fc>)
 8002f62:	4013      	ands	r3, r2
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d009      	beq.n	8002f7c <HAL_I2C_EV_IRQHandler+0x1e4>
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d004      	beq.n	8002f7c <HAL_I2C_EV_IRQHandler+0x1e4>
        I2C_SlaveReceive_BTF(hi2c);
 8002f72:	6878      	ldr	r0, [r7, #4]
 8002f74:	f000 fe80 	bl	8003c78 <I2C_SlaveReceive_BTF>
}
 8002f78:	e000      	b.n	8002f7c <HAL_I2C_EV_IRQHandler+0x1e4>
    if((sr2itflags & I2C_FLAG_TRA) != RESET)
 8002f7a:	bf00      	nop
}
 8002f7c:	bf00      	nop
 8002f7e:	3718      	adds	r7, #24
 8002f80:	46bd      	mov	sp, r7
 8002f82:	bd80      	pop	{r7, pc}
 8002f84:	00010008 	.word	0x00010008
 8002f88:	00010002 	.word	0x00010002
 8002f8c:	00100004 	.word	0x00100004
 8002f90:	00010080 	.word	0x00010080
 8002f94:	00010004 	.word	0x00010004
 8002f98:	00010040 	.word	0x00010040
 8002f9c:	00010010 	.word	0x00010010

08002fa0 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8002fa0:	b580      	push	{r7, lr}
 8002fa2:	b088      	sub	sp, #32
 8002fa4:	af00      	add	r7, sp, #0
 8002fa6:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U, tmp3 = 0U, tmp4 = 0U;
 8002fa8:	2300      	movs	r3, #0
 8002faa:	61fb      	str	r3, [r7, #28]
 8002fac:	2300      	movs	r3, #0
 8002fae:	61bb      	str	r3, [r7, #24]
 8002fb0:	2300      	movs	r3, #0
 8002fb2:	617b      	str	r3, [r7, #20]
 8002fb4:	2300      	movs	r3, #0
 8002fb6:	613b      	str	r3, [r7, #16]
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	695b      	ldr	r3, [r3, #20]
 8002fbe:	60fb      	str	r3, [r7, #12]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	685b      	ldr	r3, [r3, #4]
 8002fc6:	60bb      	str	r3, [r7, #8]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if(((sr1itflags & I2C_FLAG_BERR) != RESET) && ((itsources & I2C_IT_ERR) != RESET))
 8002fc8:	68fa      	ldr	r2, [r7, #12]
 8002fca:	4b4d      	ldr	r3, [pc, #308]	; (8003100 <HAL_I2C_ER_IRQHandler+0x160>)
 8002fcc:	4013      	ands	r3, r2
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d017      	beq.n	8003002 <HAL_I2C_ER_IRQHandler+0x62>
 8002fd2:	68bb      	ldr	r3, [r7, #8]
 8002fd4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d012      	beq.n	8003002 <HAL_I2C_ER_IRQHandler+0x62>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fe0:	f043 0201 	orr.w	r2, r3, #1
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8002ff0:	615a      	str	r2, [r3, #20]

    /* Workaround: Start cannot be generated after a misplaced Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_SWRST);
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	681a      	ldr	r2, [r3, #0]
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003000:	601a      	str	r2, [r3, #0]
  }

  /* I2C Arbitration Loss error interrupt occurred ---------------------------*/
  if(((sr1itflags & I2C_FLAG_ARLO) != RESET) && ((itsources & I2C_IT_ERR) != RESET))
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	f403 3381 	and.w	r3, r3, #66048	; 0x10200
 8003008:	2b00      	cmp	r3, #0
 800300a:	d00f      	beq.n	800302c <HAL_I2C_ER_IRQHandler+0x8c>
 800300c:	68bb      	ldr	r3, [r7, #8]
 800300e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003012:	2b00      	cmp	r3, #0
 8003014:	d00a      	beq.n	800302c <HAL_I2C_ER_IRQHandler+0x8c>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800301a:	f043 0202 	orr.w	r2, r3, #2
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	641a      	str	r2, [r3, #64]	; 0x40

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	f46f 7200 	mvn.w	r2, #512	; 0x200
 800302a:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if(((sr1itflags & I2C_FLAG_AF) != RESET) && ((itsources & I2C_IT_ERR) != RESET))
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	f403 3382 	and.w	r3, r3, #66560	; 0x10400
 8003032:	2b00      	cmp	r3, #0
 8003034:	d044      	beq.n	80030c0 <HAL_I2C_ER_IRQHandler+0x120>
 8003036:	68bb      	ldr	r3, [r7, #8]
 8003038:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800303c:	2b00      	cmp	r3, #0
 800303e:	d03f      	beq.n	80030c0 <HAL_I2C_ER_IRQHandler+0x120>
  {
    tmp1 = hi2c->Mode;
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003046:	b2db      	uxtb	r3, r3
 8003048:	61fb      	str	r3, [r7, #28]
    tmp2 = hi2c->XferCount;
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800304e:	b29b      	uxth	r3, r3
 8003050:	61bb      	str	r3, [r7, #24]
    tmp3 = hi2c->State;
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003058:	b2db      	uxtb	r3, r3
 800305a:	617b      	str	r3, [r7, #20]
    tmp4 = hi2c->PreviousState;
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003060:	613b      	str	r3, [r7, #16]
    if((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 8003062:	69fb      	ldr	r3, [r7, #28]
 8003064:	2b20      	cmp	r3, #32
 8003066:	d112      	bne.n	800308e <HAL_I2C_ER_IRQHandler+0xee>
 8003068:	69bb      	ldr	r3, [r7, #24]
 800306a:	2b00      	cmp	r3, #0
 800306c:	d10f      	bne.n	800308e <HAL_I2C_ER_IRQHandler+0xee>
 800306e:	697b      	ldr	r3, [r7, #20]
 8003070:	2b21      	cmp	r3, #33	; 0x21
 8003072:	d008      	beq.n	8003086 <HAL_I2C_ER_IRQHandler+0xe6>
      ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 8003074:	697b      	ldr	r3, [r7, #20]
 8003076:	2b29      	cmp	r3, #41	; 0x29
 8003078:	d005      	beq.n	8003086 <HAL_I2C_ER_IRQHandler+0xe6>
 800307a:	697b      	ldr	r3, [r7, #20]
 800307c:	2b28      	cmp	r3, #40	; 0x28
 800307e:	d106      	bne.n	800308e <HAL_I2C_ER_IRQHandler+0xee>
      ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 8003080:	693b      	ldr	r3, [r7, #16]
 8003082:	2b21      	cmp	r3, #33	; 0x21
 8003084:	d103      	bne.n	800308e <HAL_I2C_ER_IRQHandler+0xee>
    {
      I2C_Slave_AF(hi2c);
 8003086:	6878      	ldr	r0, [r7, #4]
 8003088:	f000 ff06 	bl	8003e98 <I2C_Slave_AF>
 800308c:	e018      	b.n	80030c0 <HAL_I2C_ER_IRQHandler+0x120>
    }
    else
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003092:	f043 0204 	orr.w	r2, r3, #4
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	641a      	str	r2, [r3, #64]	; 0x40

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if(hi2c->Mode == HAL_I2C_MODE_MASTER)
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80030a0:	b2db      	uxtb	r3, r3
 80030a2:	2b10      	cmp	r3, #16
 80030a4:	d107      	bne.n	80030b6 <HAL_I2C_ER_IRQHandler+0x116>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1,I2C_CR1_STOP);
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	681a      	ldr	r2, [r3, #0]
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80030b4:	601a      	str	r2, [r3, #0]
      }

      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80030be:	615a      	str	r2, [r3, #20]
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if(((sr1itflags & I2C_FLAG_OVR) != RESET) && ((itsources & I2C_IT_ERR) != RESET))
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	f403 3384 	and.w	r3, r3, #67584	; 0x10800
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d00f      	beq.n	80030ea <HAL_I2C_ER_IRQHandler+0x14a>
 80030ca:	68bb      	ldr	r3, [r7, #8]
 80030cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	d00a      	beq.n	80030ea <HAL_I2C_ER_IRQHandler+0x14a>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030d8:	f043 0208 	orr.w	r2, r3, #8
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	641a      	str	r2, [r3, #64]	; 0x40
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	f46f 6200 	mvn.w	r2, #2048	; 0x800
 80030e8:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if(hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d002      	beq.n	80030f8 <HAL_I2C_ER_IRQHandler+0x158>
  {
    I2C_ITError(hi2c);
 80030f2:	6878      	ldr	r0, [r7, #4]
 80030f4:	f000 ff42 	bl	8003f7c <I2C_ITError>
  }
}
 80030f8:	bf00      	nop
 80030fa:	3720      	adds	r7, #32
 80030fc:	46bd      	mov	sp, r7
 80030fe:	bd80      	pop	{r7, pc}
 8003100:	00010100 	.word	0x00010100

08003104 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003104:	b480      	push	{r7}
 8003106:	b083      	sub	sp, #12
 8003108:	af00      	add	r7, sp, #0
 800310a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback can be implemented in the user file
   */
}
 800310c:	bf00      	nop
 800310e:	370c      	adds	r7, #12
 8003110:	46bd      	mov	sp, r7
 8003112:	bc80      	pop	{r7}
 8003114:	4770      	bx	lr

08003116 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003116:	b480      	push	{r7}
 8003118:	b083      	sub	sp, #12
 800311a:	af00      	add	r7, sp, #0
 800311c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback can be implemented in the user file
   */
}
 800311e:	bf00      	nop
 8003120:	370c      	adds	r7, #12
 8003122:	46bd      	mov	sp, r7
 8003124:	bc80      	pop	{r7}
 8003126:	4770      	bx	lr

08003128 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003128:	b480      	push	{r7}
 800312a:	b083      	sub	sp, #12
 800312c:	af00      	add	r7, sp, #0
 800312e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback can be implemented in the user file
   */
}
 8003130:	bf00      	nop
 8003132:	370c      	adds	r7, #12
 8003134:	46bd      	mov	sp, r7
 8003136:	bc80      	pop	{r7}
 8003138:	4770      	bx	lr

0800313a <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800313a:	b480      	push	{r7}
 800313c:	b083      	sub	sp, #12
 800313e:	af00      	add	r7, sp, #0
 8003140:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback can be implemented in the user file
   */
}
 8003142:	bf00      	nop
 8003144:	370c      	adds	r7, #12
 8003146:	46bd      	mov	sp, r7
 8003148:	bc80      	pop	{r7}
 800314a:	4770      	bx	lr

0800314c <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferOptions_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 800314c:	b480      	push	{r7}
 800314e:	b083      	sub	sp, #12
 8003150:	af00      	add	r7, sp, #0
 8003152:	6078      	str	r0, [r7, #4]
 8003154:	460b      	mov	r3, r1
 8003156:	70fb      	strb	r3, [r7, #3]
 8003158:	4613      	mov	r3, r2
 800315a:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback can be implemented in the user file
   */
}
 800315c:	bf00      	nop
 800315e:	370c      	adds	r7, #12
 8003160:	46bd      	mov	sp, r7
 8003162:	bc80      	pop	{r7}
 8003164:	4770      	bx	lr

08003166 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003166:	b480      	push	{r7}
 8003168:	b083      	sub	sp, #12
 800316a:	af00      	add	r7, sp, #0
 800316c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

    /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback can be implemented in the user file
   */
}
 800316e:	bf00      	nop
 8003170:	370c      	adds	r7, #12
 8003172:	46bd      	mov	sp, r7
 8003174:	bc80      	pop	{r7}
 8003176:	4770      	bx	lr

08003178 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003178:	b480      	push	{r7}
 800317a:	b083      	sub	sp, #12
 800317c:	af00      	add	r7, sp, #0
 800317e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback can be implemented in the user file
   */
}
 8003180:	bf00      	nop
 8003182:	370c      	adds	r7, #12
 8003184:	46bd      	mov	sp, r7
 8003186:	bc80      	pop	{r7}
 8003188:	4770      	bx	lr

0800318a <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800318a:	b480      	push	{r7}
 800318c:	b083      	sub	sp, #12
 800318e:	af00      	add	r7, sp, #0
 8003190:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback can be implemented in the user file
   */
}
 8003192:	bf00      	nop
 8003194:	370c      	adds	r7, #12
 8003196:	46bd      	mov	sp, r7
 8003198:	bc80      	pop	{r7}
 800319a:	4770      	bx	lr

0800319c <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 800319c:	b480      	push	{r7}
 800319e:	b083      	sub	sp, #12
 80031a0:	af00      	add	r7, sp, #0
 80031a2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback can be implemented in the user file
   */
}
 80031a4:	bf00      	nop
 80031a6:	370c      	adds	r7, #12
 80031a8:	46bd      	mov	sp, r7
 80031aa:	bc80      	pop	{r7}
 80031ac:	4770      	bx	lr

080031ae <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80031ae:	b480      	push	{r7}
 80031b0:	b083      	sub	sp, #12
 80031b2:	af00      	add	r7, sp, #0
 80031b4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 80031b6:	bf00      	nop
 80031b8:	370c      	adds	r7, #12
 80031ba:	46bd      	mov	sp, r7
 80031bc:	bc80      	pop	{r7}
 80031be:	4770      	bx	lr

080031c0 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 80031c0:	b480      	push	{r7}
 80031c2:	b083      	sub	sp, #12
 80031c4:	af00      	add	r7, sp, #0
 80031c6:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80031ce:	b2db      	uxtb	r3, r3
}
 80031d0:	4618      	mov	r0, r3
 80031d2:	370c      	adds	r7, #12
 80031d4:	46bd      	mov	sp, r7
 80031d6:	bc80      	pop	{r7}
 80031d8:	4770      	bx	lr

080031da <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 80031da:	b580      	push	{r7, lr}
 80031dc:	b086      	sub	sp, #24
 80031de:	af00      	add	r7, sp, #0
 80031e0:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentState       = hi2c->State;
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80031e8:	b2db      	uxtb	r3, r3
 80031ea:	617b      	str	r3, [r7, #20]
  uint32_t CurrentMode        = hi2c->Mode;
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80031f2:	b2db      	uxtb	r3, r3
 80031f4:	613b      	str	r3, [r7, #16]
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031fa:	60fb      	str	r3, [r7, #12]

  if((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003200:	2b00      	cmp	r3, #0
 8003202:	d150      	bne.n	80032a6 <I2C_MasterTransmit_TXE+0xcc>
 8003204:	697b      	ldr	r3, [r7, #20]
 8003206:	2b21      	cmp	r3, #33	; 0x21
 8003208:	d14d      	bne.n	80032a6 <I2C_MasterTransmit_TXE+0xcc>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	2b04      	cmp	r3, #4
 800320e:	d01d      	beq.n	800324c <I2C_MasterTransmit_TXE+0x72>
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	2b08      	cmp	r3, #8
 8003214:	d01a      	beq.n	800324c <I2C_MasterTransmit_TXE+0x72>
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800321c:	d016      	beq.n	800324c <I2C_MasterTransmit_TXE+0x72>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	685a      	ldr	r2, [r3, #4]
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800322c:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	2211      	movs	r2, #17
 8003232:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	2200      	movs	r2, #0
 8003238:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	2220      	movs	r2, #32
 8003240:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      HAL_I2C_MasterTxCpltCallback(hi2c);
 8003244:	6878      	ldr	r0, [r7, #4]
 8003246:	f7ff ff5d 	bl	8003104 <HAL_I2C_MasterTxCpltCallback>
    if((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800324a:	e0b6      	b.n	80033ba <I2C_MasterTransmit_TXE+0x1e0>
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	685a      	ldr	r2, [r3, #4]
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800325a:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      hi2c->Instance->CR1 |= I2C_CR1_STOP;
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	681a      	ldr	r2, [r3, #0]
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800326a:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	2200      	movs	r2, #0
 8003270:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	2220      	movs	r2, #32
 8003276:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if(hi2c->Mode == HAL_I2C_MODE_MEM)
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003280:	b2db      	uxtb	r3, r3
 8003282:	2b40      	cmp	r3, #64	; 0x40
 8003284:	d107      	bne.n	8003296 <I2C_MasterTransmit_TXE+0xbc>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	2200      	movs	r2, #0
 800328a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_MemTxCpltCallback(hi2c);
 800328e:	6878      	ldr	r0, [r7, #4]
 8003290:	f7ff ff72 	bl	8003178 <HAL_I2C_MemTxCpltCallback>
    if((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003294:	e091      	b.n	80033ba <I2C_MasterTransmit_TXE+0x1e0>
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	2200      	movs	r2, #0
 800329a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_MasterTxCpltCallback(hi2c);
 800329e:	6878      	ldr	r0, [r7, #4]
 80032a0:	f7ff ff30 	bl	8003104 <HAL_I2C_MasterTxCpltCallback>
    if((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80032a4:	e089      	b.n	80033ba <I2C_MasterTransmit_TXE+0x1e0>
      }
    }
  }
  else if((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 80032a6:	697b      	ldr	r3, [r7, #20]
 80032a8:	2b21      	cmp	r3, #33	; 0x21
 80032aa:	d006      	beq.n	80032ba <I2C_MasterTransmit_TXE+0xe0>
 80032ac:	693b      	ldr	r3, [r7, #16]
 80032ae:	2b40      	cmp	r3, #64	; 0x40
 80032b0:	f040 8083 	bne.w	80033ba <I2C_MasterTransmit_TXE+0x1e0>
    ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 80032b4:	697b      	ldr	r3, [r7, #20]
 80032b6:	2b22      	cmp	r3, #34	; 0x22
 80032b8:	d17f      	bne.n	80033ba <I2C_MasterTransmit_TXE+0x1e0>
  {
    if(hi2c->XferCount == 0U)
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80032be:	b29b      	uxth	r3, r3
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	d108      	bne.n	80032d6 <I2C_MasterTransmit_TXE+0xfc>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	685a      	ldr	r2, [r3, #4]
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80032d2:	605a      	str	r2, [r3, #4]
 80032d4:	e071      	b.n	80033ba <I2C_MasterTransmit_TXE+0x1e0>
    }
    else
    {
      if(hi2c->Mode == HAL_I2C_MODE_MEM)
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80032dc:	b2db      	uxtb	r3, r3
 80032de:	2b40      	cmp	r3, #64	; 0x40
 80032e0:	d15b      	bne.n	800339a <I2C_MasterTransmit_TXE+0x1c0>
      {
        if(hi2c->EventCount == 0)
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d11d      	bne.n	8003326 <I2C_MasterTransmit_TXE+0x14c>
        {
          /* If Memory address size is 8Bit */
          if(hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80032ee:	2b01      	cmp	r3, #1
 80032f0:	d10b      	bne.n	800330a <I2C_MasterTransmit_TXE+0x130>
          {
            /* Send Memory Address */
            hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80032f6:	b2da      	uxtb	r2, r3
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	611a      	str	r2, [r3, #16]
            
            hi2c->EventCount += 2;
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003302:	1c9a      	adds	r2, r3, #2
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	651a      	str	r2, [r3, #80]	; 0x50
 8003308:	e057      	b.n	80033ba <I2C_MasterTransmit_TXE+0x1e0>
          }
          /* If Memory address size is 16Bit */
          else
          {
            /* Send MSB of Memory Address */
            hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800330e:	b29b      	uxth	r3, r3
 8003310:	121b      	asrs	r3, r3, #8
 8003312:	b2da      	uxtb	r2, r3
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	611a      	str	r2, [r3, #16]
            
            hi2c->EventCount++;
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800331e:	1c5a      	adds	r2, r3, #1
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	651a      	str	r2, [r3, #80]	; 0x50
 8003324:	e049      	b.n	80033ba <I2C_MasterTransmit_TXE+0x1e0>
          }
        }
        else if(hi2c->EventCount == 1)
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800332a:	2b01      	cmp	r3, #1
 800332c:	d10b      	bne.n	8003346 <I2C_MasterTransmit_TXE+0x16c>
        {
          /* Send LSB of Memory Address */
          hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003332:	b2da      	uxtb	r2, r3
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	611a      	str	r2, [r3, #16]
          
          hi2c->EventCount++;
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800333e:	1c5a      	adds	r2, r3, #1
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	651a      	str	r2, [r3, #80]	; 0x50
 8003344:	e039      	b.n	80033ba <I2C_MasterTransmit_TXE+0x1e0>
        }
        else if(hi2c->EventCount == 2)
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800334a:	2b02      	cmp	r3, #2
 800334c:	d135      	bne.n	80033ba <I2C_MasterTransmit_TXE+0x1e0>
        {
          if(hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003354:	b2db      	uxtb	r3, r3
 8003356:	2b22      	cmp	r3, #34	; 0x22
 8003358:	d108      	bne.n	800336c <I2C_MasterTransmit_TXE+0x192>
          {
            /* Generate Restart */
            hi2c->Instance->CR1 |= I2C_CR1_START;
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	681a      	ldr	r2, [r3, #0]
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003368:	601a      	str	r2, [r3, #0]
 800336a:	e026      	b.n	80033ba <I2C_MasterTransmit_TXE+0x1e0>
          }
          else if(hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003372:	b2db      	uxtb	r3, r3
 8003374:	2b21      	cmp	r3, #33	; 0x21
 8003376:	d120      	bne.n	80033ba <I2C_MasterTransmit_TXE+0x1e0>
          {
            /* Write data to DR */
            hi2c->Instance->DR = (*hi2c->pBuffPtr++);
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800337c:	1c59      	adds	r1, r3, #1
 800337e:	687a      	ldr	r2, [r7, #4]
 8003380:	6251      	str	r1, [r2, #36]	; 0x24
 8003382:	781a      	ldrb	r2, [r3, #0]
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	611a      	str	r2, [r3, #16]
            hi2c->XferCount--;
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800338e:	b29b      	uxth	r3, r3
 8003390:	3b01      	subs	r3, #1
 8003392:	b29a      	uxth	r2, r3
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003398:	e00f      	b.n	80033ba <I2C_MasterTransmit_TXE+0x1e0>
        }
      }
      else
      {
        /* Write data to DR */
        hi2c->Instance->DR = (*hi2c->pBuffPtr++);
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800339e:	1c59      	adds	r1, r3, #1
 80033a0:	687a      	ldr	r2, [r7, #4]
 80033a2:	6251      	str	r1, [r2, #36]	; 0x24
 80033a4:	781a      	ldrb	r2, [r3, #0]
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	611a      	str	r2, [r3, #16]
        hi2c->XferCount--;
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80033b0:	b29b      	uxth	r3, r3
 80033b2:	3b01      	subs	r3, #1
 80033b4:	b29a      	uxth	r2, r3
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	855a      	strh	r2, [r3, #42]	; 0x2a
      }
    }
  }
  return HAL_OK;
 80033ba:	2300      	movs	r3, #0
}
 80033bc:	4618      	mov	r0, r3
 80033be:	3718      	adds	r7, #24
 80033c0:	46bd      	mov	sp, r7
 80033c2:	bd80      	pop	{r7, pc}

080033c4 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 80033c4:	b580      	push	{r7, lr}
 80033c6:	b084      	sub	sp, #16
 80033c8:	af00      	add	r7, sp, #0
 80033ca:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033d0:	60fb      	str	r3, [r7, #12]

  if(hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80033d8:	b2db      	uxtb	r3, r3
 80033da:	2b21      	cmp	r3, #33	; 0x21
 80033dc:	d162      	bne.n	80034a4 <I2C_MasterTransmit_BTF+0xe0>
  {    
    if(hi2c->XferCount != 0U)
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80033e2:	b29b      	uxth	r3, r3
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	d010      	beq.n	800340a <I2C_MasterTransmit_BTF+0x46>
    {
      /* Write data to DR */
      hi2c->Instance->DR = (*hi2c->pBuffPtr++);
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033ec:	1c59      	adds	r1, r3, #1
 80033ee:	687a      	ldr	r2, [r7, #4]
 80033f0:	6251      	str	r1, [r2, #36]	; 0x24
 80033f2:	781a      	ldrb	r2, [r3, #0]
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	611a      	str	r2, [r3, #16]
      hi2c->XferCount--;
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80033fe:	b29b      	uxth	r3, r3
 8003400:	3b01      	subs	r3, #1
 8003402:	b29a      	uxth	r2, r3
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003408:	e04c      	b.n	80034a4 <I2C_MasterTransmit_BTF+0xe0>
    }
    else
    {
      /* Call TxCpltCallback() directly if no stop mode is set */
      if((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	2b04      	cmp	r3, #4
 800340e:	d01d      	beq.n	800344c <I2C_MasterTransmit_BTF+0x88>
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	2b08      	cmp	r3, #8
 8003414:	d01a      	beq.n	800344c <I2C_MasterTransmit_BTF+0x88>
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800341c:	d016      	beq.n	800344c <I2C_MasterTransmit_BTF+0x88>
      {
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	685a      	ldr	r2, [r3, #4]
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800342c:	605a      	str	r2, [r3, #4]
        
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	2211      	movs	r2, #17
 8003432:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	2200      	movs	r2, #0
 8003438:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	2220      	movs	r2, #32
 8003440:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8003444:	6878      	ldr	r0, [r7, #4]
 8003446:	f7ff fe5d 	bl	8003104 <HAL_I2C_MasterTxCpltCallback>
 800344a:	e02b      	b.n	80034a4 <I2C_MasterTransmit_BTF+0xe0>
      }
      else /* Generate Stop condition then Call TxCpltCallback() */
      {
        /* Disable EVT, BUF and ERR interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	685a      	ldr	r2, [r3, #4]
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800345a:	605a      	str	r2, [r3, #4]
        
        /* Generate Stop */
        hi2c->Instance->CR1 |= I2C_CR1_STOP;
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	681a      	ldr	r2, [r3, #0]
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800346a:	601a      	str	r2, [r3, #0]
        
        hi2c->PreviousState = I2C_STATE_NONE;
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	2200      	movs	r2, #0
 8003470:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	2220      	movs	r2, #32
 8003476:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        
        if(hi2c->Mode == HAL_I2C_MODE_MEM)
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003480:	b2db      	uxtb	r3, r3
 8003482:	2b40      	cmp	r3, #64	; 0x40
 8003484:	d107      	bne.n	8003496 <I2C_MasterTransmit_BTF+0xd2>
        {
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	2200      	movs	r2, #0
 800348a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          
          HAL_I2C_MemTxCpltCallback(hi2c);
 800348e:	6878      	ldr	r0, [r7, #4]
 8003490:	f7ff fe72 	bl	8003178 <HAL_I2C_MemTxCpltCallback>
 8003494:	e006      	b.n	80034a4 <I2C_MasterTransmit_BTF+0xe0>
        }
        else
        {
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	2200      	movs	r2, #0
 800349a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          
          HAL_I2C_MasterTxCpltCallback(hi2c);
 800349e:	6878      	ldr	r0, [r7, #4]
 80034a0:	f7ff fe30 	bl	8003104 <HAL_I2C_MasterTxCpltCallback>
        }
      }
    }
  }
  return HAL_OK;
 80034a4:	2300      	movs	r3, #0
}
 80034a6:	4618      	mov	r0, r3
 80034a8:	3710      	adds	r7, #16
 80034aa:	46bd      	mov	sp, r7
 80034ac:	bd80      	pop	{r7, pc}

080034ae <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 80034ae:	b580      	push	{r7, lr}
 80034b0:	b084      	sub	sp, #16
 80034b2:	af00      	add	r7, sp, #0
 80034b4:	6078      	str	r0, [r7, #4]
  if(hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80034bc:	b2db      	uxtb	r3, r3
 80034be:	2b22      	cmp	r3, #34	; 0x22
 80034c0:	f040 8091 	bne.w	80035e6 <I2C_MasterReceive_RXNE+0x138>
  {
    uint32_t tmp = 0U;
 80034c4:	2300      	movs	r3, #0
 80034c6:	60fb      	str	r3, [r7, #12]
    
    tmp = hi2c->XferCount;
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80034cc:	b29b      	uxth	r3, r3
 80034ce:	60fb      	str	r3, [r7, #12]
    if(tmp > 3U)
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	2b03      	cmp	r3, #3
 80034d4:	d911      	bls.n	80034fa <I2C_MasterReceive_RXNE+0x4c>
    {
      /* Read data from DR */
      (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	6918      	ldr	r0, [r3, #16]
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034e0:	1c59      	adds	r1, r3, #1
 80034e2:	687a      	ldr	r2, [r7, #4]
 80034e4:	6251      	str	r1, [r2, #36]	; 0x24
 80034e6:	b2c2      	uxtb	r2, r0
 80034e8:	701a      	strb	r2, [r3, #0]
      hi2c->XferCount--;
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80034ee:	b29b      	uxth	r3, r3
 80034f0:	3b01      	subs	r3, #1
 80034f2:	b29a      	uxth	r2, r3
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	855a      	strh	r2, [r3, #42]	; 0x2a
 80034f8:	e075      	b.n	80035e6 <I2C_MasterReceive_RXNE+0x138>
    }
    else if((tmp == 2U) || (tmp == 3U))
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	2b02      	cmp	r3, #2
 80034fe:	d002      	beq.n	8003506 <I2C_MasterReceive_RXNE+0x58>
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	2b03      	cmp	r3, #3
 8003504:	d125      	bne.n	8003552 <I2C_MasterReceive_RXNE+0xa4>
    {
      if(hi2c->XferOptions != I2C_NEXT_FRAME)
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800350a:	2b02      	cmp	r3, #2
 800350c:	d010      	beq.n	8003530 <I2C_MasterReceive_RXNE+0x82>
      {
        /* Disable Acknowledge */
        hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	681a      	ldr	r2, [r3, #0]
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800351c:	601a      	str	r2, [r3, #0]
        
        /* Enable Pos */
        hi2c->Instance->CR1 |= I2C_CR1_POS;
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	681a      	ldr	r2, [r3, #0]
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800352c:	601a      	str	r2, [r3, #0]
 800352e:	e007      	b.n	8003540 <I2C_MasterReceive_RXNE+0x92>
      }
      else
      {
        /* Enable Acknowledge */
        hi2c->Instance->CR1 |= I2C_CR1_ACK;
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	681a      	ldr	r2, [r3, #0]
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800353e:	601a      	str	r2, [r3, #0]
      }
      
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	685a      	ldr	r2, [r3, #4]
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800354e:	605a      	str	r2, [r3, #4]
 8003550:	e049      	b.n	80035e6 <I2C_MasterReceive_RXNE+0x138>
    }
    else
    {
      if(hi2c->XferOptions != I2C_NEXT_FRAME)
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003556:	2b02      	cmp	r3, #2
 8003558:	d008      	beq.n	800356c <I2C_MasterReceive_RXNE+0xbe>
      {
        /* Disable Acknowledge */
        hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	681a      	ldr	r2, [r3, #0]
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003568:	601a      	str	r2, [r3, #0]
 800356a:	e007      	b.n	800357c <I2C_MasterReceive_RXNE+0xce>
      }
      else
      {
        /* Enable Acknowledge */
        hi2c->Instance->CR1 |= I2C_CR1_ACK;
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	681a      	ldr	r2, [r3, #0]
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800357a:	601a      	str	r2, [r3, #0]
      }

      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	685a      	ldr	r2, [r3, #4]
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800358a:	605a      	str	r2, [r3, #4]
      
      /* Read data from DR */
      (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	6918      	ldr	r0, [r3, #16]
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003596:	1c59      	adds	r1, r3, #1
 8003598:	687a      	ldr	r2, [r7, #4]
 800359a:	6251      	str	r1, [r2, #36]	; 0x24
 800359c:	b2c2      	uxtb	r2, r0
 800359e:	701a      	strb	r2, [r3, #0]
      hi2c->XferCount--;
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80035a4:	b29b      	uxth	r3, r3
 80035a6:	3b01      	subs	r3, #1
 80035a8:	b29a      	uxth	r2, r3
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	855a      	strh	r2, [r3, #42]	; 0x2a

      hi2c->State = HAL_I2C_STATE_READY;
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	2220      	movs	r2, #32
 80035b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->PreviousState = I2C_STATE_NONE;
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	2200      	movs	r2, #0
 80035ba:	631a      	str	r2, [r3, #48]	; 0x30

      if(hi2c->Mode == HAL_I2C_MODE_MEM)
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80035c2:	b2db      	uxtb	r3, r3
 80035c4:	2b40      	cmp	r3, #64	; 0x40
 80035c6:	d107      	bne.n	80035d8 <I2C_MasterReceive_RXNE+0x12a>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	2200      	movs	r2, #0
 80035cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_MemRxCpltCallback(hi2c);
 80035d0:	6878      	ldr	r0, [r7, #4]
 80035d2:	f7ff fdda 	bl	800318a <HAL_I2C_MemRxCpltCallback>
 80035d6:	e006      	b.n	80035e6 <I2C_MasterReceive_RXNE+0x138>
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	2200      	movs	r2, #0
 80035dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_MasterRxCpltCallback(hi2c);
 80035e0:	6878      	ldr	r0, [r7, #4]
 80035e2:	f7ff fd98 	bl	8003116 <HAL_I2C_MasterRxCpltCallback>
      }
    }
  }
  return HAL_OK;
 80035e6:	2300      	movs	r3, #0
}
 80035e8:	4618      	mov	r0, r3
 80035ea:	3710      	adds	r7, #16
 80035ec:	46bd      	mov	sp, r7
 80035ee:	bd80      	pop	{r7, pc}

080035f0 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 80035f0:	b580      	push	{r7, lr}
 80035f2:	b084      	sub	sp, #16
 80035f4:	af00      	add	r7, sp, #0
 80035f6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035fc:	60fb      	str	r3, [r7, #12]

  if(hi2c->XferCount == 3U)
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003602:	b29b      	uxth	r3, r3
 8003604:	2b03      	cmp	r3, #3
 8003606:	d123      	bne.n	8003650 <I2C_MasterReceive_BTF+0x60>
  {
    if((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	2b04      	cmp	r3, #4
 800360c:	d006      	beq.n	800361c <I2C_MasterReceive_BTF+0x2c>
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	2b08      	cmp	r3, #8
 8003612:	d003      	beq.n	800361c <I2C_MasterReceive_BTF+0x2c>
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800361a:	d107      	bne.n	800362c <I2C_MasterReceive_BTF+0x3c>
    {
      /* Disable Acknowledge */
      hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	681a      	ldr	r2, [r3, #0]
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800362a:	601a      	str	r2, [r3, #0]
    }

    /* Read data from DR */
    (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	6918      	ldr	r0, [r3, #16]
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003636:	1c59      	adds	r1, r3, #1
 8003638:	687a      	ldr	r2, [r7, #4]
 800363a:	6251      	str	r1, [r2, #36]	; 0x24
 800363c:	b2c2      	uxtb	r2, r0
 800363e:	701a      	strb	r2, [r3, #0]
    hi2c->XferCount--;
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003644:	b29b      	uxth	r3, r3
 8003646:	3b01      	subs	r3, #1
 8003648:	b29a      	uxth	r2, r3
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	855a      	strh	r2, [r3, #42]	; 0x2a
 800364e:	e08b      	b.n	8003768 <I2C_MasterReceive_BTF+0x178>
  }
  else if(hi2c->XferCount == 2U)
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003654:	b29b      	uxth	r3, r3
 8003656:	2b02      	cmp	r3, #2
 8003658:	d175      	bne.n	8003746 <I2C_MasterReceive_BTF+0x156>
  {
    /* Prepare next transfer or stop current transfer */
    if((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	2b04      	cmp	r3, #4
 800365e:	d023      	beq.n	80036a8 <I2C_MasterReceive_BTF+0xb8>
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	2b08      	cmp	r3, #8
 8003664:	d020      	beq.n	80036a8 <I2C_MasterReceive_BTF+0xb8>
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800366c:	d01c      	beq.n	80036a8 <I2C_MasterReceive_BTF+0xb8>
    {
      if(CurrentXferOptions != I2C_NEXT_FRAME)
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	2b02      	cmp	r3, #2
 8003672:	d008      	beq.n	8003686 <I2C_MasterReceive_BTF+0x96>
      {
        /* Disable Acknowledge */
        hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	681a      	ldr	r2, [r3, #0]
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003682:	601a      	str	r2, [r3, #0]
 8003684:	e007      	b.n	8003696 <I2C_MasterReceive_BTF+0xa6>
      }
      else
      {
        /* Enable Acknowledge */
        hi2c->Instance->CR1 |= I2C_CR1_ACK;
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	681a      	ldr	r2, [r3, #0]
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003694:	601a      	str	r2, [r3, #0]
      }

      /* Disable EVT and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	685a      	ldr	r2, [r3, #4]
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80036a4:	605a      	str	r2, [r3, #4]
 80036a6:	e00f      	b.n	80036c8 <I2C_MasterReceive_BTF+0xd8>
    }
    else
    {
      /* Disable EVT and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	685a      	ldr	r2, [r3, #4]
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80036b6:	605a      	str	r2, [r3, #4]
      
      /* Generate Stop */
      hi2c->Instance->CR1 |= I2C_CR1_STOP;
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	681a      	ldr	r2, [r3, #0]
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80036c6:	601a      	str	r2, [r3, #0]
    }

    /* Read data from DR */
    (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	6918      	ldr	r0, [r3, #16]
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036d2:	1c59      	adds	r1, r3, #1
 80036d4:	687a      	ldr	r2, [r7, #4]
 80036d6:	6251      	str	r1, [r2, #36]	; 0x24
 80036d8:	b2c2      	uxtb	r2, r0
 80036da:	701a      	strb	r2, [r3, #0]
    hi2c->XferCount--;
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80036e0:	b29b      	uxth	r3, r3
 80036e2:	3b01      	subs	r3, #1
 80036e4:	b29a      	uxth	r2, r3
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	855a      	strh	r2, [r3, #42]	; 0x2a

    /* Read data from DR */
    (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	6918      	ldr	r0, [r3, #16]
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036f4:	1c59      	adds	r1, r3, #1
 80036f6:	687a      	ldr	r2, [r7, #4]
 80036f8:	6251      	str	r1, [r2, #36]	; 0x24
 80036fa:	b2c2      	uxtb	r2, r0
 80036fc:	701a      	strb	r2, [r3, #0]
    hi2c->XferCount--;
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003702:	b29b      	uxth	r3, r3
 8003704:	3b01      	subs	r3, #1
 8003706:	b29a      	uxth	r2, r3
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	855a      	strh	r2, [r3, #42]	; 0x2a

    hi2c->State = HAL_I2C_STATE_READY;
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	2220      	movs	r2, #32
 8003710:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->PreviousState = I2C_STATE_NONE;
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	2200      	movs	r2, #0
 8003718:	631a      	str	r2, [r3, #48]	; 0x30

    if(hi2c->Mode == HAL_I2C_MODE_MEM)
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003720:	b2db      	uxtb	r3, r3
 8003722:	2b40      	cmp	r3, #64	; 0x40
 8003724:	d107      	bne.n	8003736 <I2C_MasterReceive_BTF+0x146>
    {
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	2200      	movs	r2, #0
 800372a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      HAL_I2C_MemRxCpltCallback(hi2c);
 800372e:	6878      	ldr	r0, [r7, #4]
 8003730:	f7ff fd2b 	bl	800318a <HAL_I2C_MemRxCpltCallback>
 8003734:	e018      	b.n	8003768 <I2C_MasterReceive_BTF+0x178>
    }
    else
    {
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	2200      	movs	r2, #0
 800373a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      HAL_I2C_MasterRxCpltCallback(hi2c);
 800373e:	6878      	ldr	r0, [r7, #4]
 8003740:	f7ff fce9 	bl	8003116 <HAL_I2C_MasterRxCpltCallback>
 8003744:	e010      	b.n	8003768 <I2C_MasterReceive_BTF+0x178>
    }
  }
  else
  {
    /* Read data from DR */
    (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	6918      	ldr	r0, [r3, #16]
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003750:	1c59      	adds	r1, r3, #1
 8003752:	687a      	ldr	r2, [r7, #4]
 8003754:	6251      	str	r1, [r2, #36]	; 0x24
 8003756:	b2c2      	uxtb	r2, r0
 8003758:	701a      	strb	r2, [r3, #0]
    hi2c->XferCount--;
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800375e:	b29b      	uxth	r3, r3
 8003760:	3b01      	subs	r3, #1
 8003762:	b29a      	uxth	r2, r3
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  return HAL_OK;
 8003768:	2300      	movs	r3, #0
}
 800376a:	4618      	mov	r0, r3
 800376c:	3710      	adds	r7, #16
 800376e:	46bd      	mov	sp, r7
 8003770:	bd80      	pop	{r7, pc}

08003772 <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 8003772:	b480      	push	{r7}
 8003774:	b083      	sub	sp, #12
 8003776:	af00      	add	r7, sp, #0
 8003778:	6078      	str	r0, [r7, #4]
  if(hi2c->Mode == HAL_I2C_MODE_MEM)
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003780:	b2db      	uxtb	r3, r3
 8003782:	2b40      	cmp	r3, #64	; 0x40
 8003784:	d117      	bne.n	80037b6 <I2C_Master_SB+0x44>
  {
    if(hi2c->EventCount == 0U)
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800378a:	2b00      	cmp	r3, #0
 800378c:	d109      	bne.n	80037a2 <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003792:	b2db      	uxtb	r3, r3
 8003794:	461a      	mov	r2, r3
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800379e:	611a      	str	r2, [r3, #16]
 80037a0:	e04d      	b.n	800383e <I2C_Master_SB+0xcc>
    }
    else
    {
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037a6:	b2db      	uxtb	r3, r3
 80037a8:	f043 0301 	orr.w	r3, r3, #1
 80037ac:	b2da      	uxtb	r2, r3
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	611a      	str	r2, [r3, #16]
 80037b4:	e043      	b.n	800383e <I2C_Master_SB+0xcc>
    }
  }
  else
  {
    if(hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	691b      	ldr	r3, [r3, #16]
 80037ba:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80037be:	d119      	bne.n	80037f4 <I2C_Master_SB+0x82>
    {
      /* Send slave 7 Bits address */
      if(hi2c->State == HAL_I2C_STATE_BUSY_TX) 
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80037c6:	b2db      	uxtb	r3, r3
 80037c8:	2b21      	cmp	r3, #33	; 0x21
 80037ca:	d109      	bne.n	80037e0 <I2C_Master_SB+0x6e>
      {
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037d0:	b2db      	uxtb	r3, r3
 80037d2:	461a      	mov	r2, r3
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80037dc:	611a      	str	r2, [r3, #16]
 80037de:	e02e      	b.n	800383e <I2C_Master_SB+0xcc>
      }
      else
      {
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037e4:	b2db      	uxtb	r3, r3
 80037e6:	f043 0301 	orr.w	r3, r3, #1
 80037ea:	b2da      	uxtb	r2, r3
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	611a      	str	r2, [r3, #16]
 80037f2:	e024      	b.n	800383e <I2C_Master_SB+0xcc>
      }
    }
    else
    {
      if(hi2c->EventCount == 0U)
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	d10e      	bne.n	800381a <I2C_Master_SB+0xa8>
      {
        /* Send header of slave address */
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003800:	b29b      	uxth	r3, r3
 8003802:	11db      	asrs	r3, r3, #7
 8003804:	b2db      	uxtb	r3, r3
 8003806:	f003 0306 	and.w	r3, r3, #6
 800380a:	b2db      	uxtb	r3, r3
 800380c:	f063 030f 	orn	r3, r3, #15
 8003810:	b2da      	uxtb	r2, r3
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	611a      	str	r2, [r3, #16]
 8003818:	e011      	b.n	800383e <I2C_Master_SB+0xcc>
      }
      else if(hi2c->EventCount == 1U)
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800381e:	2b01      	cmp	r3, #1
 8003820:	d10d      	bne.n	800383e <I2C_Master_SB+0xcc>
      {
        /* Send header of slave address */
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003826:	b29b      	uxth	r3, r3
 8003828:	11db      	asrs	r3, r3, #7
 800382a:	b2db      	uxtb	r3, r3
 800382c:	f003 0306 	and.w	r3, r3, #6
 8003830:	b2db      	uxtb	r3, r3
 8003832:	f063 030e 	orn	r3, r3, #14
 8003836:	b2da      	uxtb	r2, r3
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	611a      	str	r2, [r3, #16]
      }
    }
  }

  return HAL_OK;
 800383e:	2300      	movs	r3, #0
}
 8003840:	4618      	mov	r0, r3
 8003842:	370c      	adds	r7, #12
 8003844:	46bd      	mov	sp, r7
 8003846:	bc80      	pop	{r7}
 8003848:	4770      	bx	lr

0800384a <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 800384a:	b480      	push	{r7}
 800384c:	b083      	sub	sp, #12
 800384e:	af00      	add	r7, sp, #0
 8003850:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003856:	b2da      	uxtb	r2, r3
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	611a      	str	r2, [r3, #16]

  return HAL_OK;
 800385e:	2300      	movs	r3, #0
}
 8003860:	4618      	mov	r0, r3
 8003862:	370c      	adds	r7, #12
 8003864:	46bd      	mov	sp, r7
 8003866:	bc80      	pop	{r7}
 8003868:	4770      	bx	lr

0800386a <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 800386a:	b480      	push	{r7}
 800386c:	b091      	sub	sp, #68	; 0x44
 800386e:	af00      	add	r7, sp, #0
 8003870:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentMode        = hi2c->Mode;
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003878:	b2db      	uxtb	r3, r3
 800387a:	63fb      	str	r3, [r7, #60]	; 0x3c
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003880:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State         = hi2c->PreviousState;
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003886:	637b      	str	r3, [r7, #52]	; 0x34

  if(hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800388e:	b2db      	uxtb	r3, r3
 8003890:	2b22      	cmp	r3, #34	; 0x22
 8003892:	f040 8146 	bne.w	8003b22 <I2C_Master_ADDR+0x2b8>
  {
    if((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800389a:	2b00      	cmp	r3, #0
 800389c:	d10e      	bne.n	80038bc <I2C_Master_ADDR+0x52>
 800389e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80038a0:	2b40      	cmp	r3, #64	; 0x40
 80038a2:	d10b      	bne.n	80038bc <I2C_Master_ADDR+0x52>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80038a4:	2300      	movs	r3, #0
 80038a6:	633b      	str	r3, [r7, #48]	; 0x30
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	695b      	ldr	r3, [r3, #20]
 80038ae:	633b      	str	r3, [r7, #48]	; 0x30
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	699b      	ldr	r3, [r3, #24]
 80038b6:	633b      	str	r3, [r7, #48]	; 0x30
 80038b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038ba:	e13d      	b.n	8003b38 <I2C_Master_ADDR+0x2ce>
    }
    else if((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d11d      	bne.n	8003900 <I2C_Master_ADDR+0x96>
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	691b      	ldr	r3, [r3, #16]
 80038c8:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80038cc:	d118      	bne.n	8003900 <I2C_Master_ADDR+0x96>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80038ce:	2300      	movs	r3, #0
 80038d0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	695b      	ldr	r3, [r3, #20]
 80038d8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	699b      	ldr	r3, [r3, #24]
 80038e0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80038e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      
      /* Generate Restart */
      hi2c->Instance->CR1 |= I2C_CR1_START;
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	681a      	ldr	r2, [r3, #0]
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80038f2:	601a      	str	r2, [r3, #0]
      
      hi2c->EventCount++;
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80038f8:	1c5a      	adds	r2, r3, #1
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	651a      	str	r2, [r3, #80]	; 0x50
 80038fe:	e11b      	b.n	8003b38 <I2C_Master_ADDR+0x2ce>
    }
    else
    {
      if(hi2c->XferCount == 0U)
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003904:	b29b      	uxth	r3, r3
 8003906:	2b00      	cmp	r3, #0
 8003908:	d113      	bne.n	8003932 <I2C_Master_ADDR+0xc8>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800390a:	2300      	movs	r3, #0
 800390c:	62bb      	str	r3, [r7, #40]	; 0x28
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	695b      	ldr	r3, [r3, #20]
 8003914:	62bb      	str	r3, [r7, #40]	; 0x28
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	699b      	ldr	r3, [r3, #24]
 800391c:	62bb      	str	r3, [r7, #40]	; 0x28
 800391e:	6abb      	ldr	r3, [r7, #40]	; 0x28
        
        /* Generate Stop */
        hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	681a      	ldr	r2, [r3, #0]
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800392e:	601a      	str	r2, [r3, #0]
 8003930:	e0f3      	b.n	8003b1a <I2C_Master_ADDR+0x2b0>
      }
      else if(hi2c->XferCount == 1U)   
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003936:	b29b      	uxth	r3, r3
 8003938:	2b01      	cmp	r3, #1
 800393a:	f040 8082 	bne.w	8003a42 <I2C_Master_ADDR+0x1d8>
      {
        if(CurrentXferOptions == I2C_NO_OPTION_FRAME)
 800393e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003940:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003944:	d137      	bne.n	80039b6 <I2C_Master_ADDR+0x14c>
        {
          /* Disable Acknowledge */
            hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	681a      	ldr	r2, [r3, #0]
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003954:	601a      	str	r2, [r3, #0]

          if((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	685b      	ldr	r3, [r3, #4]
 800395c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003960:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003964:	d113      	bne.n	800398e <I2C_Master_ADDR+0x124>
          {
            /* Disable Acknowledge */
            hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	681a      	ldr	r2, [r3, #0]
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003974:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003976:	2300      	movs	r3, #0
 8003978:	627b      	str	r3, [r7, #36]	; 0x24
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	695b      	ldr	r3, [r3, #20]
 8003980:	627b      	str	r3, [r7, #36]	; 0x24
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	699b      	ldr	r3, [r3, #24]
 8003988:	627b      	str	r3, [r7, #36]	; 0x24
 800398a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800398c:	e0c5      	b.n	8003b1a <I2C_Master_ADDR+0x2b0>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800398e:	2300      	movs	r3, #0
 8003990:	623b      	str	r3, [r7, #32]
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	695b      	ldr	r3, [r3, #20]
 8003998:	623b      	str	r3, [r7, #32]
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	699b      	ldr	r3, [r3, #24]
 80039a0:	623b      	str	r3, [r7, #32]
 80039a2:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            hi2c->Instance->CR1 |= I2C_CR1_STOP;
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	681a      	ldr	r2, [r3, #0]
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80039b2:	601a      	str	r2, [r3, #0]
 80039b4:	e0b1      	b.n	8003b1a <I2C_Master_ADDR+0x2b0>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 80039b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80039b8:	2b04      	cmp	r3, #4
 80039ba:	d026      	beq.n	8003a0a <I2C_Master_ADDR+0x1a0>
 80039bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80039be:	2b08      	cmp	r3, #8
 80039c0:	d023      	beq.n	8003a0a <I2C_Master_ADDR+0x1a0>
          && (Prev_State != I2C_STATE_MASTER_BUSY_RX))
 80039c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80039c4:	2b12      	cmp	r3, #18
 80039c6:	d020      	beq.n	8003a0a <I2C_Master_ADDR+0x1a0>
        {
          if(hi2c->XferOptions != I2C_NEXT_FRAME)
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039cc:	2b02      	cmp	r3, #2
 80039ce:	d008      	beq.n	80039e2 <I2C_Master_ADDR+0x178>
          {
            /* Disable Acknowledge */
            hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	681a      	ldr	r2, [r3, #0]
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80039de:	601a      	str	r2, [r3, #0]
 80039e0:	e007      	b.n	80039f2 <I2C_Master_ADDR+0x188>
          }
          else
          {
            /* Enable Acknowledge */
            hi2c->Instance->CR1 |= I2C_CR1_ACK;
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	681a      	ldr	r2, [r3, #0]
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80039f0:	601a      	str	r2, [r3, #0]
          }
          
          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80039f2:	2300      	movs	r3, #0
 80039f4:	61fb      	str	r3, [r7, #28]
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	695b      	ldr	r3, [r3, #20]
 80039fc:	61fb      	str	r3, [r7, #28]
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	699b      	ldr	r3, [r3, #24]
 8003a04:	61fb      	str	r3, [r7, #28]
 8003a06:	69fb      	ldr	r3, [r7, #28]
 8003a08:	e087      	b.n	8003b1a <I2C_Master_ADDR+0x2b0>
        }
        else
        {
          /* Disable Acknowledge */
          hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	681a      	ldr	r2, [r3, #0]
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003a18:	601a      	str	r2, [r3, #0]
          
          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003a1a:	2300      	movs	r3, #0
 8003a1c:	61bb      	str	r3, [r7, #24]
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	695b      	ldr	r3, [r3, #20]
 8003a24:	61bb      	str	r3, [r7, #24]
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	699b      	ldr	r3, [r3, #24]
 8003a2c:	61bb      	str	r3, [r7, #24]
 8003a2e:	69bb      	ldr	r3, [r7, #24]
          
          /* Generate Stop */
          hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	681a      	ldr	r2, [r3, #0]
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003a3e:	601a      	str	r2, [r3, #0]
 8003a40:	e06b      	b.n	8003b1a <I2C_Master_ADDR+0x2b0>
        }
      }
      else if(hi2c->XferCount == 2U)
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a46:	b29b      	uxth	r3, r3
 8003a48:	2b02      	cmp	r3, #2
 8003a4a:	d143      	bne.n	8003ad4 <I2C_Master_ADDR+0x26a>
      {
        if(hi2c->XferOptions != I2C_NEXT_FRAME)
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a50:	2b02      	cmp	r3, #2
 8003a52:	d01b      	beq.n	8003a8c <I2C_Master_ADDR+0x222>
        {
          /* Enable Pos */
          hi2c->Instance->CR1 |= I2C_CR1_POS;
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	681a      	ldr	r2, [r3, #0]
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003a62:	601a      	str	r2, [r3, #0]
          
          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003a64:	2300      	movs	r3, #0
 8003a66:	617b      	str	r3, [r7, #20]
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	695b      	ldr	r3, [r3, #20]
 8003a6e:	617b      	str	r3, [r7, #20]
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	699b      	ldr	r3, [r3, #24]
 8003a76:	617b      	str	r3, [r7, #20]
 8003a78:	697b      	ldr	r3, [r7, #20]
          
          /* Disable Acknowledge */
          hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	681a      	ldr	r2, [r3, #0]
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003a88:	601a      	str	r2, [r3, #0]
 8003a8a:	e012      	b.n	8003ab2 <I2C_Master_ADDR+0x248>
        }
        else
        {
          /* Enable Acknowledge */
          hi2c->Instance->CR1 |= I2C_CR1_ACK;
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	681a      	ldr	r2, [r3, #0]
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003a9a:	601a      	str	r2, [r3, #0]
          
          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003a9c:	2300      	movs	r3, #0
 8003a9e:	613b      	str	r3, [r7, #16]
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	695b      	ldr	r3, [r3, #20]
 8003aa6:	613b      	str	r3, [r7, #16]
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	699b      	ldr	r3, [r3, #24]
 8003aae:	613b      	str	r3, [r7, #16]
 8003ab0:	693b      	ldr	r3, [r7, #16]
        }

        if((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	685b      	ldr	r3, [r3, #4]
 8003ab8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003abc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003ac0:	d12b      	bne.n	8003b1a <I2C_Master_ADDR+0x2b0>
        {
          /* Enable Last DMA bit */
          hi2c->Instance->CR2 |= I2C_CR2_LAST;
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	685a      	ldr	r2, [r3, #4]
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003ad0:	605a      	str	r2, [r3, #4]
 8003ad2:	e022      	b.n	8003b1a <I2C_Master_ADDR+0x2b0>
        }
      }
      else
      {
        /* Enable Acknowledge */
        hi2c->Instance->CR1 |= I2C_CR1_ACK;
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	681a      	ldr	r2, [r3, #0]
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003ae2:	601a      	str	r2, [r3, #0]

        if((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	685b      	ldr	r3, [r3, #4]
 8003aea:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003aee:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003af2:	d107      	bne.n	8003b04 <I2C_Master_ADDR+0x29a>
        {
          /* Enable Last DMA bit */
          hi2c->Instance->CR2 |= I2C_CR2_LAST;
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	685a      	ldr	r2, [r3, #4]
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003b02:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003b04:	2300      	movs	r3, #0
 8003b06:	60fb      	str	r3, [r7, #12]
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	695b      	ldr	r3, [r3, #20]
 8003b0e:	60fb      	str	r3, [r7, #12]
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	699b      	ldr	r3, [r3, #24]
 8003b16:	60fb      	str	r3, [r7, #12]
 8003b18:	68fb      	ldr	r3, [r7, #12]
      }
      
      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	2200      	movs	r2, #0
 8003b1e:	651a      	str	r2, [r3, #80]	; 0x50
 8003b20:	e00a      	b.n	8003b38 <I2C_Master_ADDR+0x2ce>
    }
  }
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003b22:	2300      	movs	r3, #0
 8003b24:	60bb      	str	r3, [r7, #8]
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	695b      	ldr	r3, [r3, #20]
 8003b2c:	60bb      	str	r3, [r7, #8]
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	699b      	ldr	r3, [r3, #24]
 8003b34:	60bb      	str	r3, [r7, #8]
 8003b36:	68bb      	ldr	r3, [r7, #8]
  }

  return HAL_OK;
 8003b38:	2300      	movs	r3, #0
}
 8003b3a:	4618      	mov	r0, r3
 8003b3c:	3744      	adds	r7, #68	; 0x44
 8003b3e:	46bd      	mov	sp, r7
 8003b40:	bc80      	pop	{r7}
 8003b42:	4770      	bx	lr

08003b44 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8003b44:	b580      	push	{r7, lr}
 8003b46:	b084      	sub	sp, #16
 8003b48:	af00      	add	r7, sp, #0
 8003b4a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentState = hi2c->State;
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003b52:	b2db      	uxtb	r3, r3
 8003b54:	60fb      	str	r3, [r7, #12]

  if(hi2c->XferCount != 0U)
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b5a:	b29b      	uxth	r3, r3
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	d029      	beq.n	8003bb4 <I2C_SlaveTransmit_TXE+0x70>
  {
    /* Write data to DR */
    hi2c->Instance->DR = (*hi2c->pBuffPtr++);
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b64:	1c59      	adds	r1, r3, #1
 8003b66:	687a      	ldr	r2, [r7, #4]
 8003b68:	6251      	str	r1, [r2, #36]	; 0x24
 8003b6a:	781a      	ldrb	r2, [r3, #0]
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	611a      	str	r2, [r3, #16]
    hi2c->XferCount--;
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b76:	b29b      	uxth	r3, r3
 8003b78:	3b01      	subs	r3, #1
 8003b7a:	b29a      	uxth	r2, r3
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	855a      	strh	r2, [r3, #42]	; 0x2a

    if((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b84:	b29b      	uxth	r3, r3
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d114      	bne.n	8003bb4 <I2C_SlaveTransmit_TXE+0x70>
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	2b29      	cmp	r3, #41	; 0x29
 8003b8e:	d111      	bne.n	8003bb4 <I2C_SlaveTransmit_TXE+0x70>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	685a      	ldr	r2, [r3, #4]
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003b9e:	605a      	str	r2, [r3, #4]
      
      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	2221      	movs	r2, #33	; 0x21
 8003ba4:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	2228      	movs	r2, #40	; 0x28
 8003baa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      
      /* Call the Tx complete callback to inform upper layer of the end of receive process */
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8003bae:	6878      	ldr	r0, [r7, #4]
 8003bb0:	f7ff faba 	bl	8003128 <HAL_I2C_SlaveTxCpltCallback>
    }
  }
  return HAL_OK;
 8003bb4:	2300      	movs	r3, #0
}
 8003bb6:	4618      	mov	r0, r3
 8003bb8:	3710      	adds	r7, #16
 8003bba:	46bd      	mov	sp, r7
 8003bbc:	bd80      	pop	{r7, pc}

08003bbe <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8003bbe:	b480      	push	{r7}
 8003bc0:	b083      	sub	sp, #12
 8003bc2:	af00      	add	r7, sp, #0
 8003bc4:	6078      	str	r0, [r7, #4]
  if(hi2c->XferCount != 0U)
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003bca:	b29b      	uxth	r3, r3
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	d00f      	beq.n	8003bf0 <I2C_SlaveTransmit_BTF+0x32>
  {
    /* Write data to DR */
    hi2c->Instance->DR = (*hi2c->pBuffPtr++);
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bd4:	1c59      	adds	r1, r3, #1
 8003bd6:	687a      	ldr	r2, [r7, #4]
 8003bd8:	6251      	str	r1, [r2, #36]	; 0x24
 8003bda:	781a      	ldrb	r2, [r3, #0]
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	611a      	str	r2, [r3, #16]
    hi2c->XferCount--;
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003be6:	b29b      	uxth	r3, r3
 8003be8:	3b01      	subs	r3, #1
 8003bea:	b29a      	uxth	r2, r3
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  return HAL_OK;
 8003bf0:	2300      	movs	r3, #0
}
 8003bf2:	4618      	mov	r0, r3
 8003bf4:	370c      	adds	r7, #12
 8003bf6:	46bd      	mov	sp, r7
 8003bf8:	bc80      	pop	{r7}
 8003bfa:	4770      	bx	lr

08003bfc <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8003bfc:	b580      	push	{r7, lr}
 8003bfe:	b084      	sub	sp, #16
 8003c00:	af00      	add	r7, sp, #0
 8003c02:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentState = hi2c->State;
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003c0a:	b2db      	uxtb	r3, r3
 8003c0c:	60fb      	str	r3, [r7, #12]

  if(hi2c->XferCount != 0U)
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c12:	b29b      	uxth	r3, r3
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	d02a      	beq.n	8003c6e <I2C_SlaveReceive_RXNE+0x72>
  {
    /* Read data from DR */
    (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	6918      	ldr	r0, [r3, #16]
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c22:	1c59      	adds	r1, r3, #1
 8003c24:	687a      	ldr	r2, [r7, #4]
 8003c26:	6251      	str	r1, [r2, #36]	; 0x24
 8003c28:	b2c2      	uxtb	r2, r0
 8003c2a:	701a      	strb	r2, [r3, #0]
    hi2c->XferCount--;
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c30:	b29b      	uxth	r3, r3
 8003c32:	3b01      	subs	r3, #1
 8003c34:	b29a      	uxth	r2, r3
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	855a      	strh	r2, [r3, #42]	; 0x2a

    if((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c3e:	b29b      	uxth	r3, r3
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	d114      	bne.n	8003c6e <I2C_SlaveReceive_RXNE+0x72>
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	2b2a      	cmp	r3, #42	; 0x2a
 8003c48:	d111      	bne.n	8003c6e <I2C_SlaveReceive_RXNE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	685a      	ldr	r2, [r3, #4]
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003c58:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	2222      	movs	r2, #34	; 0x22
 8003c5e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	2228      	movs	r2, #40	; 0x28
 8003c64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the Rx complete callback to inform upper layer of the end of receive process */
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8003c68:	6878      	ldr	r0, [r7, #4]
 8003c6a:	f7ff fa66 	bl	800313a <HAL_I2C_SlaveRxCpltCallback>
    }
  }
  return HAL_OK;
 8003c6e:	2300      	movs	r3, #0
}
 8003c70:	4618      	mov	r0, r3
 8003c72:	3710      	adds	r7, #16
 8003c74:	46bd      	mov	sp, r7
 8003c76:	bd80      	pop	{r7, pc}

08003c78 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8003c78:	b480      	push	{r7}
 8003c7a:	b083      	sub	sp, #12
 8003c7c:	af00      	add	r7, sp, #0
 8003c7e:	6078      	str	r0, [r7, #4]
  if(hi2c->XferCount != 0U)
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c84:	b29b      	uxth	r3, r3
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d010      	beq.n	8003cac <I2C_SlaveReceive_BTF+0x34>
  {
    /* Read data from DR */
    (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	6918      	ldr	r0, [r3, #16]
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c94:	1c59      	adds	r1, r3, #1
 8003c96:	687a      	ldr	r2, [r7, #4]
 8003c98:	6251      	str	r1, [r2, #36]	; 0x24
 8003c9a:	b2c2      	uxtb	r2, r0
 8003c9c:	701a      	strb	r2, [r3, #0]
    hi2c->XferCount--;
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ca2:	b29b      	uxth	r3, r3
 8003ca4:	3b01      	subs	r3, #1
 8003ca6:	b29a      	uxth	r2, r3
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  return HAL_OK;
 8003cac:	2300      	movs	r3, #0
}
 8003cae:	4618      	mov	r0, r3
 8003cb0:	370c      	adds	r7, #12
 8003cb2:	46bd      	mov	sp, r7
 8003cb4:	bc80      	pop	{r7}
 8003cb6:	4770      	bx	lr

08003cb8 <I2C_Slave_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c)
{
 8003cb8:	b580      	push	{r7, lr}
 8003cba:	b084      	sub	sp, #16
 8003cbc:	af00      	add	r7, sp, #0
 8003cbe:	6078      	str	r0, [r7, #4]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8003cc0:	2300      	movs	r3, #0
 8003cc2:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode = 0U;
 8003cc4:	2300      	movs	r3, #0
 8003cc6:	81bb      	strh	r3, [r7, #12]

  /* Transfer Direction requested by Master */
  if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TRA) == RESET)
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	699b      	ldr	r3, [r3, #24]
 8003cce:	f003 0304 	and.w	r3, r3, #4
 8003cd2:	2b04      	cmp	r3, #4
 8003cd4:	d001      	beq.n	8003cda <I2C_Slave_ADDR+0x22>
  {
    TransferDirection = I2C_DIRECTION_TRANSMIT;
 8003cd6:	2301      	movs	r3, #1
 8003cd8:	73fb      	strb	r3, [r7, #15]
  }
  
  if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_DUALF) == RESET)
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	699b      	ldr	r3, [r3, #24]
 8003ce0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ce4:	2b80      	cmp	r3, #128	; 0x80
 8003ce6:	d003      	beq.n	8003cf0 <I2C_Slave_ADDR+0x38>
  {
    SlaveAddrCode = hi2c->Init.OwnAddress1;
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	68db      	ldr	r3, [r3, #12]
 8003cec:	81bb      	strh	r3, [r7, #12]
 8003cee:	e002      	b.n	8003cf6 <I2C_Slave_ADDR+0x3e>
  }
  else
  {
    SlaveAddrCode = hi2c->Init.OwnAddress2;
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	699b      	ldr	r3, [r3, #24]
 8003cf4:	81bb      	strh	r3, [r7, #12]
  }

  /* Call Slave Addr callback */
  HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8003cf6:	89ba      	ldrh	r2, [r7, #12]
 8003cf8:	7bfb      	ldrb	r3, [r7, #15]
 8003cfa:	4619      	mov	r1, r3
 8003cfc:	6878      	ldr	r0, [r7, #4]
 8003cfe:	f7ff fa25 	bl	800314c <HAL_I2C_AddrCallback>

  return HAL_OK;
 8003d02:	2300      	movs	r3, #0
}
 8003d04:	4618      	mov	r0, r3
 8003d06:	3710      	adds	r7, #16
 8003d08:	46bd      	mov	sp, r7
 8003d0a:	bd80      	pop	{r7, pc}

08003d0c <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8003d0c:	b580      	push	{r7, lr}
 8003d0e:	b084      	sub	sp, #16
 8003d10:	af00      	add	r7, sp, #0
 8003d12:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentState = hi2c->State;
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003d1a:	b2db      	uxtb	r3, r3
 8003d1c:	60fb      	str	r3, [r7, #12]
  
  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	685a      	ldr	r2, [r3, #4]
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003d2c:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8003d2e:	2300      	movs	r3, #0
 8003d30:	60bb      	str	r3, [r7, #8]
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	695b      	ldr	r3, [r3, #20]
 8003d38:	60bb      	str	r3, [r7, #8]
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	681a      	ldr	r2, [r3, #0]
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	f042 0201 	orr.w	r2, r2, #1
 8003d48:	601a      	str	r2, [r3, #0]
 8003d4a:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	681a      	ldr	r2, [r3, #0]
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003d5a:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	685b      	ldr	r3, [r3, #4]
 8003d62:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003d66:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003d6a:	d11a      	bne.n	8003da2 <I2C_Slave_STOPF+0x96>
  {
    if((hi2c->State == HAL_I2C_STATE_BUSY_RX) || (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003d72:	b2db      	uxtb	r3, r3
 8003d74:	2b22      	cmp	r3, #34	; 0x22
 8003d76:	d005      	beq.n	8003d84 <I2C_Slave_STOPF+0x78>
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003d7e:	b2db      	uxtb	r3, r3
 8003d80:	2b2a      	cmp	r3, #42	; 0x2a
 8003d82:	d107      	bne.n	8003d94 <I2C_Slave_STOPF+0x88>
    {
      hi2c->XferCount = __HAL_DMA_GET_COUNTER(hi2c->hdmarx);
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	685b      	ldr	r3, [r3, #4]
 8003d8c:	b29a      	uxth	r2, r3
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003d92:	e006      	b.n	8003da2 <I2C_Slave_STOPF+0x96>
    }
    else
    {
      hi2c->XferCount = __HAL_DMA_GET_COUNTER(hi2c->hdmatx);
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	685b      	ldr	r3, [r3, #4]
 8003d9c:	b29a      	uxth	r2, r3
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if(hi2c->XferCount != 0U)
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003da6:	b29b      	uxth	r3, r3
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	d035      	beq.n	8003e18 <I2C_Slave_STOPF+0x10c>
  {
    /* Store Last receive data if any */
    if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	695b      	ldr	r3, [r3, #20]
 8003db2:	f003 0304 	and.w	r3, r3, #4
 8003db6:	2b04      	cmp	r3, #4
 8003db8:	d110      	bne.n	8003ddc <I2C_Slave_STOPF+0xd0>
    {
      /* Read data from DR */
      (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	6918      	ldr	r0, [r3, #16]
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dc4:	1c59      	adds	r1, r3, #1
 8003dc6:	687a      	ldr	r2, [r7, #4]
 8003dc8:	6251      	str	r1, [r2, #36]	; 0x24
 8003dca:	b2c2      	uxtb	r2, r0
 8003dcc:	701a      	strb	r2, [r3, #0]
      hi2c->XferCount--;
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003dd2:	b29b      	uxth	r3, r3
 8003dd4:	3b01      	subs	r3, #1
 8003dd6:	b29a      	uxth	r2, r3
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	695b      	ldr	r3, [r3, #20]
 8003de2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003de6:	2b40      	cmp	r3, #64	; 0x40
 8003de8:	d110      	bne.n	8003e0c <I2C_Slave_STOPF+0x100>
    {
      /* Read data from DR */
      (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	6918      	ldr	r0, [r3, #16]
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003df4:	1c59      	adds	r1, r3, #1
 8003df6:	687a      	ldr	r2, [r7, #4]
 8003df8:	6251      	str	r1, [r2, #36]	; 0x24
 8003dfa:	b2c2      	uxtb	r2, r0
 8003dfc:	701a      	strb	r2, [r3, #0]
      hi2c->XferCount--;
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e02:	b29b      	uxth	r3, r3
 8003e04:	3b01      	subs	r3, #1
 8003e06:	b29a      	uxth	r2, r3
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e10:	f043 0204 	orr.w	r2, r3, #4
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	641a      	str	r2, [r3, #64]	; 0x40
  }

  if(hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	d003      	beq.n	8003e28 <I2C_Slave_STOPF+0x11c>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8003e20:	6878      	ldr	r0, [r7, #4]
 8003e22:	f000 f8ab 	bl	8003f7c <I2C_ITError>
 8003e26:	e02f      	b.n	8003e88 <I2C_Slave_STOPF+0x17c>
  }
  else
  {
    if((CurrentState == HAL_I2C_STATE_LISTEN ) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN) || \
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	2b28      	cmp	r3, #40	; 0x28
 8003e2c:	d005      	beq.n	8003e3a <I2C_Slave_STOPF+0x12e>
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	2b2a      	cmp	r3, #42	; 0x2a
 8003e32:	d002      	beq.n	8003e3a <I2C_Slave_STOPF+0x12e>
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	2b29      	cmp	r3, #41	; 0x29
 8003e38:	d111      	bne.n	8003e5e <I2C_Slave_STOPF+0x152>
       (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
    {
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	4a15      	ldr	r2, [pc, #84]	; (8003e94 <I2C_Slave_STOPF+0x188>)
 8003e3e:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	2200      	movs	r2, #0
 8003e44:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	2220      	movs	r2, #32
 8003e4a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	2200      	movs	r2, #0
 8003e52:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
      HAL_I2C_ListenCpltCallback(hi2c);
 8003e56:	6878      	ldr	r0, [r7, #4]
 8003e58:	f7ff f985 	bl	8003166 <HAL_I2C_ListenCpltCallback>
 8003e5c:	e014      	b.n	8003e88 <I2C_Slave_STOPF+0x17c>
    }
    else
    {
      if((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e62:	2b22      	cmp	r3, #34	; 0x22
 8003e64:	d002      	beq.n	8003e6c <I2C_Slave_STOPF+0x160>
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	2b22      	cmp	r3, #34	; 0x22
 8003e6a:	d10d      	bne.n	8003e88 <I2C_Slave_STOPF+0x17c>
      {
        hi2c->PreviousState = I2C_STATE_NONE;
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	2200      	movs	r2, #0
 8003e70:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	2220      	movs	r2, #32
 8003e76:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	2200      	movs	r2, #0
 8003e7e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        HAL_I2C_SlaveRxCpltCallback(hi2c);
 8003e82:	6878      	ldr	r0, [r7, #4]
 8003e84:	f7ff f959 	bl	800313a <HAL_I2C_SlaveRxCpltCallback>
      }
    }
  }
  return HAL_OK;
 8003e88:	2300      	movs	r3, #0
}
 8003e8a:	4618      	mov	r0, r3
 8003e8c:	3710      	adds	r7, #16
 8003e8e:	46bd      	mov	sp, r7
 8003e90:	bd80      	pop	{r7, pc}
 8003e92:	bf00      	nop
 8003e94:	ffff0000 	.word	0xffff0000

08003e98 <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 8003e98:	b580      	push	{r7, lr}
 8003e9a:	b084      	sub	sp, #16
 8003e9c:	af00      	add	r7, sp, #0
 8003e9e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentState       = hi2c->State;
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003ea6:	b2db      	uxtb	r3, r3
 8003ea8:	60fb      	str	r3, [r7, #12]
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003eae:	60bb      	str	r3, [r7, #8]

  if(((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 8003eb0:	68bb      	ldr	r3, [r7, #8]
 8003eb2:	2b04      	cmp	r3, #4
 8003eb4:	d002      	beq.n	8003ebc <I2C_Slave_AF+0x24>
 8003eb6:	68bb      	ldr	r3, [r7, #8]
 8003eb8:	2b08      	cmp	r3, #8
 8003eba:	d129      	bne.n	8003f10 <I2C_Slave_AF+0x78>
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	2b28      	cmp	r3, #40	; 0x28
 8003ec0:	d126      	bne.n	8003f10 <I2C_Slave_AF+0x78>
          (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	4a2c      	ldr	r2, [pc, #176]	; (8003f78 <I2C_Slave_AF+0xe0>)
 8003ec6:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	685a      	ldr	r2, [r3, #4]
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003ed6:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003ee0:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	681a      	ldr	r2, [r3, #0]
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003ef0:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	2200      	movs	r2, #0
 8003ef6:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_READY;
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	2220      	movs	r2, #32
 8003efc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	2200      	movs	r2, #0
 8003f04:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      
    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    HAL_I2C_ListenCpltCallback(hi2c);
 8003f08:	6878      	ldr	r0, [r7, #4]
 8003f0a:	f7ff f92c 	bl	8003166 <HAL_I2C_ListenCpltCallback>
 8003f0e:	e02e      	b.n	8003f6e <I2C_Slave_AF+0xd6>
  }
  else if(CurrentState == HAL_I2C_STATE_BUSY_TX)
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	2b21      	cmp	r3, #33	; 0x21
 8003f14:	d126      	bne.n	8003f64 <I2C_Slave_AF+0xcc>
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	4a17      	ldr	r2, [pc, #92]	; (8003f78 <I2C_Slave_AF+0xe0>)
 8003f1a:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	2221      	movs	r2, #33	; 0x21
 8003f20:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_READY;
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	2220      	movs	r2, #32
 8003f26:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	2200      	movs	r2, #0
 8003f2e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	685a      	ldr	r2, [r3, #4]
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003f40:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003f4a:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	681a      	ldr	r2, [r3, #0]
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003f5a:	601a      	str	r2, [r3, #0]

    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8003f5c:	6878      	ldr	r0, [r7, #4]
 8003f5e:	f7ff f8e3 	bl	8003128 <HAL_I2C_SlaveTxCpltCallback>
 8003f62:	e004      	b.n	8003f6e <I2C_Slave_AF+0xd6>
  }
  else
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003f6c:	615a      	str	r2, [r3, #20]
  }
  
  return HAL_OK;
 8003f6e:	2300      	movs	r3, #0
}
 8003f70:	4618      	mov	r0, r3
 8003f72:	3710      	adds	r7, #16
 8003f74:	46bd      	mov	sp, r7
 8003f76:	bd80      	pop	{r7, pc}
 8003f78:	ffff0000 	.word	0xffff0000

08003f7c <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8003f7c:	b580      	push	{r7, lr}
 8003f7e:	b084      	sub	sp, #16
 8003f80:	af00      	add	r7, sp, #0
 8003f82:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentState = hi2c->State;
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003f8a:	b2db      	uxtb	r3, r3
 8003f8c:	60fb      	str	r3, [r7, #12]

  if((CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	2b29      	cmp	r3, #41	; 0x29
 8003f92:	d002      	beq.n	8003f9a <I2C_ITError+0x1e>
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	2b2a      	cmp	r3, #42	; 0x2a
 8003f98:	d107      	bne.n	8003faa <I2C_ITError+0x2e>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	2200      	movs	r2, #0
 8003f9e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	2228      	movs	r2, #40	; 0x28
 8003fa4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8003fa8:	e018      	b.n	8003fdc <I2C_ITError+0x60>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if((hi2c->State != HAL_I2C_STATE_ABORT) && ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) != I2C_CR2_DMAEN))
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003fb0:	b2db      	uxtb	r3, r3
 8003fb2:	2b60      	cmp	r3, #96	; 0x60
 8003fb4:	d00b      	beq.n	8003fce <I2C_ITError+0x52>
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	685b      	ldr	r3, [r3, #4]
 8003fbc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003fc0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003fc4:	d003      	beq.n	8003fce <I2C_ITError+0x52>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	2220      	movs	r2, #32
 8003fca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	2200      	movs	r2, #0
 8003fd2:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	2200      	movs	r2, #0
 8003fd8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  }

  /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
  hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	681a      	ldr	r2, [r3, #0]
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003fea:	601a      	str	r2, [r3, #0]

  /* Abort DMA transfer */
  if((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	685b      	ldr	r3, [r3, #4]
 8003ff2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003ff6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003ffa:	d15f      	bne.n	80040bc <I2C_ITError+0x140>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	685a      	ldr	r2, [r3, #4]
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800400a:	605a      	str	r2, [r3, #4]

    if(hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004010:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8004014:	2b01      	cmp	r3, #1
 8004016:	d020      	beq.n	800405a <I2C_ITError+0xde>
    {
      /* Set the DMA Abort callback : 
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800401c:	4a57      	ldr	r2, [pc, #348]	; (800417c <I2C_ITError+0x200>)
 800401e:	635a      	str	r2, [r3, #52]	; 0x34

      if(HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004024:	4618      	mov	r0, r3
 8004026:	f7fd feff 	bl	8001e28 <HAL_DMA_Abort_IT>
 800402a:	4603      	mov	r3, r0
 800402c:	2b00      	cmp	r3, #0
 800402e:	f000 8083 	beq.w	8004138 <I2C_ITError+0x1bc>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	681a      	ldr	r2, [r3, #0]
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	f022 0201 	bic.w	r2, r2, #1
 8004040:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	2220      	movs	r2, #32
 8004046:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800404e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004050:	687a      	ldr	r2, [r7, #4]
 8004052:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004054:	4610      	mov	r0, r2
 8004056:	4798      	blx	r3
 8004058:	e06e      	b.n	8004138 <I2C_ITError+0x1bc>
    }
    else
    {
      /* Set the DMA Abort callback : 
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800405e:	4a47      	ldr	r2, [pc, #284]	; (800417c <I2C_ITError+0x200>)
 8004060:	635a      	str	r2, [r3, #52]	; 0x34

      if(HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004066:	4618      	mov	r0, r3
 8004068:	f7fd fede 	bl	8001e28 <HAL_DMA_Abort_IT>
 800406c:	4603      	mov	r3, r0
 800406e:	2b00      	cmp	r3, #0
 8004070:	d062      	beq.n	8004138 <I2C_ITError+0x1bc>
      {
        /* Store Last receive data if any */
        if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	695b      	ldr	r3, [r3, #20]
 8004078:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800407c:	2b40      	cmp	r3, #64	; 0x40
 800407e:	d109      	bne.n	8004094 <I2C_ITError+0x118>
        {
          /* Read data from DR */
          (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	6918      	ldr	r0, [r3, #16]
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800408a:	1c59      	adds	r1, r3, #1
 800408c:	687a      	ldr	r2, [r7, #4]
 800408e:	6251      	str	r1, [r2, #36]	; 0x24
 8004090:	b2c2      	uxtb	r2, r0
 8004092:	701a      	strb	r2, [r3, #0]
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	681a      	ldr	r2, [r3, #0]
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	f022 0201 	bic.w	r2, r2, #1
 80040a2:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	2220      	movs	r2, #32
 80040a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80040b2:	687a      	ldr	r2, [r7, #4]
 80040b4:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80040b6:	4610      	mov	r0, r2
 80040b8:	4798      	blx	r3
 80040ba:	e03d      	b.n	8004138 <I2C_ITError+0x1bc>
      }
    }
  }
  else if(hi2c->State == HAL_I2C_STATE_ABORT)
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80040c2:	b2db      	uxtb	r3, r3
 80040c4:	2b60      	cmp	r3, #96	; 0x60
 80040c6:	d123      	bne.n	8004110 <I2C_ITError+0x194>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	2220      	movs	r2, #32
 80040cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	2200      	movs	r2, #0
 80040d4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	695b      	ldr	r3, [r3, #20]
 80040dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80040e0:	2b40      	cmp	r3, #64	; 0x40
 80040e2:	d109      	bne.n	80040f8 <I2C_ITError+0x17c>
    {
      /* Read data from DR */
      (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	6918      	ldr	r0, [r3, #16]
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040ee:	1c59      	adds	r1, r3, #1
 80040f0:	687a      	ldr	r2, [r7, #4]
 80040f2:	6251      	str	r1, [r2, #36]	; 0x24
 80040f4:	b2c2      	uxtb	r2, r0
 80040f6:	701a      	strb	r2, [r3, #0]
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	681a      	ldr	r2, [r3, #0]
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	f022 0201 	bic.w	r2, r2, #1
 8004106:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
    HAL_I2C_AbortCpltCallback(hi2c);
 8004108:	6878      	ldr	r0, [r7, #4]
 800410a:	f7ff f850 	bl	80031ae <HAL_I2C_AbortCpltCallback>
 800410e:	e013      	b.n	8004138 <I2C_ITError+0x1bc>
  }
  else
  {
    /* Store Last receive data if any */
    if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	695b      	ldr	r3, [r3, #20]
 8004116:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800411a:	2b40      	cmp	r3, #64	; 0x40
 800411c:	d109      	bne.n	8004132 <I2C_ITError+0x1b6>
    {
      /* Read data from DR */
      (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	6918      	ldr	r0, [r3, #16]
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004128:	1c59      	adds	r1, r3, #1
 800412a:	687a      	ldr	r2, [r7, #4]
 800412c:	6251      	str	r1, [r2, #36]	; 0x24
 800412e:	b2c2      	uxtb	r2, r0
 8004130:	701a      	strb	r2, [r3, #0]
    }

    /* Call user error callback */
    HAL_I2C_ErrorCallback(hi2c);
 8004132:	6878      	ldr	r0, [r7, #4]
 8004134:	f7ff f832 	bl	800319c <HAL_I2C_ErrorCallback>
  }
  /* STOP Flag is not set after a NACK reception */
  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  if((hi2c->State == HAL_I2C_STATE_LISTEN) && ((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF))
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800413e:	b2db      	uxtb	r3, r3
 8004140:	2b28      	cmp	r3, #40	; 0x28
 8004142:	d116      	bne.n	8004172 <I2C_ITError+0x1f6>
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004148:	f003 0304 	and.w	r3, r3, #4
 800414c:	2b04      	cmp	r3, #4
 800414e:	d110      	bne.n	8004172 <I2C_ITError+0x1f6>
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	4a0b      	ldr	r2, [pc, #44]	; (8004180 <I2C_ITError+0x204>)
 8004154:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	2200      	movs	r2, #0
 800415a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_READY;
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	2220      	movs	r2, #32
 8004160:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	2200      	movs	r2, #0
 8004168:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    
    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    HAL_I2C_ListenCpltCallback(hi2c);
 800416c:	6878      	ldr	r0, [r7, #4]
 800416e:	f7fe fffa 	bl	8003166 <HAL_I2C_ListenCpltCallback>
  }
}
 8004172:	bf00      	nop
 8004174:	3710      	adds	r7, #16
 8004176:	46bd      	mov	sp, r7
 8004178:	bd80      	pop	{r7, pc}
 800417a:	bf00      	nop
 800417c:	08004419 	.word	0x08004419
 8004180:	ffff0000 	.word	0xffff0000

08004184 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8004184:	b580      	push	{r7, lr}
 8004186:	b088      	sub	sp, #32
 8004188:	af02      	add	r7, sp, #8
 800418a:	60f8      	str	r0, [r7, #12]
 800418c:	607a      	str	r2, [r7, #4]
 800418e:	603b      	str	r3, [r7, #0]
 8004190:	460b      	mov	r3, r1
 8004192:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004198:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800419a:	697b      	ldr	r3, [r7, #20]
 800419c:	2b04      	cmp	r3, #4
 800419e:	d006      	beq.n	80041ae <I2C_MasterRequestWrite+0x2a>
 80041a0:	697b      	ldr	r3, [r7, #20]
 80041a2:	2b01      	cmp	r3, #1
 80041a4:	d003      	beq.n	80041ae <I2C_MasterRequestWrite+0x2a>
 80041a6:	697b      	ldr	r3, [r7, #20]
 80041a8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80041ac:	d108      	bne.n	80041c0 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    hi2c->Instance->CR1 |= I2C_CR1_START;
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	681a      	ldr	r2, [r3, #0]
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80041bc:	601a      	str	r2, [r3, #0]
 80041be:	e00b      	b.n	80041d8 <I2C_MasterRequestWrite+0x54>
  }
  else if(hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041c4:	2b12      	cmp	r3, #18
 80041c6:	d107      	bne.n	80041d8 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    hi2c->Instance->CR1 |= I2C_CR1_START;
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	681a      	ldr	r2, [r3, #0]
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80041d6:	601a      	str	r2, [r3, #0]
  }

  /* Wait until SB flag is set */
  if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80041d8:	683b      	ldr	r3, [r7, #0]
 80041da:	9300      	str	r3, [sp, #0]
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	2200      	movs	r2, #0
 80041e0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80041e4:	68f8      	ldr	r0, [r7, #12]
 80041e6:	f000 f965 	bl	80044b4 <I2C_WaitOnFlagUntilTimeout>
 80041ea:	4603      	mov	r3, r0
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	d001      	beq.n	80041f4 <I2C_MasterRequestWrite+0x70>
  {
    return HAL_TIMEOUT;
 80041f0:	2303      	movs	r3, #3
 80041f2:	e041      	b.n	8004278 <I2C_MasterRequestWrite+0xf4>
  }

  if(hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	691b      	ldr	r3, [r3, #16]
 80041f8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80041fc:	d108      	bne.n	8004210 <I2C_MasterRequestWrite+0x8c>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80041fe:	897b      	ldrh	r3, [r7, #10]
 8004200:	b2db      	uxtb	r3, r3
 8004202:	461a      	mov	r2, r3
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800420c:	611a      	str	r2, [r3, #16]
 800420e:	e021      	b.n	8004254 <I2C_MasterRequestWrite+0xd0>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8004210:	897b      	ldrh	r3, [r7, #10]
 8004212:	11db      	asrs	r3, r3, #7
 8004214:	b2db      	uxtb	r3, r3
 8004216:	f003 0306 	and.w	r3, r3, #6
 800421a:	b2db      	uxtb	r3, r3
 800421c:	f063 030f 	orn	r3, r3, #15
 8004220:	b2da      	uxtb	r2, r3
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if(I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8004228:	683b      	ldr	r3, [r7, #0]
 800422a:	687a      	ldr	r2, [r7, #4]
 800422c:	4914      	ldr	r1, [pc, #80]	; (8004280 <I2C_MasterRequestWrite+0xfc>)
 800422e:	68f8      	ldr	r0, [r7, #12]
 8004230:	f000 f991 	bl	8004556 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004234:	4603      	mov	r3, r0
 8004236:	2b00      	cmp	r3, #0
 8004238:	d007      	beq.n	800424a <I2C_MasterRequestWrite+0xc6>
    {
      if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800423e:	2b04      	cmp	r3, #4
 8004240:	d101      	bne.n	8004246 <I2C_MasterRequestWrite+0xc2>
      {
        return HAL_ERROR;
 8004242:	2301      	movs	r3, #1
 8004244:	e018      	b.n	8004278 <I2C_MasterRequestWrite+0xf4>
      }
      else
      {
        return HAL_TIMEOUT;
 8004246:	2303      	movs	r3, #3
 8004248:	e016      	b.n	8004278 <I2C_MasterRequestWrite+0xf4>
      }
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800424a:	897b      	ldrh	r3, [r7, #10]
 800424c:	b2da      	uxtb	r2, r3
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if(I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004254:	683b      	ldr	r3, [r7, #0]
 8004256:	687a      	ldr	r2, [r7, #4]
 8004258:	490a      	ldr	r1, [pc, #40]	; (8004284 <I2C_MasterRequestWrite+0x100>)
 800425a:	68f8      	ldr	r0, [r7, #12]
 800425c:	f000 f97b 	bl	8004556 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004260:	4603      	mov	r3, r0
 8004262:	2b00      	cmp	r3, #0
 8004264:	d007      	beq.n	8004276 <I2C_MasterRequestWrite+0xf2>
  {
    if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800426a:	2b04      	cmp	r3, #4
 800426c:	d101      	bne.n	8004272 <I2C_MasterRequestWrite+0xee>
    {
      return HAL_ERROR;
 800426e:	2301      	movs	r3, #1
 8004270:	e002      	b.n	8004278 <I2C_MasterRequestWrite+0xf4>
    }
    else
    {
      return HAL_TIMEOUT;
 8004272:	2303      	movs	r3, #3
 8004274:	e000      	b.n	8004278 <I2C_MasterRequestWrite+0xf4>
    }
  }

  return HAL_OK;
 8004276:	2300      	movs	r3, #0
}
 8004278:	4618      	mov	r0, r3
 800427a:	3718      	adds	r7, #24
 800427c:	46bd      	mov	sp, r7
 800427e:	bd80      	pop	{r7, pc}
 8004280:	00010008 	.word	0x00010008
 8004284:	00010002 	.word	0x00010002

08004288 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8004288:	b580      	push	{r7, lr}
 800428a:	b088      	sub	sp, #32
 800428c:	af02      	add	r7, sp, #8
 800428e:	60f8      	str	r0, [r7, #12]
 8004290:	607a      	str	r2, [r7, #4]
 8004292:	603b      	str	r3, [r7, #0]
 8004294:	460b      	mov	r3, r1
 8004296:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800429c:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  hi2c->Instance->CR1 |= I2C_CR1_ACK;
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	681a      	ldr	r2, [r3, #0]
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80042ac:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80042ae:	697b      	ldr	r3, [r7, #20]
 80042b0:	2b04      	cmp	r3, #4
 80042b2:	d006      	beq.n	80042c2 <I2C_MasterRequestRead+0x3a>
 80042b4:	697b      	ldr	r3, [r7, #20]
 80042b6:	2b01      	cmp	r3, #1
 80042b8:	d003      	beq.n	80042c2 <I2C_MasterRequestRead+0x3a>
 80042ba:	697b      	ldr	r3, [r7, #20]
 80042bc:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80042c0:	d108      	bne.n	80042d4 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    hi2c->Instance->CR1 |= I2C_CR1_START;
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	681a      	ldr	r2, [r3, #0]
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80042d0:	601a      	str	r2, [r3, #0]
 80042d2:	e00b      	b.n	80042ec <I2C_MasterRequestRead+0x64>
  }
  else if(hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042d8:	2b11      	cmp	r3, #17
 80042da:	d107      	bne.n	80042ec <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    hi2c->Instance->CR1 |= I2C_CR1_START;
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	681a      	ldr	r2, [r3, #0]
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80042ea:	601a      	str	r2, [r3, #0]
  }

  /* Wait until SB flag is set */
  if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80042ec:	683b      	ldr	r3, [r7, #0]
 80042ee:	9300      	str	r3, [sp, #0]
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	2200      	movs	r2, #0
 80042f4:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80042f8:	68f8      	ldr	r0, [r7, #12]
 80042fa:	f000 f8db 	bl	80044b4 <I2C_WaitOnFlagUntilTimeout>
 80042fe:	4603      	mov	r3, r0
 8004300:	2b00      	cmp	r3, #0
 8004302:	d001      	beq.n	8004308 <I2C_MasterRequestRead+0x80>
  {
    return HAL_TIMEOUT;
 8004304:	2303      	movs	r3, #3
 8004306:	e07f      	b.n	8004408 <I2C_MasterRequestRead+0x180>
  }

  if(hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	691b      	ldr	r3, [r3, #16]
 800430c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004310:	d108      	bne.n	8004324 <I2C_MasterRequestRead+0x9c>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8004312:	897b      	ldrh	r3, [r7, #10]
 8004314:	b2db      	uxtb	r3, r3
 8004316:	f043 0301 	orr.w	r3, r3, #1
 800431a:	b2da      	uxtb	r2, r3
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	611a      	str	r2, [r3, #16]
 8004322:	e05f      	b.n	80043e4 <I2C_MasterRequestRead+0x15c>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8004324:	897b      	ldrh	r3, [r7, #10]
 8004326:	11db      	asrs	r3, r3, #7
 8004328:	b2db      	uxtb	r3, r3
 800432a:	f003 0306 	and.w	r3, r3, #6
 800432e:	b2db      	uxtb	r3, r3
 8004330:	f063 030f 	orn	r3, r3, #15
 8004334:	b2da      	uxtb	r2, r3
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if(I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800433c:	683b      	ldr	r3, [r7, #0]
 800433e:	687a      	ldr	r2, [r7, #4]
 8004340:	4933      	ldr	r1, [pc, #204]	; (8004410 <I2C_MasterRequestRead+0x188>)
 8004342:	68f8      	ldr	r0, [r7, #12]
 8004344:	f000 f907 	bl	8004556 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004348:	4603      	mov	r3, r0
 800434a:	2b00      	cmp	r3, #0
 800434c:	d007      	beq.n	800435e <I2C_MasterRequestRead+0xd6>
    {
      if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004352:	2b04      	cmp	r3, #4
 8004354:	d101      	bne.n	800435a <I2C_MasterRequestRead+0xd2>
      {
        return HAL_ERROR;
 8004356:	2301      	movs	r3, #1
 8004358:	e056      	b.n	8004408 <I2C_MasterRequestRead+0x180>
      }
      else
      {
        return HAL_TIMEOUT;
 800435a:	2303      	movs	r3, #3
 800435c:	e054      	b.n	8004408 <I2C_MasterRequestRead+0x180>
      }
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800435e:	897b      	ldrh	r3, [r7, #10]
 8004360:	b2da      	uxtb	r2, r3
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if(I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004368:	683b      	ldr	r3, [r7, #0]
 800436a:	687a      	ldr	r2, [r7, #4]
 800436c:	4929      	ldr	r1, [pc, #164]	; (8004414 <I2C_MasterRequestRead+0x18c>)
 800436e:	68f8      	ldr	r0, [r7, #12]
 8004370:	f000 f8f1 	bl	8004556 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004374:	4603      	mov	r3, r0
 8004376:	2b00      	cmp	r3, #0
 8004378:	d007      	beq.n	800438a <I2C_MasterRequestRead+0x102>
    {
      if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800437e:	2b04      	cmp	r3, #4
 8004380:	d101      	bne.n	8004386 <I2C_MasterRequestRead+0xfe>
      {
        return HAL_ERROR;
 8004382:	2301      	movs	r3, #1
 8004384:	e040      	b.n	8004408 <I2C_MasterRequestRead+0x180>
      }
      else
      {
        return HAL_TIMEOUT;
 8004386:	2303      	movs	r3, #3
 8004388:	e03e      	b.n	8004408 <I2C_MasterRequestRead+0x180>
      }
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800438a:	2300      	movs	r3, #0
 800438c:	613b      	str	r3, [r7, #16]
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	695b      	ldr	r3, [r3, #20]
 8004394:	613b      	str	r3, [r7, #16]
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	699b      	ldr	r3, [r3, #24]
 800439c:	613b      	str	r3, [r7, #16]
 800439e:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    hi2c->Instance->CR1 |= I2C_CR1_START;
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	681a      	ldr	r2, [r3, #0]
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80043ae:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80043b0:	683b      	ldr	r3, [r7, #0]
 80043b2:	9300      	str	r3, [sp, #0]
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	2200      	movs	r2, #0
 80043b8:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80043bc:	68f8      	ldr	r0, [r7, #12]
 80043be:	f000 f879 	bl	80044b4 <I2C_WaitOnFlagUntilTimeout>
 80043c2:	4603      	mov	r3, r0
 80043c4:	2b00      	cmp	r3, #0
 80043c6:	d001      	beq.n	80043cc <I2C_MasterRequestRead+0x144>
    {
      return HAL_TIMEOUT;
 80043c8:	2303      	movs	r3, #3
 80043ca:	e01d      	b.n	8004408 <I2C_MasterRequestRead+0x180>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 80043cc:	897b      	ldrh	r3, [r7, #10]
 80043ce:	11db      	asrs	r3, r3, #7
 80043d0:	b2db      	uxtb	r3, r3
 80043d2:	f003 0306 	and.w	r3, r3, #6
 80043d6:	b2db      	uxtb	r3, r3
 80043d8:	f063 030e 	orn	r3, r3, #14
 80043dc:	b2da      	uxtb	r2, r3
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if(I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80043e4:	683b      	ldr	r3, [r7, #0]
 80043e6:	687a      	ldr	r2, [r7, #4]
 80043e8:	490a      	ldr	r1, [pc, #40]	; (8004414 <I2C_MasterRequestRead+0x18c>)
 80043ea:	68f8      	ldr	r0, [r7, #12]
 80043ec:	f000 f8b3 	bl	8004556 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80043f0:	4603      	mov	r3, r0
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	d007      	beq.n	8004406 <I2C_MasterRequestRead+0x17e>
  {
    if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043fa:	2b04      	cmp	r3, #4
 80043fc:	d101      	bne.n	8004402 <I2C_MasterRequestRead+0x17a>
    {
      return HAL_ERROR;
 80043fe:	2301      	movs	r3, #1
 8004400:	e002      	b.n	8004408 <I2C_MasterRequestRead+0x180>
    }
    else
    {
      return HAL_TIMEOUT;
 8004402:	2303      	movs	r3, #3
 8004404:	e000      	b.n	8004408 <I2C_MasterRequestRead+0x180>
    }
  }

  return HAL_OK;
 8004406:	2300      	movs	r3, #0
}
 8004408:	4618      	mov	r0, r3
 800440a:	3718      	adds	r7, #24
 800440c:	46bd      	mov	sp, r7
 800440e:	bd80      	pop	{r7, pc}
 8004410:	00010008 	.word	0x00010008
 8004414:	00010002 	.word	0x00010002

08004418 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma: DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8004418:	b580      	push	{r7, lr}
 800441a:	b084      	sub	sp, #16
 800441c:	af00      	add	r7, sp, #0
 800441e:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef* hi2c = ( I2C_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004424:	60fb      	str	r3, [r7, #12]
  
  /* Disable Acknowledge */
  hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	681a      	ldr	r2, [r3, #0]
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004434:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	2200      	movs	r2, #0
 800443a:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  hi2c->hdmatx->XferAbortCallback = NULL;
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004440:	2200      	movs	r2, #0
 8004442:	635a      	str	r2, [r3, #52]	; 0x34
  hi2c->hdmarx->XferAbortCallback = NULL;
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004448:	2200      	movs	r2, #0
 800444a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Check if come from abort from user */
  if(hi2c->State == HAL_I2C_STATE_ABORT)
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004452:	b2db      	uxtb	r3, r3
 8004454:	2b60      	cmp	r3, #96	; 0x60
 8004456:	d116      	bne.n	8004486 <I2C_DMAAbort+0x6e>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	2220      	movs	r2, #32
 800445c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	2200      	movs	r2, #0
 8004464:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	2200      	movs	r2, #0
 800446c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	681a      	ldr	r2, [r3, #0]
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	f022 0201 	bic.w	r2, r2, #1
 800447c:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
    HAL_I2C_AbortCpltCallback(hi2c);
 800447e:	68f8      	ldr	r0, [r7, #12]
 8004480:	f7fe fe95 	bl	80031ae <HAL_I2C_AbortCpltCallback>
    __HAL_I2C_DISABLE(hi2c);

    /* Call the corresponding callback to inform upper layer of End of Transfer */
    HAL_I2C_ErrorCallback(hi2c);
  }
}
 8004484:	e012      	b.n	80044ac <I2C_DMAAbort+0x94>
    hi2c->State = HAL_I2C_STATE_READY;
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	2220      	movs	r2, #32
 800448a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	2200      	movs	r2, #0
 8004492:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    __HAL_I2C_DISABLE(hi2c);
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	681a      	ldr	r2, [r3, #0]
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	f022 0201 	bic.w	r2, r2, #1
 80044a4:	601a      	str	r2, [r3, #0]
    HAL_I2C_ErrorCallback(hi2c);
 80044a6:	68f8      	ldr	r0, [r7, #12]
 80044a8:	f7fe fe78 	bl	800319c <HAL_I2C_ErrorCallback>
}
 80044ac:	bf00      	nop
 80044ae:	3710      	adds	r7, #16
 80044b0:	46bd      	mov	sp, r7
 80044b2:	bd80      	pop	{r7, pc}

080044b4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80044b4:	b580      	push	{r7, lr}
 80044b6:	b084      	sub	sp, #16
 80044b8:	af00      	add	r7, sp, #0
 80044ba:	60f8      	str	r0, [r7, #12]
 80044bc:	60b9      	str	r1, [r7, #8]
 80044be:	603b      	str	r3, [r7, #0]
 80044c0:	4613      	mov	r3, r2
 80044c2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while((__HAL_I2C_GET_FLAG(hi2c, Flag) ? SET : RESET) == Status) 
 80044c4:	e01f      	b.n	8004506 <I2C_WaitOnFlagUntilTimeout+0x52>
  {
    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
 80044c6:	683b      	ldr	r3, [r7, #0]
 80044c8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80044cc:	d01b      	beq.n	8004506 <I2C_WaitOnFlagUntilTimeout+0x52>
    {
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 80044ce:	683b      	ldr	r3, [r7, #0]
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	d007      	beq.n	80044e4 <I2C_WaitOnFlagUntilTimeout+0x30>
 80044d4:	f7fc fd34 	bl	8000f40 <HAL_GetTick>
 80044d8:	4602      	mov	r2, r0
 80044da:	69bb      	ldr	r3, [r7, #24]
 80044dc:	1ad3      	subs	r3, r2, r3
 80044de:	683a      	ldr	r2, [r7, #0]
 80044e0:	429a      	cmp	r2, r3
 80044e2:	d210      	bcs.n	8004506 <I2C_WaitOnFlagUntilTimeout+0x52>
      {
        hi2c->PreviousState = I2C_STATE_NONE;
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	2200      	movs	r2, #0
 80044e8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State= HAL_I2C_STATE_READY;
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	2220      	movs	r2, #32
 80044ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	2200      	movs	r2, #0
 80044f6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	2200      	movs	r2, #0
 80044fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        
        return HAL_TIMEOUT;
 8004502:	2303      	movs	r3, #3
 8004504:	e023      	b.n	800454e <I2C_WaitOnFlagUntilTimeout+0x9a>
  while((__HAL_I2C_GET_FLAG(hi2c, Flag) ? SET : RESET) == Status) 
 8004506:	68bb      	ldr	r3, [r7, #8]
 8004508:	0c1b      	lsrs	r3, r3, #16
 800450a:	b2db      	uxtb	r3, r3
 800450c:	2b01      	cmp	r3, #1
 800450e:	d10d      	bne.n	800452c <I2C_WaitOnFlagUntilTimeout+0x78>
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	695b      	ldr	r3, [r3, #20]
 8004516:	43da      	mvns	r2, r3
 8004518:	68bb      	ldr	r3, [r7, #8]
 800451a:	4013      	ands	r3, r2
 800451c:	b29b      	uxth	r3, r3
 800451e:	2b00      	cmp	r3, #0
 8004520:	bf0c      	ite	eq
 8004522:	2301      	moveq	r3, #1
 8004524:	2300      	movne	r3, #0
 8004526:	b2db      	uxtb	r3, r3
 8004528:	461a      	mov	r2, r3
 800452a:	e00c      	b.n	8004546 <I2C_WaitOnFlagUntilTimeout+0x92>
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	699b      	ldr	r3, [r3, #24]
 8004532:	43da      	mvns	r2, r3
 8004534:	68bb      	ldr	r3, [r7, #8]
 8004536:	4013      	ands	r3, r2
 8004538:	b29b      	uxth	r3, r3
 800453a:	2b00      	cmp	r3, #0
 800453c:	bf0c      	ite	eq
 800453e:	2301      	moveq	r3, #1
 8004540:	2300      	movne	r3, #0
 8004542:	b2db      	uxtb	r3, r3
 8004544:	461a      	mov	r2, r3
 8004546:	79fb      	ldrb	r3, [r7, #7]
 8004548:	429a      	cmp	r2, r3
 800454a:	d0bc      	beq.n	80044c6 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  
  return HAL_OK;
 800454c:	2300      	movs	r3, #0
}
 800454e:	4618      	mov	r0, r3
 8004550:	3710      	adds	r7, #16
 8004552:	46bd      	mov	sp, r7
 8004554:	bd80      	pop	{r7, pc}

08004556 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8004556:	b580      	push	{r7, lr}
 8004558:	b084      	sub	sp, #16
 800455a:	af00      	add	r7, sp, #0
 800455c:	60f8      	str	r0, [r7, #12]
 800455e:	60b9      	str	r1, [r7, #8]
 8004560:	607a      	str	r2, [r7, #4]
 8004562:	603b      	str	r3, [r7, #0]
  while(__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004564:	e040      	b.n	80045e8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x92>
  {
    if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004566:	68fb      	ldr	r3, [r7, #12]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	695b      	ldr	r3, [r3, #20]
 800456c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004570:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004574:	d11c      	bne.n	80045b0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x5a>
    {
      /* Generate Stop */
      hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	681a      	ldr	r2, [r3, #0]
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004584:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800458e:	615a      	str	r2, [r3, #20]

      hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	2204      	movs	r2, #4
 8004594:	641a      	str	r2, [r3, #64]	; 0x40
      hi2c->PreviousState = I2C_STATE_NONE;
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	2200      	movs	r2, #0
 800459a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State= HAL_I2C_STATE_READY;
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	2220      	movs	r2, #32
 80045a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	2200      	movs	r2, #0
 80045a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80045ac:	2301      	movs	r3, #1
 80045ae:	e03c      	b.n	800462a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd4>
    }

    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80045b6:	d017      	beq.n	80045e8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x92>
    {
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	d007      	beq.n	80045ce <I2C_WaitOnMasterAddressFlagUntilTimeout+0x78>
 80045be:	f7fc fcbf 	bl	8000f40 <HAL_GetTick>
 80045c2:	4602      	mov	r2, r0
 80045c4:	683b      	ldr	r3, [r7, #0]
 80045c6:	1ad3      	subs	r3, r2, r3
 80045c8:	687a      	ldr	r2, [r7, #4]
 80045ca:	429a      	cmp	r2, r3
 80045cc:	d20c      	bcs.n	80045e8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x92>
      {
        hi2c->PreviousState = I2C_STATE_NONE;
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	2200      	movs	r2, #0
 80045d2:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State= HAL_I2C_STATE_READY;
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	2220      	movs	r2, #32
 80045d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	2200      	movs	r2, #0
 80045e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80045e4:	2303      	movs	r3, #3
 80045e6:	e020      	b.n	800462a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd4>
  while(__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80045e8:	68bb      	ldr	r3, [r7, #8]
 80045ea:	0c1b      	lsrs	r3, r3, #16
 80045ec:	b2db      	uxtb	r3, r3
 80045ee:	2b01      	cmp	r3, #1
 80045f0:	d10c      	bne.n	800460c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb6>
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	695b      	ldr	r3, [r3, #20]
 80045f8:	43da      	mvns	r2, r3
 80045fa:	68bb      	ldr	r3, [r7, #8]
 80045fc:	4013      	ands	r3, r2
 80045fe:	b29b      	uxth	r3, r3
 8004600:	2b00      	cmp	r3, #0
 8004602:	bf14      	ite	ne
 8004604:	2301      	movne	r3, #1
 8004606:	2300      	moveq	r3, #0
 8004608:	b2db      	uxtb	r3, r3
 800460a:	e00b      	b.n	8004624 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xce>
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	699b      	ldr	r3, [r3, #24]
 8004612:	43da      	mvns	r2, r3
 8004614:	68bb      	ldr	r3, [r7, #8]
 8004616:	4013      	ands	r3, r2
 8004618:	b29b      	uxth	r3, r3
 800461a:	2b00      	cmp	r3, #0
 800461c:	bf14      	ite	ne
 800461e:	2301      	movne	r3, #1
 8004620:	2300      	moveq	r3, #0
 8004622:	b2db      	uxtb	r3, r3
 8004624:	2b00      	cmp	r3, #0
 8004626:	d19e      	bne.n	8004566 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8004628:	2300      	movs	r3, #0
}
 800462a:	4618      	mov	r0, r3
 800462c:	3710      	adds	r7, #16
 800462e:	46bd      	mov	sp, r7
 8004630:	bd80      	pop	{r7, pc}

08004632 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{    
 8004632:	b580      	push	{r7, lr}
 8004634:	b084      	sub	sp, #16
 8004636:	af00      	add	r7, sp, #0
 8004638:	60f8      	str	r0, [r7, #12]
 800463a:	60b9      	str	r1, [r7, #8]
 800463c:	607a      	str	r2, [r7, #4]
  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800463e:	e029      	b.n	8004694 <I2C_WaitOnTXEFlagUntilTimeout+0x62>
  {
    /* Check if a NACK is detected */
    if(I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004640:	68f8      	ldr	r0, [r7, #12]
 8004642:	f000 f8ba 	bl	80047ba <I2C_IsAcknowledgeFailed>
 8004646:	4603      	mov	r3, r0
 8004648:	2b00      	cmp	r3, #0
 800464a:	d001      	beq.n	8004650 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800464c:	2301      	movs	r3, #1
 800464e:	e029      	b.n	80046a4 <I2C_WaitOnTXEFlagUntilTimeout+0x72>
    }
		
    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
 8004650:	68bb      	ldr	r3, [r7, #8]
 8004652:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004656:	d01d      	beq.n	8004694 <I2C_WaitOnTXEFlagUntilTimeout+0x62>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 8004658:	68bb      	ldr	r3, [r7, #8]
 800465a:	2b00      	cmp	r3, #0
 800465c:	d007      	beq.n	800466e <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800465e:	f7fc fc6f 	bl	8000f40 <HAL_GetTick>
 8004662:	4602      	mov	r2, r0
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	1ad3      	subs	r3, r2, r3
 8004668:	68ba      	ldr	r2, [r7, #8]
 800466a:	429a      	cmp	r2, r3
 800466c:	d212      	bcs.n	8004694 <I2C_WaitOnTXEFlagUntilTimeout+0x62>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004672:	f043 0220 	orr.w	r2, r3, #32
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	641a      	str	r2, [r3, #64]	; 0x40
        hi2c->PreviousState = I2C_STATE_NONE;
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	2200      	movs	r2, #0
 800467e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State= HAL_I2C_STATE_READY;
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	2220      	movs	r2, #32
 8004684:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	2200      	movs	r2, #0
 800468c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8004690:	2303      	movs	r3, #3
 8004692:	e007      	b.n	80046a4 <I2C_WaitOnTXEFlagUntilTimeout+0x72>
  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	695b      	ldr	r3, [r3, #20]
 800469a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800469e:	2b80      	cmp	r3, #128	; 0x80
 80046a0:	d1ce      	bne.n	8004640 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;      
 80046a2:	2300      	movs	r3, #0
}
 80046a4:	4618      	mov	r0, r3
 80046a6:	3710      	adds	r7, #16
 80046a8:	46bd      	mov	sp, r7
 80046aa:	bd80      	pop	{r7, pc}

080046ac <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{  
 80046ac:	b580      	push	{r7, lr}
 80046ae:	b084      	sub	sp, #16
 80046b0:	af00      	add	r7, sp, #0
 80046b2:	60f8      	str	r0, [r7, #12]
 80046b4:	60b9      	str	r1, [r7, #8]
 80046b6:	607a      	str	r2, [r7, #4]
  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80046b8:	e029      	b.n	800470e <I2C_WaitOnBTFFlagUntilTimeout+0x62>
  {
    /* Check if a NACK is detected */
    if(I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80046ba:	68f8      	ldr	r0, [r7, #12]
 80046bc:	f000 f87d 	bl	80047ba <I2C_IsAcknowledgeFailed>
 80046c0:	4603      	mov	r3, r0
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	d001      	beq.n	80046ca <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80046c6:	2301      	movs	r3, #1
 80046c8:	e029      	b.n	800471e <I2C_WaitOnBTFFlagUntilTimeout+0x72>
    }

    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
 80046ca:	68bb      	ldr	r3, [r7, #8]
 80046cc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80046d0:	d01d      	beq.n	800470e <I2C_WaitOnBTFFlagUntilTimeout+0x62>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 80046d2:	68bb      	ldr	r3, [r7, #8]
 80046d4:	2b00      	cmp	r3, #0
 80046d6:	d007      	beq.n	80046e8 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80046d8:	f7fc fc32 	bl	8000f40 <HAL_GetTick>
 80046dc:	4602      	mov	r2, r0
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	1ad3      	subs	r3, r2, r3
 80046e2:	68ba      	ldr	r2, [r7, #8]
 80046e4:	429a      	cmp	r2, r3
 80046e6:	d212      	bcs.n	800470e <I2C_WaitOnBTFFlagUntilTimeout+0x62>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046ec:	f043 0220 	orr.w	r2, r3, #32
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	641a      	str	r2, [r3, #64]	; 0x40
        hi2c->PreviousState = I2C_STATE_NONE;
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	2200      	movs	r2, #0
 80046f8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State= HAL_I2C_STATE_READY;
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	2220      	movs	r2, #32
 80046fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	2200      	movs	r2, #0
 8004706:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800470a:	2303      	movs	r3, #3
 800470c:	e007      	b.n	800471e <I2C_WaitOnBTFFlagUntilTimeout+0x72>
  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	695b      	ldr	r3, [r3, #20]
 8004714:	f003 0304 	and.w	r3, r3, #4
 8004718:	2b04      	cmp	r3, #4
 800471a:	d1ce      	bne.n	80046ba <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800471c:	2300      	movs	r3, #0
}
 800471e:	4618      	mov	r0, r3
 8004720:	3710      	adds	r7, #16
 8004722:	46bd      	mov	sp, r7
 8004724:	bd80      	pop	{r7, pc}

08004726 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{  
 8004726:	b580      	push	{r7, lr}
 8004728:	b084      	sub	sp, #16
 800472a:	af00      	add	r7, sp, #0
 800472c:	60f8      	str	r0, [r7, #12]
 800472e:	60b9      	str	r1, [r7, #8]
 8004730:	607a      	str	r2, [r7, #4]

  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004732:	e036      	b.n	80047a2 <I2C_WaitOnRXNEFlagUntilTimeout+0x7c>
  {
    /* Check if a STOPF is detected */
    if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	695b      	ldr	r3, [r3, #20]
 800473a:	f003 0310 	and.w	r3, r3, #16
 800473e:	2b10      	cmp	r3, #16
 8004740:	d114      	bne.n	800476c <I2C_WaitOnRXNEFlagUntilTimeout+0x46>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	f06f 0210 	mvn.w	r2, #16
 800474a:	615a      	str	r2, [r3, #20]

      hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	2200      	movs	r2, #0
 8004750:	641a      	str	r2, [r3, #64]	; 0x40
      hi2c->PreviousState = I2C_STATE_NONE;
 8004752:	68fb      	ldr	r3, [r7, #12]
 8004754:	2200      	movs	r2, #0
 8004756:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State= HAL_I2C_STATE_READY;
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	2220      	movs	r2, #32
 800475c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	2200      	movs	r2, #0
 8004764:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004768:	2301      	movs	r3, #1
 800476a:	e022      	b.n	80047b2 <I2C_WaitOnRXNEFlagUntilTimeout+0x8c>
    }

    /* Check for the Timeout */
    if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 800476c:	68bb      	ldr	r3, [r7, #8]
 800476e:	2b00      	cmp	r3, #0
 8004770:	d007      	beq.n	8004782 <I2C_WaitOnRXNEFlagUntilTimeout+0x5c>
 8004772:	f7fc fbe5 	bl	8000f40 <HAL_GetTick>
 8004776:	4602      	mov	r2, r0
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	1ad3      	subs	r3, r2, r3
 800477c:	68ba      	ldr	r2, [r7, #8]
 800477e:	429a      	cmp	r2, r3
 8004780:	d20f      	bcs.n	80047a2 <I2C_WaitOnRXNEFlagUntilTimeout+0x7c>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004786:	f043 0220 	orr.w	r2, r3, #32
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	641a      	str	r2, [r3, #64]	; 0x40
      hi2c->State= HAL_I2C_STATE_READY;
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	2220      	movs	r2, #32
 8004792:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	2200      	movs	r2, #0
 800479a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_TIMEOUT;
 800479e:	2303      	movs	r3, #3
 80047a0:	e007      	b.n	80047b2 <I2C_WaitOnRXNEFlagUntilTimeout+0x8c>
  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	695b      	ldr	r3, [r3, #20]
 80047a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80047ac:	2b40      	cmp	r3, #64	; 0x40
 80047ae:	d1c1      	bne.n	8004734 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80047b0:	2300      	movs	r3, #0
}
 80047b2:	4618      	mov	r0, r3
 80047b4:	3710      	adds	r7, #16
 80047b6:	46bd      	mov	sp, r7
 80047b8:	bd80      	pop	{r7, pc}

080047ba <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80047ba:	b480      	push	{r7}
 80047bc:	b083      	sub	sp, #12
 80047be:	af00      	add	r7, sp, #0
 80047c0:	6078      	str	r0, [r7, #4]
  if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	695b      	ldr	r3, [r3, #20]
 80047c8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80047cc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80047d0:	d114      	bne.n	80047fc <I2C_IsAcknowledgeFailed+0x42>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80047da:	615a      	str	r2, [r3, #20]

    hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	2204      	movs	r2, #4
 80047e0:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->PreviousState = I2C_STATE_NONE;
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	2200      	movs	r2, #0
 80047e6:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State= HAL_I2C_STATE_READY;
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	2220      	movs	r2, #32
 80047ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	2200      	movs	r2, #0
 80047f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80047f8:	2301      	movs	r3, #1
 80047fa:	e000      	b.n	80047fe <I2C_IsAcknowledgeFailed+0x44>
  }
  return HAL_OK;
 80047fc:	2300      	movs	r3, #0
}
 80047fe:	4618      	mov	r0, r3
 8004800:	370c      	adds	r7, #12
 8004802:	46bd      	mov	sp, r7
 8004804:	bc80      	pop	{r7}
 8004806:	4770      	bx	lr

08004808 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004808:	b580      	push	{r7, lr}
 800480a:	b086      	sub	sp, #24
 800480c:	af00      	add	r7, sp, #0
 800480e:	6078      	str	r0, [r7, #4]
   uint32_t tickstart = 0U;
 8004810:	2300      	movs	r3, #0
 8004812:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	f003 0301 	and.w	r3, r3, #1
 800481c:	2b00      	cmp	r3, #0
 800481e:	f000 8087 	beq.w	8004930 <HAL_RCC_OscConfig+0x128>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
        
    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8004822:	4b92      	ldr	r3, [pc, #584]	; (8004a6c <HAL_RCC_OscConfig+0x264>)
 8004824:	685b      	ldr	r3, [r3, #4]
 8004826:	f003 030c 	and.w	r3, r3, #12
 800482a:	2b04      	cmp	r3, #4
 800482c:	d00c      	beq.n	8004848 <HAL_RCC_OscConfig+0x40>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800482e:	4b8f      	ldr	r3, [pc, #572]	; (8004a6c <HAL_RCC_OscConfig+0x264>)
 8004830:	685b      	ldr	r3, [r3, #4]
 8004832:	f003 030c 	and.w	r3, r3, #12
 8004836:	2b08      	cmp	r3, #8
 8004838:	d112      	bne.n	8004860 <HAL_RCC_OscConfig+0x58>
 800483a:	4b8c      	ldr	r3, [pc, #560]	; (8004a6c <HAL_RCC_OscConfig+0x264>)
 800483c:	685b      	ldr	r3, [r3, #4]
 800483e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004842:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004846:	d10b      	bne.n	8004860 <HAL_RCC_OscConfig+0x58>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004848:	4b88      	ldr	r3, [pc, #544]	; (8004a6c <HAL_RCC_OscConfig+0x264>)
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004850:	2b00      	cmp	r3, #0
 8004852:	d06c      	beq.n	800492e <HAL_RCC_OscConfig+0x126>
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	685b      	ldr	r3, [r3, #4]
 8004858:	2b00      	cmp	r3, #0
 800485a:	d168      	bne.n	800492e <HAL_RCC_OscConfig+0x126>
      {
        return HAL_ERROR;
 800485c:	2301      	movs	r3, #1
 800485e:	e22d      	b.n	8004cbc <HAL_RCC_OscConfig+0x4b4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	685b      	ldr	r3, [r3, #4]
 8004864:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004868:	d106      	bne.n	8004878 <HAL_RCC_OscConfig+0x70>
 800486a:	4b80      	ldr	r3, [pc, #512]	; (8004a6c <HAL_RCC_OscConfig+0x264>)
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	4a7f      	ldr	r2, [pc, #508]	; (8004a6c <HAL_RCC_OscConfig+0x264>)
 8004870:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004874:	6013      	str	r3, [r2, #0]
 8004876:	e02e      	b.n	80048d6 <HAL_RCC_OscConfig+0xce>
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	685b      	ldr	r3, [r3, #4]
 800487c:	2b00      	cmp	r3, #0
 800487e:	d10c      	bne.n	800489a <HAL_RCC_OscConfig+0x92>
 8004880:	4b7a      	ldr	r3, [pc, #488]	; (8004a6c <HAL_RCC_OscConfig+0x264>)
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	4a79      	ldr	r2, [pc, #484]	; (8004a6c <HAL_RCC_OscConfig+0x264>)
 8004886:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800488a:	6013      	str	r3, [r2, #0]
 800488c:	4b77      	ldr	r3, [pc, #476]	; (8004a6c <HAL_RCC_OscConfig+0x264>)
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	4a76      	ldr	r2, [pc, #472]	; (8004a6c <HAL_RCC_OscConfig+0x264>)
 8004892:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004896:	6013      	str	r3, [r2, #0]
 8004898:	e01d      	b.n	80048d6 <HAL_RCC_OscConfig+0xce>
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	685b      	ldr	r3, [r3, #4]
 800489e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80048a2:	d10c      	bne.n	80048be <HAL_RCC_OscConfig+0xb6>
 80048a4:	4b71      	ldr	r3, [pc, #452]	; (8004a6c <HAL_RCC_OscConfig+0x264>)
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	4a70      	ldr	r2, [pc, #448]	; (8004a6c <HAL_RCC_OscConfig+0x264>)
 80048aa:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80048ae:	6013      	str	r3, [r2, #0]
 80048b0:	4b6e      	ldr	r3, [pc, #440]	; (8004a6c <HAL_RCC_OscConfig+0x264>)
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	4a6d      	ldr	r2, [pc, #436]	; (8004a6c <HAL_RCC_OscConfig+0x264>)
 80048b6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80048ba:	6013      	str	r3, [r2, #0]
 80048bc:	e00b      	b.n	80048d6 <HAL_RCC_OscConfig+0xce>
 80048be:	4b6b      	ldr	r3, [pc, #428]	; (8004a6c <HAL_RCC_OscConfig+0x264>)
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	4a6a      	ldr	r2, [pc, #424]	; (8004a6c <HAL_RCC_OscConfig+0x264>)
 80048c4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80048c8:	6013      	str	r3, [r2, #0]
 80048ca:	4b68      	ldr	r3, [pc, #416]	; (8004a6c <HAL_RCC_OscConfig+0x264>)
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	4a67      	ldr	r2, [pc, #412]	; (8004a6c <HAL_RCC_OscConfig+0x264>)
 80048d0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80048d4:	6013      	str	r3, [r2, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	685b      	ldr	r3, [r3, #4]
 80048da:	2b00      	cmp	r3, #0
 80048dc:	d013      	beq.n	8004906 <HAL_RCC_OscConfig+0xfe>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80048de:	f7fc fb2f 	bl	8000f40 <HAL_GetTick>
 80048e2:	6138      	str	r0, [r7, #16]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80048e4:	e008      	b.n	80048f8 <HAL_RCC_OscConfig+0xf0>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80048e6:	f7fc fb2b 	bl	8000f40 <HAL_GetTick>
 80048ea:	4602      	mov	r2, r0
 80048ec:	693b      	ldr	r3, [r7, #16]
 80048ee:	1ad3      	subs	r3, r2, r3
 80048f0:	2b64      	cmp	r3, #100	; 0x64
 80048f2:	d901      	bls.n	80048f8 <HAL_RCC_OscConfig+0xf0>
          {
            return HAL_TIMEOUT;
 80048f4:	2303      	movs	r3, #3
 80048f6:	e1e1      	b.n	8004cbc <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80048f8:	4b5c      	ldr	r3, [pc, #368]	; (8004a6c <HAL_RCC_OscConfig+0x264>)
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004900:	2b00      	cmp	r3, #0
 8004902:	d0f0      	beq.n	80048e6 <HAL_RCC_OscConfig+0xde>
 8004904:	e014      	b.n	8004930 <HAL_RCC_OscConfig+0x128>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004906:	f7fc fb1b 	bl	8000f40 <HAL_GetTick>
 800490a:	6138      	str	r0, [r7, #16]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800490c:	e008      	b.n	8004920 <HAL_RCC_OscConfig+0x118>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800490e:	f7fc fb17 	bl	8000f40 <HAL_GetTick>
 8004912:	4602      	mov	r2, r0
 8004914:	693b      	ldr	r3, [r7, #16]
 8004916:	1ad3      	subs	r3, r2, r3
 8004918:	2b64      	cmp	r3, #100	; 0x64
 800491a:	d901      	bls.n	8004920 <HAL_RCC_OscConfig+0x118>
          {
            return HAL_TIMEOUT;
 800491c:	2303      	movs	r3, #3
 800491e:	e1cd      	b.n	8004cbc <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004920:	4b52      	ldr	r3, [pc, #328]	; (8004a6c <HAL_RCC_OscConfig+0x264>)
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004928:	2b00      	cmp	r3, #0
 800492a:	d1f0      	bne.n	800490e <HAL_RCC_OscConfig+0x106>
 800492c:	e000      	b.n	8004930 <HAL_RCC_OscConfig+0x128>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800492e:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	f003 0302 	and.w	r3, r3, #2
 8004938:	2b00      	cmp	r3, #0
 800493a:	d063      	beq.n	8004a04 <HAL_RCC_OscConfig+0x1fc>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 800493c:	4b4b      	ldr	r3, [pc, #300]	; (8004a6c <HAL_RCC_OscConfig+0x264>)
 800493e:	685b      	ldr	r3, [r3, #4]
 8004940:	f003 030c 	and.w	r3, r3, #12
 8004944:	2b00      	cmp	r3, #0
 8004946:	d00b      	beq.n	8004960 <HAL_RCC_OscConfig+0x158>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8004948:	4b48      	ldr	r3, [pc, #288]	; (8004a6c <HAL_RCC_OscConfig+0x264>)
 800494a:	685b      	ldr	r3, [r3, #4]
 800494c:	f003 030c 	and.w	r3, r3, #12
 8004950:	2b08      	cmp	r3, #8
 8004952:	d11c      	bne.n	800498e <HAL_RCC_OscConfig+0x186>
 8004954:	4b45      	ldr	r3, [pc, #276]	; (8004a6c <HAL_RCC_OscConfig+0x264>)
 8004956:	685b      	ldr	r3, [r3, #4]
 8004958:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800495c:	2b00      	cmp	r3, #0
 800495e:	d116      	bne.n	800498e <HAL_RCC_OscConfig+0x186>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004960:	4b42      	ldr	r3, [pc, #264]	; (8004a6c <HAL_RCC_OscConfig+0x264>)
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	f003 0302 	and.w	r3, r3, #2
 8004968:	2b00      	cmp	r3, #0
 800496a:	d005      	beq.n	8004978 <HAL_RCC_OscConfig+0x170>
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	691b      	ldr	r3, [r3, #16]
 8004970:	2b01      	cmp	r3, #1
 8004972:	d001      	beq.n	8004978 <HAL_RCC_OscConfig+0x170>
      {
        return HAL_ERROR;
 8004974:	2301      	movs	r3, #1
 8004976:	e1a1      	b.n	8004cbc <HAL_RCC_OscConfig+0x4b4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004978:	4b3c      	ldr	r3, [pc, #240]	; (8004a6c <HAL_RCC_OscConfig+0x264>)
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	695b      	ldr	r3, [r3, #20]
 8004984:	00db      	lsls	r3, r3, #3
 8004986:	4939      	ldr	r1, [pc, #228]	; (8004a6c <HAL_RCC_OscConfig+0x264>)
 8004988:	4313      	orrs	r3, r2
 800498a:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800498c:	e03a      	b.n	8004a04 <HAL_RCC_OscConfig+0x1fc>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	691b      	ldr	r3, [r3, #16]
 8004992:	2b00      	cmp	r3, #0
 8004994:	d020      	beq.n	80049d8 <HAL_RCC_OscConfig+0x1d0>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004996:	4b36      	ldr	r3, [pc, #216]	; (8004a70 <HAL_RCC_OscConfig+0x268>)
 8004998:	2201      	movs	r2, #1
 800499a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800499c:	f7fc fad0 	bl	8000f40 <HAL_GetTick>
 80049a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80049a2:	e008      	b.n	80049b6 <HAL_RCC_OscConfig+0x1ae>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80049a4:	f7fc facc 	bl	8000f40 <HAL_GetTick>
 80049a8:	4602      	mov	r2, r0
 80049aa:	693b      	ldr	r3, [r7, #16]
 80049ac:	1ad3      	subs	r3, r2, r3
 80049ae:	2b02      	cmp	r3, #2
 80049b0:	d901      	bls.n	80049b6 <HAL_RCC_OscConfig+0x1ae>
          {
            return HAL_TIMEOUT;
 80049b2:	2303      	movs	r3, #3
 80049b4:	e182      	b.n	8004cbc <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80049b6:	4b2d      	ldr	r3, [pc, #180]	; (8004a6c <HAL_RCC_OscConfig+0x264>)
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	f003 0302 	and.w	r3, r3, #2
 80049be:	2b00      	cmp	r3, #0
 80049c0:	d0f0      	beq.n	80049a4 <HAL_RCC_OscConfig+0x19c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80049c2:	4b2a      	ldr	r3, [pc, #168]	; (8004a6c <HAL_RCC_OscConfig+0x264>)
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	695b      	ldr	r3, [r3, #20]
 80049ce:	00db      	lsls	r3, r3, #3
 80049d0:	4926      	ldr	r1, [pc, #152]	; (8004a6c <HAL_RCC_OscConfig+0x264>)
 80049d2:	4313      	orrs	r3, r2
 80049d4:	600b      	str	r3, [r1, #0]
 80049d6:	e015      	b.n	8004a04 <HAL_RCC_OscConfig+0x1fc>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80049d8:	4b25      	ldr	r3, [pc, #148]	; (8004a70 <HAL_RCC_OscConfig+0x268>)
 80049da:	2200      	movs	r2, #0
 80049dc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80049de:	f7fc faaf 	bl	8000f40 <HAL_GetTick>
 80049e2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80049e4:	e008      	b.n	80049f8 <HAL_RCC_OscConfig+0x1f0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80049e6:	f7fc faab 	bl	8000f40 <HAL_GetTick>
 80049ea:	4602      	mov	r2, r0
 80049ec:	693b      	ldr	r3, [r7, #16]
 80049ee:	1ad3      	subs	r3, r2, r3
 80049f0:	2b02      	cmp	r3, #2
 80049f2:	d901      	bls.n	80049f8 <HAL_RCC_OscConfig+0x1f0>
          {
            return HAL_TIMEOUT;
 80049f4:	2303      	movs	r3, #3
 80049f6:	e161      	b.n	8004cbc <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80049f8:	4b1c      	ldr	r3, [pc, #112]	; (8004a6c <HAL_RCC_OscConfig+0x264>)
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	f003 0302 	and.w	r3, r3, #2
 8004a00:	2b00      	cmp	r3, #0
 8004a02:	d1f0      	bne.n	80049e6 <HAL_RCC_OscConfig+0x1de>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	f003 0308 	and.w	r3, r3, #8
 8004a0c:	2b00      	cmp	r3, #0
 8004a0e:	d039      	beq.n	8004a84 <HAL_RCC_OscConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	699b      	ldr	r3, [r3, #24]
 8004a14:	2b00      	cmp	r3, #0
 8004a16:	d019      	beq.n	8004a4c <HAL_RCC_OscConfig+0x244>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004a18:	4b16      	ldr	r3, [pc, #88]	; (8004a74 <HAL_RCC_OscConfig+0x26c>)
 8004a1a:	2201      	movs	r2, #1
 8004a1c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004a1e:	f7fc fa8f 	bl	8000f40 <HAL_GetTick>
 8004a22:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004a24:	e008      	b.n	8004a38 <HAL_RCC_OscConfig+0x230>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004a26:	f7fc fa8b 	bl	8000f40 <HAL_GetTick>
 8004a2a:	4602      	mov	r2, r0
 8004a2c:	693b      	ldr	r3, [r7, #16]
 8004a2e:	1ad3      	subs	r3, r2, r3
 8004a30:	2b02      	cmp	r3, #2
 8004a32:	d901      	bls.n	8004a38 <HAL_RCC_OscConfig+0x230>
        {
          return HAL_TIMEOUT;
 8004a34:	2303      	movs	r3, #3
 8004a36:	e141      	b.n	8004cbc <HAL_RCC_OscConfig+0x4b4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004a38:	4b0c      	ldr	r3, [pc, #48]	; (8004a6c <HAL_RCC_OscConfig+0x264>)
 8004a3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a3c:	f003 0302 	and.w	r3, r3, #2
 8004a40:	2b00      	cmp	r3, #0
 8004a42:	d0f0      	beq.n	8004a26 <HAL_RCC_OscConfig+0x21e>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms 
          should be added.*/
      RCC_Delay(1);
 8004a44:	2001      	movs	r0, #1
 8004a46:	f000 fadf 	bl	8005008 <RCC_Delay>
 8004a4a:	e01b      	b.n	8004a84 <HAL_RCC_OscConfig+0x27c>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004a4c:	4b09      	ldr	r3, [pc, #36]	; (8004a74 <HAL_RCC_OscConfig+0x26c>)
 8004a4e:	2200      	movs	r2, #0
 8004a50:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004a52:	f7fc fa75 	bl	8000f40 <HAL_GetTick>
 8004a56:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004a58:	e00e      	b.n	8004a78 <HAL_RCC_OscConfig+0x270>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004a5a:	f7fc fa71 	bl	8000f40 <HAL_GetTick>
 8004a5e:	4602      	mov	r2, r0
 8004a60:	693b      	ldr	r3, [r7, #16]
 8004a62:	1ad3      	subs	r3, r2, r3
 8004a64:	2b02      	cmp	r3, #2
 8004a66:	d907      	bls.n	8004a78 <HAL_RCC_OscConfig+0x270>
        {
          return HAL_TIMEOUT;
 8004a68:	2303      	movs	r3, #3
 8004a6a:	e127      	b.n	8004cbc <HAL_RCC_OscConfig+0x4b4>
 8004a6c:	40021000 	.word	0x40021000
 8004a70:	42420000 	.word	0x42420000
 8004a74:	42420480 	.word	0x42420480
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004a78:	4b92      	ldr	r3, [pc, #584]	; (8004cc4 <HAL_RCC_OscConfig+0x4bc>)
 8004a7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a7c:	f003 0302 	and.w	r3, r3, #2
 8004a80:	2b00      	cmp	r3, #0
 8004a82:	d1ea      	bne.n	8004a5a <HAL_RCC_OscConfig+0x252>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	f003 0304 	and.w	r3, r3, #4
 8004a8c:	2b00      	cmp	r3, #0
 8004a8e:	f000 80a6 	beq.w	8004bde <HAL_RCC_OscConfig+0x3d6>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004a92:	2300      	movs	r3, #0
 8004a94:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004a96:	4b8b      	ldr	r3, [pc, #556]	; (8004cc4 <HAL_RCC_OscConfig+0x4bc>)
 8004a98:	69db      	ldr	r3, [r3, #28]
 8004a9a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	d10d      	bne.n	8004abe <HAL_RCC_OscConfig+0x2b6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004aa2:	4b88      	ldr	r3, [pc, #544]	; (8004cc4 <HAL_RCC_OscConfig+0x4bc>)
 8004aa4:	69db      	ldr	r3, [r3, #28]
 8004aa6:	4a87      	ldr	r2, [pc, #540]	; (8004cc4 <HAL_RCC_OscConfig+0x4bc>)
 8004aa8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004aac:	61d3      	str	r3, [r2, #28]
 8004aae:	4b85      	ldr	r3, [pc, #532]	; (8004cc4 <HAL_RCC_OscConfig+0x4bc>)
 8004ab0:	69db      	ldr	r3, [r3, #28]
 8004ab2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004ab6:	60fb      	str	r3, [r7, #12]
 8004ab8:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8004aba:	2301      	movs	r3, #1
 8004abc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004abe:	4b82      	ldr	r3, [pc, #520]	; (8004cc8 <HAL_RCC_OscConfig+0x4c0>)
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	d118      	bne.n	8004afc <HAL_RCC_OscConfig+0x2f4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004aca:	4b7f      	ldr	r3, [pc, #508]	; (8004cc8 <HAL_RCC_OscConfig+0x4c0>)
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	4a7e      	ldr	r2, [pc, #504]	; (8004cc8 <HAL_RCC_OscConfig+0x4c0>)
 8004ad0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004ad4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004ad6:	f7fc fa33 	bl	8000f40 <HAL_GetTick>
 8004ada:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004adc:	e008      	b.n	8004af0 <HAL_RCC_OscConfig+0x2e8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004ade:	f7fc fa2f 	bl	8000f40 <HAL_GetTick>
 8004ae2:	4602      	mov	r2, r0
 8004ae4:	693b      	ldr	r3, [r7, #16]
 8004ae6:	1ad3      	subs	r3, r2, r3
 8004ae8:	2b64      	cmp	r3, #100	; 0x64
 8004aea:	d901      	bls.n	8004af0 <HAL_RCC_OscConfig+0x2e8>
        {
          return HAL_TIMEOUT;
 8004aec:	2303      	movs	r3, #3
 8004aee:	e0e5      	b.n	8004cbc <HAL_RCC_OscConfig+0x4b4>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004af0:	4b75      	ldr	r3, [pc, #468]	; (8004cc8 <HAL_RCC_OscConfig+0x4c0>)
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004af8:	2b00      	cmp	r3, #0
 8004afa:	d0f0      	beq.n	8004ade <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	68db      	ldr	r3, [r3, #12]
 8004b00:	2b01      	cmp	r3, #1
 8004b02:	d106      	bne.n	8004b12 <HAL_RCC_OscConfig+0x30a>
 8004b04:	4b6f      	ldr	r3, [pc, #444]	; (8004cc4 <HAL_RCC_OscConfig+0x4bc>)
 8004b06:	6a1b      	ldr	r3, [r3, #32]
 8004b08:	4a6e      	ldr	r2, [pc, #440]	; (8004cc4 <HAL_RCC_OscConfig+0x4bc>)
 8004b0a:	f043 0301 	orr.w	r3, r3, #1
 8004b0e:	6213      	str	r3, [r2, #32]
 8004b10:	e02d      	b.n	8004b6e <HAL_RCC_OscConfig+0x366>
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	68db      	ldr	r3, [r3, #12]
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	d10c      	bne.n	8004b34 <HAL_RCC_OscConfig+0x32c>
 8004b1a:	4b6a      	ldr	r3, [pc, #424]	; (8004cc4 <HAL_RCC_OscConfig+0x4bc>)
 8004b1c:	6a1b      	ldr	r3, [r3, #32]
 8004b1e:	4a69      	ldr	r2, [pc, #420]	; (8004cc4 <HAL_RCC_OscConfig+0x4bc>)
 8004b20:	f023 0301 	bic.w	r3, r3, #1
 8004b24:	6213      	str	r3, [r2, #32]
 8004b26:	4b67      	ldr	r3, [pc, #412]	; (8004cc4 <HAL_RCC_OscConfig+0x4bc>)
 8004b28:	6a1b      	ldr	r3, [r3, #32]
 8004b2a:	4a66      	ldr	r2, [pc, #408]	; (8004cc4 <HAL_RCC_OscConfig+0x4bc>)
 8004b2c:	f023 0304 	bic.w	r3, r3, #4
 8004b30:	6213      	str	r3, [r2, #32]
 8004b32:	e01c      	b.n	8004b6e <HAL_RCC_OscConfig+0x366>
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	68db      	ldr	r3, [r3, #12]
 8004b38:	2b05      	cmp	r3, #5
 8004b3a:	d10c      	bne.n	8004b56 <HAL_RCC_OscConfig+0x34e>
 8004b3c:	4b61      	ldr	r3, [pc, #388]	; (8004cc4 <HAL_RCC_OscConfig+0x4bc>)
 8004b3e:	6a1b      	ldr	r3, [r3, #32]
 8004b40:	4a60      	ldr	r2, [pc, #384]	; (8004cc4 <HAL_RCC_OscConfig+0x4bc>)
 8004b42:	f043 0304 	orr.w	r3, r3, #4
 8004b46:	6213      	str	r3, [r2, #32]
 8004b48:	4b5e      	ldr	r3, [pc, #376]	; (8004cc4 <HAL_RCC_OscConfig+0x4bc>)
 8004b4a:	6a1b      	ldr	r3, [r3, #32]
 8004b4c:	4a5d      	ldr	r2, [pc, #372]	; (8004cc4 <HAL_RCC_OscConfig+0x4bc>)
 8004b4e:	f043 0301 	orr.w	r3, r3, #1
 8004b52:	6213      	str	r3, [r2, #32]
 8004b54:	e00b      	b.n	8004b6e <HAL_RCC_OscConfig+0x366>
 8004b56:	4b5b      	ldr	r3, [pc, #364]	; (8004cc4 <HAL_RCC_OscConfig+0x4bc>)
 8004b58:	6a1b      	ldr	r3, [r3, #32]
 8004b5a:	4a5a      	ldr	r2, [pc, #360]	; (8004cc4 <HAL_RCC_OscConfig+0x4bc>)
 8004b5c:	f023 0301 	bic.w	r3, r3, #1
 8004b60:	6213      	str	r3, [r2, #32]
 8004b62:	4b58      	ldr	r3, [pc, #352]	; (8004cc4 <HAL_RCC_OscConfig+0x4bc>)
 8004b64:	6a1b      	ldr	r3, [r3, #32]
 8004b66:	4a57      	ldr	r2, [pc, #348]	; (8004cc4 <HAL_RCC_OscConfig+0x4bc>)
 8004b68:	f023 0304 	bic.w	r3, r3, #4
 8004b6c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	68db      	ldr	r3, [r3, #12]
 8004b72:	2b00      	cmp	r3, #0
 8004b74:	d015      	beq.n	8004ba2 <HAL_RCC_OscConfig+0x39a>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004b76:	f7fc f9e3 	bl	8000f40 <HAL_GetTick>
 8004b7a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004b7c:	e00a      	b.n	8004b94 <HAL_RCC_OscConfig+0x38c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004b7e:	f7fc f9df 	bl	8000f40 <HAL_GetTick>
 8004b82:	4602      	mov	r2, r0
 8004b84:	693b      	ldr	r3, [r7, #16]
 8004b86:	1ad3      	subs	r3, r2, r3
 8004b88:	f241 3288 	movw	r2, #5000	; 0x1388
 8004b8c:	4293      	cmp	r3, r2
 8004b8e:	d901      	bls.n	8004b94 <HAL_RCC_OscConfig+0x38c>
        {
          return HAL_TIMEOUT;
 8004b90:	2303      	movs	r3, #3
 8004b92:	e093      	b.n	8004cbc <HAL_RCC_OscConfig+0x4b4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004b94:	4b4b      	ldr	r3, [pc, #300]	; (8004cc4 <HAL_RCC_OscConfig+0x4bc>)
 8004b96:	6a1b      	ldr	r3, [r3, #32]
 8004b98:	f003 0302 	and.w	r3, r3, #2
 8004b9c:	2b00      	cmp	r3, #0
 8004b9e:	d0ee      	beq.n	8004b7e <HAL_RCC_OscConfig+0x376>
 8004ba0:	e014      	b.n	8004bcc <HAL_RCC_OscConfig+0x3c4>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004ba2:	f7fc f9cd 	bl	8000f40 <HAL_GetTick>
 8004ba6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004ba8:	e00a      	b.n	8004bc0 <HAL_RCC_OscConfig+0x3b8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004baa:	f7fc f9c9 	bl	8000f40 <HAL_GetTick>
 8004bae:	4602      	mov	r2, r0
 8004bb0:	693b      	ldr	r3, [r7, #16]
 8004bb2:	1ad3      	subs	r3, r2, r3
 8004bb4:	f241 3288 	movw	r2, #5000	; 0x1388
 8004bb8:	4293      	cmp	r3, r2
 8004bba:	d901      	bls.n	8004bc0 <HAL_RCC_OscConfig+0x3b8>
        {
          return HAL_TIMEOUT;
 8004bbc:	2303      	movs	r3, #3
 8004bbe:	e07d      	b.n	8004cbc <HAL_RCC_OscConfig+0x4b4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004bc0:	4b40      	ldr	r3, [pc, #256]	; (8004cc4 <HAL_RCC_OscConfig+0x4bc>)
 8004bc2:	6a1b      	ldr	r3, [r3, #32]
 8004bc4:	f003 0302 	and.w	r3, r3, #2
 8004bc8:	2b00      	cmp	r3, #0
 8004bca:	d1ee      	bne.n	8004baa <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8004bcc:	7dfb      	ldrb	r3, [r7, #23]
 8004bce:	2b01      	cmp	r3, #1
 8004bd0:	d105      	bne.n	8004bde <HAL_RCC_OscConfig+0x3d6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004bd2:	4b3c      	ldr	r3, [pc, #240]	; (8004cc4 <HAL_RCC_OscConfig+0x4bc>)
 8004bd4:	69db      	ldr	r3, [r3, #28]
 8004bd6:	4a3b      	ldr	r2, [pc, #236]	; (8004cc4 <HAL_RCC_OscConfig+0x4bc>)
 8004bd8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004bdc:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	69db      	ldr	r3, [r3, #28]
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	d069      	beq.n	8004cba <HAL_RCC_OscConfig+0x4b2>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004be6:	4b37      	ldr	r3, [pc, #220]	; (8004cc4 <HAL_RCC_OscConfig+0x4bc>)
 8004be8:	685b      	ldr	r3, [r3, #4]
 8004bea:	f003 030c 	and.w	r3, r3, #12
 8004bee:	2b08      	cmp	r3, #8
 8004bf0:	d061      	beq.n	8004cb6 <HAL_RCC_OscConfig+0x4ae>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	69db      	ldr	r3, [r3, #28]
 8004bf6:	2b02      	cmp	r3, #2
 8004bf8:	d146      	bne.n	8004c88 <HAL_RCC_OscConfig+0x480>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004bfa:	4b34      	ldr	r3, [pc, #208]	; (8004ccc <HAL_RCC_OscConfig+0x4c4>)
 8004bfc:	2200      	movs	r2, #0
 8004bfe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004c00:	f7fc f99e 	bl	8000f40 <HAL_GetTick>
 8004c04:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004c06:	e008      	b.n	8004c1a <HAL_RCC_OscConfig+0x412>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004c08:	f7fc f99a 	bl	8000f40 <HAL_GetTick>
 8004c0c:	4602      	mov	r2, r0
 8004c0e:	693b      	ldr	r3, [r7, #16]
 8004c10:	1ad3      	subs	r3, r2, r3
 8004c12:	2b02      	cmp	r3, #2
 8004c14:	d901      	bls.n	8004c1a <HAL_RCC_OscConfig+0x412>
          {
            return HAL_TIMEOUT;
 8004c16:	2303      	movs	r3, #3
 8004c18:	e050      	b.n	8004cbc <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004c1a:	4b2a      	ldr	r3, [pc, #168]	; (8004cc4 <HAL_RCC_OscConfig+0x4bc>)
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004c22:	2b00      	cmp	r3, #0
 8004c24:	d1f0      	bne.n	8004c08 <HAL_RCC_OscConfig+0x400>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if(RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	6a1b      	ldr	r3, [r3, #32]
 8004c2a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004c2e:	d108      	bne.n	8004c42 <HAL_RCC_OscConfig+0x43a>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8004c30:	4b24      	ldr	r3, [pc, #144]	; (8004cc4 <HAL_RCC_OscConfig+0x4bc>)
 8004c32:	685b      	ldr	r3, [r3, #4]
 8004c34:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	689b      	ldr	r3, [r3, #8]
 8004c3c:	4921      	ldr	r1, [pc, #132]	; (8004cc4 <HAL_RCC_OscConfig+0x4bc>)
 8004c3e:	4313      	orrs	r3, r2
 8004c40:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004c42:	4b20      	ldr	r3, [pc, #128]	; (8004cc4 <HAL_RCC_OscConfig+0x4bc>)
 8004c44:	685b      	ldr	r3, [r3, #4]
 8004c46:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	6a19      	ldr	r1, [r3, #32]
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c52:	430b      	orrs	r3, r1
 8004c54:	491b      	ldr	r1, [pc, #108]	; (8004cc4 <HAL_RCC_OscConfig+0x4bc>)
 8004c56:	4313      	orrs	r3, r2
 8004c58:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004c5a:	4b1c      	ldr	r3, [pc, #112]	; (8004ccc <HAL_RCC_OscConfig+0x4c4>)
 8004c5c:	2201      	movs	r2, #1
 8004c5e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004c60:	f7fc f96e 	bl	8000f40 <HAL_GetTick>
 8004c64:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004c66:	e008      	b.n	8004c7a <HAL_RCC_OscConfig+0x472>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004c68:	f7fc f96a 	bl	8000f40 <HAL_GetTick>
 8004c6c:	4602      	mov	r2, r0
 8004c6e:	693b      	ldr	r3, [r7, #16]
 8004c70:	1ad3      	subs	r3, r2, r3
 8004c72:	2b02      	cmp	r3, #2
 8004c74:	d901      	bls.n	8004c7a <HAL_RCC_OscConfig+0x472>
          {
            return HAL_TIMEOUT;
 8004c76:	2303      	movs	r3, #3
 8004c78:	e020      	b.n	8004cbc <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004c7a:	4b12      	ldr	r3, [pc, #72]	; (8004cc4 <HAL_RCC_OscConfig+0x4bc>)
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	d0f0      	beq.n	8004c68 <HAL_RCC_OscConfig+0x460>
 8004c86:	e018      	b.n	8004cba <HAL_RCC_OscConfig+0x4b2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004c88:	4b10      	ldr	r3, [pc, #64]	; (8004ccc <HAL_RCC_OscConfig+0x4c4>)
 8004c8a:	2200      	movs	r2, #0
 8004c8c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004c8e:	f7fc f957 	bl	8000f40 <HAL_GetTick>
 8004c92:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004c94:	e008      	b.n	8004ca8 <HAL_RCC_OscConfig+0x4a0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004c96:	f7fc f953 	bl	8000f40 <HAL_GetTick>
 8004c9a:	4602      	mov	r2, r0
 8004c9c:	693b      	ldr	r3, [r7, #16]
 8004c9e:	1ad3      	subs	r3, r2, r3
 8004ca0:	2b02      	cmp	r3, #2
 8004ca2:	d901      	bls.n	8004ca8 <HAL_RCC_OscConfig+0x4a0>
          {
            return HAL_TIMEOUT;
 8004ca4:	2303      	movs	r3, #3
 8004ca6:	e009      	b.n	8004cbc <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004ca8:	4b06      	ldr	r3, [pc, #24]	; (8004cc4 <HAL_RCC_OscConfig+0x4bc>)
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004cb0:	2b00      	cmp	r3, #0
 8004cb2:	d1f0      	bne.n	8004c96 <HAL_RCC_OscConfig+0x48e>
 8004cb4:	e001      	b.n	8004cba <HAL_RCC_OscConfig+0x4b2>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8004cb6:	2301      	movs	r3, #1
 8004cb8:	e000      	b.n	8004cbc <HAL_RCC_OscConfig+0x4b4>
    }
  }
  
  return HAL_OK;
 8004cba:	2300      	movs	r3, #0
}
 8004cbc:	4618      	mov	r0, r3
 8004cbe:	3718      	adds	r7, #24
 8004cc0:	46bd      	mov	sp, r7
 8004cc2:	bd80      	pop	{r7, pc}
 8004cc4:	40021000 	.word	0x40021000
 8004cc8:	40007000 	.word	0x40007000
 8004ccc:	42420060 	.word	0x42420060

08004cd0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004cd0:	b580      	push	{r7, lr}
 8004cd2:	b084      	sub	sp, #16
 8004cd4:	af00      	add	r7, sp, #0
 8004cd6:	6078      	str	r0, [r7, #4]
 8004cd8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8004cda:	2300      	movs	r3, #0
 8004cdc:	60fb      	str	r3, [r7, #12]
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8004cde:	4b7e      	ldr	r3, [pc, #504]	; (8004ed8 <HAL_RCC_ClockConfig+0x208>)
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	f003 0307 	and.w	r3, r3, #7
 8004ce6:	683a      	ldr	r2, [r7, #0]
 8004ce8:	429a      	cmp	r2, r3
 8004cea:	d910      	bls.n	8004d0e <HAL_RCC_ClockConfig+0x3e>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004cec:	4b7a      	ldr	r3, [pc, #488]	; (8004ed8 <HAL_RCC_ClockConfig+0x208>)
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	f023 0207 	bic.w	r2, r3, #7
 8004cf4:	4978      	ldr	r1, [pc, #480]	; (8004ed8 <HAL_RCC_ClockConfig+0x208>)
 8004cf6:	683b      	ldr	r3, [r7, #0]
 8004cf8:	4313      	orrs	r3, r2
 8004cfa:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8004cfc:	4b76      	ldr	r3, [pc, #472]	; (8004ed8 <HAL_RCC_ClockConfig+0x208>)
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	f003 0307 	and.w	r3, r3, #7
 8004d04:	683a      	ldr	r2, [r7, #0]
 8004d06:	429a      	cmp	r2, r3
 8004d08:	d001      	beq.n	8004d0e <HAL_RCC_ClockConfig+0x3e>
    {
      return HAL_ERROR;
 8004d0a:	2301      	movs	r3, #1
 8004d0c:	e0e0      	b.n	8004ed0 <HAL_RCC_ClockConfig+0x200>
    }
  }

#endif /* FLASH_ACR_LATENCY */
  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	f003 0302 	and.w	r3, r3, #2
 8004d16:	2b00      	cmp	r3, #0
 8004d18:	d020      	beq.n	8004d5c <HAL_RCC_ClockConfig+0x8c>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	f003 0304 	and.w	r3, r3, #4
 8004d22:	2b00      	cmp	r3, #0
 8004d24:	d005      	beq.n	8004d32 <HAL_RCC_ClockConfig+0x62>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004d26:	4b6d      	ldr	r3, [pc, #436]	; (8004edc <HAL_RCC_ClockConfig+0x20c>)
 8004d28:	685b      	ldr	r3, [r3, #4]
 8004d2a:	4a6c      	ldr	r2, [pc, #432]	; (8004edc <HAL_RCC_ClockConfig+0x20c>)
 8004d2c:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8004d30:	6053      	str	r3, [r2, #4]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	f003 0308 	and.w	r3, r3, #8
 8004d3a:	2b00      	cmp	r3, #0
 8004d3c:	d005      	beq.n	8004d4a <HAL_RCC_ClockConfig+0x7a>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004d3e:	4b67      	ldr	r3, [pc, #412]	; (8004edc <HAL_RCC_ClockConfig+0x20c>)
 8004d40:	685b      	ldr	r3, [r3, #4]
 8004d42:	4a66      	ldr	r2, [pc, #408]	; (8004edc <HAL_RCC_ClockConfig+0x20c>)
 8004d44:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8004d48:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004d4a:	4b64      	ldr	r3, [pc, #400]	; (8004edc <HAL_RCC_ClockConfig+0x20c>)
 8004d4c:	685b      	ldr	r3, [r3, #4]
 8004d4e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	689b      	ldr	r3, [r3, #8]
 8004d56:	4961      	ldr	r1, [pc, #388]	; (8004edc <HAL_RCC_ClockConfig+0x20c>)
 8004d58:	4313      	orrs	r3, r2
 8004d5a:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	f003 0301 	and.w	r3, r3, #1
 8004d64:	2b00      	cmp	r3, #0
 8004d66:	d06a      	beq.n	8004e3e <HAL_RCC_ClockConfig+0x16e>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	685b      	ldr	r3, [r3, #4]
 8004d6c:	2b01      	cmp	r3, #1
 8004d6e:	d107      	bne.n	8004d80 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004d70:	4b5a      	ldr	r3, [pc, #360]	; (8004edc <HAL_RCC_ClockConfig+0x20c>)
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004d78:	2b00      	cmp	r3, #0
 8004d7a:	d115      	bne.n	8004da8 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_ERROR;
 8004d7c:	2301      	movs	r3, #1
 8004d7e:	e0a7      	b.n	8004ed0 <HAL_RCC_ClockConfig+0x200>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	685b      	ldr	r3, [r3, #4]
 8004d84:	2b02      	cmp	r3, #2
 8004d86:	d107      	bne.n	8004d98 <HAL_RCC_ClockConfig+0xc8>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004d88:	4b54      	ldr	r3, [pc, #336]	; (8004edc <HAL_RCC_ClockConfig+0x20c>)
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004d90:	2b00      	cmp	r3, #0
 8004d92:	d109      	bne.n	8004da8 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_ERROR;
 8004d94:	2301      	movs	r3, #1
 8004d96:	e09b      	b.n	8004ed0 <HAL_RCC_ClockConfig+0x200>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004d98:	4b50      	ldr	r3, [pc, #320]	; (8004edc <HAL_RCC_ClockConfig+0x20c>)
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	f003 0302 	and.w	r3, r3, #2
 8004da0:	2b00      	cmp	r3, #0
 8004da2:	d101      	bne.n	8004da8 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_ERROR;
 8004da4:	2301      	movs	r3, #1
 8004da6:	e093      	b.n	8004ed0 <HAL_RCC_ClockConfig+0x200>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004da8:	4b4c      	ldr	r3, [pc, #304]	; (8004edc <HAL_RCC_ClockConfig+0x20c>)
 8004daa:	685b      	ldr	r3, [r3, #4]
 8004dac:	f023 0203 	bic.w	r2, r3, #3
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	685b      	ldr	r3, [r3, #4]
 8004db4:	4949      	ldr	r1, [pc, #292]	; (8004edc <HAL_RCC_ClockConfig+0x20c>)
 8004db6:	4313      	orrs	r3, r2
 8004db8:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004dba:	f7fc f8c1 	bl	8000f40 <HAL_GetTick>
 8004dbe:	60f8      	str	r0, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	685b      	ldr	r3, [r3, #4]
 8004dc4:	2b01      	cmp	r3, #1
 8004dc6:	d112      	bne.n	8004dee <HAL_RCC_ClockConfig+0x11e>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8004dc8:	e00a      	b.n	8004de0 <HAL_RCC_ClockConfig+0x110>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004dca:	f7fc f8b9 	bl	8000f40 <HAL_GetTick>
 8004dce:	4602      	mov	r2, r0
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	1ad3      	subs	r3, r2, r3
 8004dd4:	f241 3288 	movw	r2, #5000	; 0x1388
 8004dd8:	4293      	cmp	r3, r2
 8004dda:	d901      	bls.n	8004de0 <HAL_RCC_ClockConfig+0x110>
        {
          return HAL_TIMEOUT;
 8004ddc:	2303      	movs	r3, #3
 8004dde:	e077      	b.n	8004ed0 <HAL_RCC_ClockConfig+0x200>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8004de0:	4b3e      	ldr	r3, [pc, #248]	; (8004edc <HAL_RCC_ClockConfig+0x20c>)
 8004de2:	685b      	ldr	r3, [r3, #4]
 8004de4:	f003 030c 	and.w	r3, r3, #12
 8004de8:	2b04      	cmp	r3, #4
 8004dea:	d1ee      	bne.n	8004dca <HAL_RCC_ClockConfig+0xfa>
 8004dec:	e027      	b.n	8004e3e <HAL_RCC_ClockConfig+0x16e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	685b      	ldr	r3, [r3, #4]
 8004df2:	2b02      	cmp	r3, #2
 8004df4:	d11d      	bne.n	8004e32 <HAL_RCC_ClockConfig+0x162>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004df6:	e00a      	b.n	8004e0e <HAL_RCC_ClockConfig+0x13e>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004df8:	f7fc f8a2 	bl	8000f40 <HAL_GetTick>
 8004dfc:	4602      	mov	r2, r0
 8004dfe:	68fb      	ldr	r3, [r7, #12]
 8004e00:	1ad3      	subs	r3, r2, r3
 8004e02:	f241 3288 	movw	r2, #5000	; 0x1388
 8004e06:	4293      	cmp	r3, r2
 8004e08:	d901      	bls.n	8004e0e <HAL_RCC_ClockConfig+0x13e>
        {
          return HAL_TIMEOUT;
 8004e0a:	2303      	movs	r3, #3
 8004e0c:	e060      	b.n	8004ed0 <HAL_RCC_ClockConfig+0x200>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004e0e:	4b33      	ldr	r3, [pc, #204]	; (8004edc <HAL_RCC_ClockConfig+0x20c>)
 8004e10:	685b      	ldr	r3, [r3, #4]
 8004e12:	f003 030c 	and.w	r3, r3, #12
 8004e16:	2b08      	cmp	r3, #8
 8004e18:	d1ee      	bne.n	8004df8 <HAL_RCC_ClockConfig+0x128>
 8004e1a:	e010      	b.n	8004e3e <HAL_RCC_ClockConfig+0x16e>
    }
    else
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004e1c:	f7fc f890 	bl	8000f40 <HAL_GetTick>
 8004e20:	4602      	mov	r2, r0
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	1ad3      	subs	r3, r2, r3
 8004e26:	f241 3288 	movw	r2, #5000	; 0x1388
 8004e2a:	4293      	cmp	r3, r2
 8004e2c:	d901      	bls.n	8004e32 <HAL_RCC_ClockConfig+0x162>
        {
          return HAL_TIMEOUT;
 8004e2e:	2303      	movs	r3, #3
 8004e30:	e04e      	b.n	8004ed0 <HAL_RCC_ClockConfig+0x200>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8004e32:	4b2a      	ldr	r3, [pc, #168]	; (8004edc <HAL_RCC_ClockConfig+0x20c>)
 8004e34:	685b      	ldr	r3, [r3, #4]
 8004e36:	f003 030c 	and.w	r3, r3, #12
 8004e3a:	2b00      	cmp	r3, #0
 8004e3c:	d1ee      	bne.n	8004e1c <HAL_RCC_ClockConfig+0x14c>
      }
    }      
  }    
#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 8004e3e:	4b26      	ldr	r3, [pc, #152]	; (8004ed8 <HAL_RCC_ClockConfig+0x208>)
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	f003 0307 	and.w	r3, r3, #7
 8004e46:	683a      	ldr	r2, [r7, #0]
 8004e48:	429a      	cmp	r2, r3
 8004e4a:	d210      	bcs.n	8004e6e <HAL_RCC_ClockConfig+0x19e>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004e4c:	4b22      	ldr	r3, [pc, #136]	; (8004ed8 <HAL_RCC_ClockConfig+0x208>)
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	f023 0207 	bic.w	r2, r3, #7
 8004e54:	4920      	ldr	r1, [pc, #128]	; (8004ed8 <HAL_RCC_ClockConfig+0x208>)
 8004e56:	683b      	ldr	r3, [r7, #0]
 8004e58:	4313      	orrs	r3, r2
 8004e5a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8004e5c:	4b1e      	ldr	r3, [pc, #120]	; (8004ed8 <HAL_RCC_ClockConfig+0x208>)
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	f003 0307 	and.w	r3, r3, #7
 8004e64:	683a      	ldr	r2, [r7, #0]
 8004e66:	429a      	cmp	r2, r3
 8004e68:	d001      	beq.n	8004e6e <HAL_RCC_ClockConfig+0x19e>
    {
      return HAL_ERROR;
 8004e6a:	2301      	movs	r3, #1
 8004e6c:	e030      	b.n	8004ed0 <HAL_RCC_ClockConfig+0x200>
    }
  }    
#endif /* FLASH_ACR_LATENCY */

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	f003 0304 	and.w	r3, r3, #4
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	d008      	beq.n	8004e8c <HAL_RCC_ClockConfig+0x1bc>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004e7a:	4b18      	ldr	r3, [pc, #96]	; (8004edc <HAL_RCC_ClockConfig+0x20c>)
 8004e7c:	685b      	ldr	r3, [r3, #4]
 8004e7e:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	68db      	ldr	r3, [r3, #12]
 8004e86:	4915      	ldr	r1, [pc, #84]	; (8004edc <HAL_RCC_ClockConfig+0x20c>)
 8004e88:	4313      	orrs	r3, r2
 8004e8a:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	f003 0308 	and.w	r3, r3, #8
 8004e94:	2b00      	cmp	r3, #0
 8004e96:	d009      	beq.n	8004eac <HAL_RCC_ClockConfig+0x1dc>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8004e98:	4b10      	ldr	r3, [pc, #64]	; (8004edc <HAL_RCC_ClockConfig+0x20c>)
 8004e9a:	685b      	ldr	r3, [r3, #4]
 8004e9c:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	691b      	ldr	r3, [r3, #16]
 8004ea4:	00db      	lsls	r3, r3, #3
 8004ea6:	490d      	ldr	r1, [pc, #52]	; (8004edc <HAL_RCC_ClockConfig+0x20c>)
 8004ea8:	4313      	orrs	r3, r2
 8004eaa:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004eac:	f000 f81c 	bl	8004ee8 <HAL_RCC_GetSysClockFreq>
 8004eb0:	4602      	mov	r2, r0
 8004eb2:	4b0a      	ldr	r3, [pc, #40]	; (8004edc <HAL_RCC_ClockConfig+0x20c>)
 8004eb4:	685b      	ldr	r3, [r3, #4]
 8004eb6:	091b      	lsrs	r3, r3, #4
 8004eb8:	f003 030f 	and.w	r3, r3, #15
 8004ebc:	4908      	ldr	r1, [pc, #32]	; (8004ee0 <HAL_RCC_ClockConfig+0x210>)
 8004ebe:	5ccb      	ldrb	r3, [r1, r3]
 8004ec0:	fa22 f303 	lsr.w	r3, r2, r3
 8004ec4:	4a07      	ldr	r2, [pc, #28]	; (8004ee4 <HAL_RCC_ClockConfig+0x214>)
 8004ec6:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8004ec8:	200f      	movs	r0, #15
 8004eca:	f7fb fff7 	bl	8000ebc <HAL_InitTick>
  
  return HAL_OK;
 8004ece:	2300      	movs	r3, #0
}
 8004ed0:	4618      	mov	r0, r3
 8004ed2:	3710      	adds	r7, #16
 8004ed4:	46bd      	mov	sp, r7
 8004ed6:	bd80      	pop	{r7, pc}
 8004ed8:	40022000 	.word	0x40022000
 8004edc:	40021000 	.word	0x40021000
 8004ee0:	080079f4 	.word	0x080079f4
 8004ee4:	20000008 	.word	0x20000008

08004ee8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004ee8:	b490      	push	{r4, r7}
 8004eea:	b08a      	sub	sp, #40	; 0x28
 8004eec:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8004eee:	4b29      	ldr	r3, [pc, #164]	; (8004f94 <HAL_RCC_GetSysClockFreq+0xac>)
 8004ef0:	1d3c      	adds	r4, r7, #4
 8004ef2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004ef4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8004ef8:	f240 2301 	movw	r3, #513	; 0x201
 8004efc:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8004efe:	2300      	movs	r3, #0
 8004f00:	61fb      	str	r3, [r7, #28]
 8004f02:	2300      	movs	r3, #0
 8004f04:	61bb      	str	r3, [r7, #24]
 8004f06:	2300      	movs	r3, #0
 8004f08:	627b      	str	r3, [r7, #36]	; 0x24
 8004f0a:	2300      	movs	r3, #0
 8004f0c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8004f0e:	2300      	movs	r3, #0
 8004f10:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8004f12:	4b21      	ldr	r3, [pc, #132]	; (8004f98 <HAL_RCC_GetSysClockFreq+0xb0>)
 8004f14:	685b      	ldr	r3, [r3, #4]
 8004f16:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004f18:	69fb      	ldr	r3, [r7, #28]
 8004f1a:	f003 030c 	and.w	r3, r3, #12
 8004f1e:	2b04      	cmp	r3, #4
 8004f20:	d002      	beq.n	8004f28 <HAL_RCC_GetSysClockFreq+0x40>
 8004f22:	2b08      	cmp	r3, #8
 8004f24:	d003      	beq.n	8004f2e <HAL_RCC_GetSysClockFreq+0x46>
 8004f26:	e02b      	b.n	8004f80 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004f28:	4b1c      	ldr	r3, [pc, #112]	; (8004f9c <HAL_RCC_GetSysClockFreq+0xb4>)
 8004f2a:	623b      	str	r3, [r7, #32]
      break;
 8004f2c:	e02b      	b.n	8004f86 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8004f2e:	69fb      	ldr	r3, [r7, #28]
 8004f30:	0c9b      	lsrs	r3, r3, #18
 8004f32:	f003 030f 	and.w	r3, r3, #15
 8004f36:	3328      	adds	r3, #40	; 0x28
 8004f38:	443b      	add	r3, r7
 8004f3a:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8004f3e:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004f40:	69fb      	ldr	r3, [r7, #28]
 8004f42:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004f46:	2b00      	cmp	r3, #0
 8004f48:	d012      	beq.n	8004f70 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8004f4a:	4b13      	ldr	r3, [pc, #76]	; (8004f98 <HAL_RCC_GetSysClockFreq+0xb0>)
 8004f4c:	685b      	ldr	r3, [r3, #4]
 8004f4e:	0c5b      	lsrs	r3, r3, #17
 8004f50:	f003 0301 	and.w	r3, r3, #1
 8004f54:	3328      	adds	r3, #40	; 0x28
 8004f56:	443b      	add	r3, r7
 8004f58:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8004f5c:	61bb      	str	r3, [r7, #24]
        {
            pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8004f5e:	697b      	ldr	r3, [r7, #20]
 8004f60:	4a0e      	ldr	r2, [pc, #56]	; (8004f9c <HAL_RCC_GetSysClockFreq+0xb4>)
 8004f62:	fb03 f202 	mul.w	r2, r3, r2
 8004f66:	69bb      	ldr	r3, [r7, #24]
 8004f68:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f6c:	627b      	str	r3, [r7, #36]	; 0x24
 8004f6e:	e004      	b.n	8004f7a <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8004f70:	697b      	ldr	r3, [r7, #20]
 8004f72:	4a0b      	ldr	r2, [pc, #44]	; (8004fa0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004f74:	fb02 f303 	mul.w	r3, r2, r3
 8004f78:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8004f7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f7c:	623b      	str	r3, [r7, #32]
      break;
 8004f7e:	e002      	b.n	8004f86 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8004f80:	4b06      	ldr	r3, [pc, #24]	; (8004f9c <HAL_RCC_GetSysClockFreq+0xb4>)
 8004f82:	623b      	str	r3, [r7, #32]
      break;
 8004f84:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004f86:	6a3b      	ldr	r3, [r7, #32]
}
 8004f88:	4618      	mov	r0, r3
 8004f8a:	3728      	adds	r7, #40	; 0x28
 8004f8c:	46bd      	mov	sp, r7
 8004f8e:	bc90      	pop	{r4, r7}
 8004f90:	4770      	bx	lr
 8004f92:	bf00      	nop
 8004f94:	080078a0 	.word	0x080078a0
 8004f98:	40021000 	.word	0x40021000
 8004f9c:	007a1200 	.word	0x007a1200
 8004fa0:	003d0900 	.word	0x003d0900

08004fa4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004fa4:	b480      	push	{r7}
 8004fa6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004fa8:	4b02      	ldr	r3, [pc, #8]	; (8004fb4 <HAL_RCC_GetHCLKFreq+0x10>)
 8004faa:	681b      	ldr	r3, [r3, #0]
}
 8004fac:	4618      	mov	r0, r3
 8004fae:	46bd      	mov	sp, r7
 8004fb0:	bc80      	pop	{r7}
 8004fb2:	4770      	bx	lr
 8004fb4:	20000008 	.word	0x20000008

08004fb8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004fb8:	b580      	push	{r7, lr}
 8004fba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004fbc:	f7ff fff2 	bl	8004fa4 <HAL_RCC_GetHCLKFreq>
 8004fc0:	4602      	mov	r2, r0
 8004fc2:	4b05      	ldr	r3, [pc, #20]	; (8004fd8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004fc4:	685b      	ldr	r3, [r3, #4]
 8004fc6:	0a1b      	lsrs	r3, r3, #8
 8004fc8:	f003 0307 	and.w	r3, r3, #7
 8004fcc:	4903      	ldr	r1, [pc, #12]	; (8004fdc <HAL_RCC_GetPCLK1Freq+0x24>)
 8004fce:	5ccb      	ldrb	r3, [r1, r3]
 8004fd0:	fa22 f303 	lsr.w	r3, r2, r3
}    
 8004fd4:	4618      	mov	r0, r3
 8004fd6:	bd80      	pop	{r7, pc}
 8004fd8:	40021000 	.word	0x40021000
 8004fdc:	08007a04 	.word	0x08007a04

08004fe0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004fe0:	b580      	push	{r7, lr}
 8004fe2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004fe4:	f7ff ffde 	bl	8004fa4 <HAL_RCC_GetHCLKFreq>
 8004fe8:	4602      	mov	r2, r0
 8004fea:	4b05      	ldr	r3, [pc, #20]	; (8005000 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004fec:	685b      	ldr	r3, [r3, #4]
 8004fee:	0adb      	lsrs	r3, r3, #11
 8004ff0:	f003 0307 	and.w	r3, r3, #7
 8004ff4:	4903      	ldr	r1, [pc, #12]	; (8005004 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004ff6:	5ccb      	ldrb	r3, [r1, r3]
 8004ff8:	fa22 f303 	lsr.w	r3, r2, r3
} 
 8004ffc:	4618      	mov	r0, r3
 8004ffe:	bd80      	pop	{r7, pc}
 8005000:	40021000 	.word	0x40021000
 8005004:	08007a04 	.word	0x08007a04

08005008 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8005008:	b480      	push	{r7}
 800500a:	b085      	sub	sp, #20
 800500c:	af00      	add	r7, sp, #0
 800500e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8005010:	4b0b      	ldr	r3, [pc, #44]	; (8005040 <RCC_Delay+0x38>)
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	4a0b      	ldr	r2, [pc, #44]	; (8005044 <RCC_Delay+0x3c>)
 8005016:	fba2 2303 	umull	r2, r3, r2, r3
 800501a:	0a5b      	lsrs	r3, r3, #9
 800501c:	687a      	ldr	r2, [r7, #4]
 800501e:	fb02 f303 	mul.w	r3, r2, r3
 8005022:	60fb      	str	r3, [r7, #12]
  \brief   No Operation
  \details No Operation does nothing. This instruction can be used for code alignment purposes.
 */
__attribute__((always_inline)) __STATIC_INLINE void __NOP(void)
{
  __ASM volatile ("nop");
 8005024:	bf00      	nop
}
 8005026:	bf00      	nop
  do 
  {
    __NOP();
  } 
  while (Delay --);
 8005028:	68fb      	ldr	r3, [r7, #12]
 800502a:	1e5a      	subs	r2, r3, #1
 800502c:	60fa      	str	r2, [r7, #12]
 800502e:	2b00      	cmp	r3, #0
 8005030:	d1f8      	bne.n	8005024 <RCC_Delay+0x1c>
}
 8005032:	bf00      	nop
 8005034:	bf00      	nop
 8005036:	3714      	adds	r7, #20
 8005038:	46bd      	mov	sp, r7
 800503a:	bc80      	pop	{r7}
 800503c:	4770      	bx	lr
 800503e:	bf00      	nop
 8005040:	20000008 	.word	0x20000008
 8005044:	10624dd3 	.word	0x10624dd3

08005048 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim : TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005048:	b580      	push	{r7, lr}
 800504a:	b082      	sub	sp, #8
 800504c:	af00      	add	r7, sp, #0
 800504e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	691b      	ldr	r3, [r3, #16]
 8005056:	f003 0302 	and.w	r3, r3, #2
 800505a:	2b02      	cmp	r3, #2
 800505c:	d122      	bne.n	80050a4 <HAL_TIM_IRQHandler+0x5c>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) !=RESET)
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	68db      	ldr	r3, [r3, #12]
 8005064:	f003 0302 	and.w	r3, r3, #2
 8005068:	2b02      	cmp	r3, #2
 800506a:	d11b      	bne.n	80050a4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	f06f 0202 	mvn.w	r2, #2
 8005074:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	2201      	movs	r2, #1
 800507a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	699b      	ldr	r3, [r3, #24]
 8005082:	f003 0303 	and.w	r3, r3, #3
 8005086:	2b00      	cmp	r3, #0
 8005088:	d003      	beq.n	8005092 <HAL_TIM_IRQHandler+0x4a>
        {
          HAL_TIM_IC_CaptureCallback(htim);
 800508a:	6878      	ldr	r0, [r7, #4]
 800508c:	f000 f8ed 	bl	800526a <HAL_TIM_IC_CaptureCallback>
 8005090:	e005      	b.n	800509e <HAL_TIM_IRQHandler+0x56>
        }
        /* Output compare event */
        else
        {
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005092:	6878      	ldr	r0, [r7, #4]
 8005094:	f000 f8e0 	bl	8005258 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005098:	6878      	ldr	r0, [r7, #4]
 800509a:	f000 f8ef 	bl	800527c <HAL_TIM_PWM_PulseFinishedCallback>
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	2200      	movs	r2, #0
 80050a2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	691b      	ldr	r3, [r3, #16]
 80050aa:	f003 0304 	and.w	r3, r3, #4
 80050ae:	2b04      	cmp	r3, #4
 80050b0:	d122      	bne.n	80050f8 <HAL_TIM_IRQHandler+0xb0>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) !=RESET)
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	68db      	ldr	r3, [r3, #12]
 80050b8:	f003 0304 	and.w	r3, r3, #4
 80050bc:	2b04      	cmp	r3, #4
 80050be:	d11b      	bne.n	80050f8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	f06f 0204 	mvn.w	r2, #4
 80050c8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	2202      	movs	r2, #2
 80050ce:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	699b      	ldr	r3, [r3, #24]
 80050d6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80050da:	2b00      	cmp	r3, #0
 80050dc:	d003      	beq.n	80050e6 <HAL_TIM_IRQHandler+0x9e>
      {
        HAL_TIM_IC_CaptureCallback(htim);
 80050de:	6878      	ldr	r0, [r7, #4]
 80050e0:	f000 f8c3 	bl	800526a <HAL_TIM_IC_CaptureCallback>
 80050e4:	e005      	b.n	80050f2 <HAL_TIM_IRQHandler+0xaa>
      }
      /* Output compare event */
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80050e6:	6878      	ldr	r0, [r7, #4]
 80050e8:	f000 f8b6 	bl	8005258 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80050ec:	6878      	ldr	r0, [r7, #4]
 80050ee:	f000 f8c5 	bl	800527c <HAL_TIM_PWM_PulseFinishedCallback>
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	2200      	movs	r2, #0
 80050f6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	691b      	ldr	r3, [r3, #16]
 80050fe:	f003 0308 	and.w	r3, r3, #8
 8005102:	2b08      	cmp	r3, #8
 8005104:	d122      	bne.n	800514c <HAL_TIM_IRQHandler+0x104>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) !=RESET)
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	68db      	ldr	r3, [r3, #12]
 800510c:	f003 0308 	and.w	r3, r3, #8
 8005110:	2b08      	cmp	r3, #8
 8005112:	d11b      	bne.n	800514c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	f06f 0208 	mvn.w	r2, #8
 800511c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	2204      	movs	r2, #4
 8005122:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	69db      	ldr	r3, [r3, #28]
 800512a:	f003 0303 	and.w	r3, r3, #3
 800512e:	2b00      	cmp	r3, #0
 8005130:	d003      	beq.n	800513a <HAL_TIM_IRQHandler+0xf2>
      {
        HAL_TIM_IC_CaptureCallback(htim);
 8005132:	6878      	ldr	r0, [r7, #4]
 8005134:	f000 f899 	bl	800526a <HAL_TIM_IC_CaptureCallback>
 8005138:	e005      	b.n	8005146 <HAL_TIM_IRQHandler+0xfe>
      }
      /* Output compare event */
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800513a:	6878      	ldr	r0, [r7, #4]
 800513c:	f000 f88c 	bl	8005258 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005140:	6878      	ldr	r0, [r7, #4]
 8005142:	f000 f89b 	bl	800527c <HAL_TIM_PWM_PulseFinishedCallback>
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	2200      	movs	r2, #0
 800514a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	691b      	ldr	r3, [r3, #16]
 8005152:	f003 0310 	and.w	r3, r3, #16
 8005156:	2b10      	cmp	r3, #16
 8005158:	d122      	bne.n	80051a0 <HAL_TIM_IRQHandler+0x158>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) !=RESET)
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	68db      	ldr	r3, [r3, #12]
 8005160:	f003 0310 	and.w	r3, r3, #16
 8005164:	2b10      	cmp	r3, #16
 8005166:	d11b      	bne.n	80051a0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	f06f 0210 	mvn.w	r2, #16
 8005170:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	2208      	movs	r2, #8
 8005176:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	69db      	ldr	r3, [r3, #28]
 800517e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005182:	2b00      	cmp	r3, #0
 8005184:	d003      	beq.n	800518e <HAL_TIM_IRQHandler+0x146>
      {
        HAL_TIM_IC_CaptureCallback(htim);
 8005186:	6878      	ldr	r0, [r7, #4]
 8005188:	f000 f86f 	bl	800526a <HAL_TIM_IC_CaptureCallback>
 800518c:	e005      	b.n	800519a <HAL_TIM_IRQHandler+0x152>
      }
      /* Output compare event */
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800518e:	6878      	ldr	r0, [r7, #4]
 8005190:	f000 f862 	bl	8005258 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005194:	6878      	ldr	r0, [r7, #4]
 8005196:	f000 f871 	bl	800527c <HAL_TIM_PWM_PulseFinishedCallback>
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	2200      	movs	r2, #0
 800519e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	691b      	ldr	r3, [r3, #16]
 80051a6:	f003 0301 	and.w	r3, r3, #1
 80051aa:	2b01      	cmp	r3, #1
 80051ac:	d10e      	bne.n	80051cc <HAL_TIM_IRQHandler+0x184>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) !=RESET)
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	68db      	ldr	r3, [r3, #12]
 80051b4:	f003 0301 	and.w	r3, r3, #1
 80051b8:	2b01      	cmp	r3, #1
 80051ba:	d107      	bne.n	80051cc <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	f06f 0201 	mvn.w	r2, #1
 80051c4:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 80051c6:	6878      	ldr	r0, [r7, #4]
 80051c8:	f001 fc6e 	bl	8006aa8 <HAL_TIM_PeriodElapsedCallback>
    }
  }
  /* TIM Break input event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	691b      	ldr	r3, [r3, #16]
 80051d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80051d6:	2b80      	cmp	r3, #128	; 0x80
 80051d8:	d10e      	bne.n	80051f8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) !=RESET)
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	68db      	ldr	r3, [r3, #12]
 80051e0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80051e4:	2b80      	cmp	r3, #128	; 0x80
 80051e6:	d107      	bne.n	80051f8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80051f0:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 80051f2:	6878      	ldr	r0, [r7, #4]
 80051f4:	f000 f85d 	bl	80052b2 <HAL_TIMEx_BreakCallback>
    }
  }
  /* TIM Trigger detection event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	691b      	ldr	r3, [r3, #16]
 80051fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005202:	2b40      	cmp	r3, #64	; 0x40
 8005204:	d10e      	bne.n	8005224 <HAL_TIM_IRQHandler+0x1dc>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) !=RESET)
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	68db      	ldr	r3, [r3, #12]
 800520c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005210:	2b40      	cmp	r3, #64	; 0x40
 8005212:	d107      	bne.n	8005224 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800521c:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 800521e:	6878      	ldr	r0, [r7, #4]
 8005220:	f000 f835 	bl	800528e <HAL_TIM_TriggerCallback>
    }
  }
  /* TIM commutation event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	691b      	ldr	r3, [r3, #16]
 800522a:	f003 0320 	and.w	r3, r3, #32
 800522e:	2b20      	cmp	r3, #32
 8005230:	d10e      	bne.n	8005250 <HAL_TIM_IRQHandler+0x208>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) !=RESET)
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	68db      	ldr	r3, [r3, #12]
 8005238:	f003 0320 	and.w	r3, r3, #32
 800523c:	2b20      	cmp	r3, #32
 800523e:	d107      	bne.n	8005250 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	f06f 0220 	mvn.w	r2, #32
 8005248:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutationCallback(htim);
 800524a:	6878      	ldr	r0, [r7, #4]
 800524c:	f000 f828 	bl	80052a0 <HAL_TIMEx_CommutationCallback>
    }
  }
}
 8005250:	bf00      	nop
 8005252:	3708      	adds	r7, #8
 8005254:	46bd      	mov	sp, r7
 8005256:	bd80      	pop	{r7, pc}

08005258 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non blocking mode 
  * @param  htim : TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005258:	b480      	push	{r7}
 800525a:	b083      	sub	sp, #12
 800525c:	af00      	add	r7, sp, #0
 800525e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the __HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005260:	bf00      	nop
 8005262:	370c      	adds	r7, #12
 8005264:	46bd      	mov	sp, r7
 8005266:	bc80      	pop	{r7}
 8005268:	4770      	bx	lr

0800526a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non blocking mode 
  * @param  htim : TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800526a:	b480      	push	{r7}
 800526c:	b083      	sub	sp, #12
 800526e:	af00      	add	r7, sp, #0
 8005270:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the __HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005272:	bf00      	nop
 8005274:	370c      	adds	r7, #12
 8005276:	46bd      	mov	sp, r7
 8005278:	bc80      	pop	{r7}
 800527a:	4770      	bx	lr

0800527c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non blocking mode 
  * @param  htim : TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800527c:	b480      	push	{r7}
 800527e:	b083      	sub	sp, #12
 8005280:	af00      	add	r7, sp, #0
 8005282:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the __HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005284:	bf00      	nop
 8005286:	370c      	adds	r7, #12
 8005288:	46bd      	mov	sp, r7
 800528a:	bc80      	pop	{r7}
 800528c:	4770      	bx	lr

0800528e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non blocking mode 
  * @param  htim : TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800528e:	b480      	push	{r7}
 8005290:	b083      	sub	sp, #12
 8005292:	af00      	add	r7, sp, #0
 8005294:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005296:	bf00      	nop
 8005298:	370c      	adds	r7, #12
 800529a:	46bd      	mov	sp, r7
 800529c:	bc80      	pop	{r7}
 800529e:	4770      	bx	lr

080052a0 <HAL_TIMEx_CommutationCallback>:
  * @brief  Hall commutation changed callback in non blocking mode
  * @param  htim : TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutationCallback(TIM_HandleTypeDef *htim)
{
 80052a0:	b480      	push	{r7}
 80052a2:	b083      	sub	sp, #12
 80052a4:	af00      	add	r7, sp, #0
 80052a6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutationCallback could be implemented in the user file
   */
}
 80052a8:	bf00      	nop
 80052aa:	370c      	adds	r7, #12
 80052ac:	46bd      	mov	sp, r7
 80052ae:	bc80      	pop	{r7}
 80052b0:	4770      	bx	lr

080052b2 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non blocking mode
  * @param  htim : TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80052b2:	b480      	push	{r7}
 80052b4:	b083      	sub	sp, #12
 80052b6:	af00      	add	r7, sp, #0
 80052b8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80052ba:	bf00      	nop
 80052bc:	370c      	adds	r7, #12
 80052be:	46bd      	mov	sp, r7
 80052c0:	bc80      	pop	{r7}
 80052c2:	4770      	bx	lr

080052c4 <HAL_UART_Init>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80052c4:	b580      	push	{r7, lr}
 80052c6:	b082      	sub	sp, #8
 80052c8:	af00      	add	r7, sp, #0
 80052ca:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if(huart == NULL)
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	2b00      	cmp	r3, #0
 80052d0:	d101      	bne.n	80052d6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80052d2:	2301      	movs	r3, #1
 80052d4:	e03f      	b.n	8005356 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */
  
  if(huart->gState == HAL_UART_STATE_RESET)
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80052dc:	b2db      	uxtb	r3, r3
 80052de:	2b00      	cmp	r3, #0
 80052e0:	d106      	bne.n	80052f0 <HAL_UART_Init+0x2c>
  {  
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	2200      	movs	r2, #0
 80052e6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    HAL_UART_MspInit(huart);
 80052ea:	6878      	ldr	r0, [r7, #4]
 80052ec:	f000 f837 	bl	800535e <HAL_UART_MspInit>
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	2224      	movs	r2, #36	; 0x24
 80052f4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	68da      	ldr	r2, [r3, #12]
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005306:	60da      	str	r2, [r3, #12]
  
  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005308:	6878      	ldr	r0, [r7, #4]
 800530a:	f000 fb95 	bl	8005a38 <UART_SetConfig>
  
  /* In asynchronous mode, the following bits must be kept cleared: 
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	691a      	ldr	r2, [r3, #16]
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800531c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	695a      	ldr	r2, [r3, #20]
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800532c:	615a      	str	r2, [r3, #20]
  
  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	68da      	ldr	r2, [r3, #12]
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800533c:	60da      	str	r2, [r3, #12]
  
  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	2200      	movs	r2, #0
 8005342:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState= HAL_UART_STATE_READY;
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	2220      	movs	r2, #32
 8005348:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState= HAL_UART_STATE_READY;
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	2220      	movs	r2, #32
 8005350:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
  
  return HAL_OK;
 8005354:	2300      	movs	r3, #0
}
 8005356:	4618      	mov	r0, r3
 8005358:	3708      	adds	r7, #8
 800535a:	46bd      	mov	sp, r7
 800535c:	bd80      	pop	{r7, pc}

0800535e <HAL_UART_MspInit>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_MspInit(UART_HandleTypeDef *huart)
{
 800535e:	b480      	push	{r7}
 8005360:	b083      	sub	sp, #12
 8005362:	af00      	add	r7, sp, #0
 8005364:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_MspInit could be implemented in the user file
   */
}
 8005366:	bf00      	nop
 8005368:	370c      	adds	r7, #12
 800536a:	46bd      	mov	sp, r7
 800536c:	bc80      	pop	{r7}
 800536e:	4770      	bx	lr

08005370 <HAL_UART_Transmit>:
  * @param  Size: Amount of data to be sent
  * @param  Timeout: Timeout duration  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005370:	b580      	push	{r7, lr}
 8005372:	b088      	sub	sp, #32
 8005374:	af02      	add	r7, sp, #8
 8005376:	60f8      	str	r0, [r7, #12]
 8005378:	60b9      	str	r1, [r7, #8]
 800537a:	603b      	str	r3, [r7, #0]
 800537c:	4613      	mov	r3, r2
 800537e:	80fb      	strh	r3, [r7, #6]
  uint16_t* tmp;
  uint32_t tickstart = 0U;
 8005380:	2300      	movs	r3, #0
 8005382:	617b      	str	r3, [r7, #20]
  
  /* Check that a Tx process is not already ongoing */
  if(huart->gState == HAL_UART_STATE_READY)
 8005384:	68fb      	ldr	r3, [r7, #12]
 8005386:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800538a:	b2db      	uxtb	r3, r3
 800538c:	2b20      	cmp	r3, #32
 800538e:	f040 8083 	bne.w	8005498 <HAL_UART_Transmit+0x128>
  {
    if((pData == NULL) || (Size == 0U))
 8005392:	68bb      	ldr	r3, [r7, #8]
 8005394:	2b00      	cmp	r3, #0
 8005396:	d002      	beq.n	800539e <HAL_UART_Transmit+0x2e>
 8005398:	88fb      	ldrh	r3, [r7, #6]
 800539a:	2b00      	cmp	r3, #0
 800539c:	d101      	bne.n	80053a2 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 800539e:	2301      	movs	r3, #1
 80053a0:	e07b      	b.n	800549a <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80053a2:	68fb      	ldr	r3, [r7, #12]
 80053a4:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80053a8:	2b01      	cmp	r3, #1
 80053aa:	d101      	bne.n	80053b0 <HAL_UART_Transmit+0x40>
 80053ac:	2302      	movs	r3, #2
 80053ae:	e074      	b.n	800549a <HAL_UART_Transmit+0x12a>
 80053b0:	68fb      	ldr	r3, [r7, #12]
 80053b2:	2201      	movs	r2, #1
 80053b4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80053b8:	68fb      	ldr	r3, [r7, #12]
 80053ba:	2200      	movs	r2, #0
 80053bc:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80053be:	68fb      	ldr	r3, [r7, #12]
 80053c0:	2221      	movs	r2, #33	; 0x21
 80053c2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 80053c6:	f7fb fdbb 	bl	8000f40 <HAL_GetTick>
 80053ca:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80053cc:	68fb      	ldr	r3, [r7, #12]
 80053ce:	88fa      	ldrh	r2, [r7, #6]
 80053d0:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80053d2:	68fb      	ldr	r3, [r7, #12]
 80053d4:	88fa      	ldrh	r2, [r7, #6]
 80053d6:	84da      	strh	r2, [r3, #38]	; 0x26
    while(huart->TxXferCount > 0U)
 80053d8:	e042      	b.n	8005460 <HAL_UART_Transmit+0xf0>
    {
      huart->TxXferCount--;
 80053da:	68fb      	ldr	r3, [r7, #12]
 80053dc:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80053de:	b29b      	uxth	r3, r3
 80053e0:	3b01      	subs	r3, #1
 80053e2:	b29a      	uxth	r2, r3
 80053e4:	68fb      	ldr	r3, [r7, #12]
 80053e6:	84da      	strh	r2, [r3, #38]	; 0x26
      if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 80053e8:	68fb      	ldr	r3, [r7, #12]
 80053ea:	689b      	ldr	r3, [r3, #8]
 80053ec:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80053f0:	d122      	bne.n	8005438 <HAL_UART_Transmit+0xc8>
      {
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80053f2:	683b      	ldr	r3, [r7, #0]
 80053f4:	9300      	str	r3, [sp, #0]
 80053f6:	697b      	ldr	r3, [r7, #20]
 80053f8:	2200      	movs	r2, #0
 80053fa:	2180      	movs	r1, #128	; 0x80
 80053fc:	68f8      	ldr	r0, [r7, #12]
 80053fe:	f000 f9b1 	bl	8005764 <UART_WaitOnFlagUntilTimeout>
 8005402:	4603      	mov	r3, r0
 8005404:	2b00      	cmp	r3, #0
 8005406:	d001      	beq.n	800540c <HAL_UART_Transmit+0x9c>
        {
          return HAL_TIMEOUT;
 8005408:	2303      	movs	r3, #3
 800540a:	e046      	b.n	800549a <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t*) pData;
 800540c:	68bb      	ldr	r3, [r7, #8]
 800540e:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8005410:	693b      	ldr	r3, [r7, #16]
 8005412:	881b      	ldrh	r3, [r3, #0]
 8005414:	461a      	mov	r2, r3
 8005416:	68fb      	ldr	r3, [r7, #12]
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800541e:	605a      	str	r2, [r3, #4]
        if(huart->Init.Parity == UART_PARITY_NONE)
 8005420:	68fb      	ldr	r3, [r7, #12]
 8005422:	691b      	ldr	r3, [r3, #16]
 8005424:	2b00      	cmp	r3, #0
 8005426:	d103      	bne.n	8005430 <HAL_UART_Transmit+0xc0>
        {
          pData +=2U;
 8005428:	68bb      	ldr	r3, [r7, #8]
 800542a:	3302      	adds	r3, #2
 800542c:	60bb      	str	r3, [r7, #8]
 800542e:	e017      	b.n	8005460 <HAL_UART_Transmit+0xf0>
        }
        else
        {
          pData +=1U;
 8005430:	68bb      	ldr	r3, [r7, #8]
 8005432:	3301      	adds	r3, #1
 8005434:	60bb      	str	r3, [r7, #8]
 8005436:	e013      	b.n	8005460 <HAL_UART_Transmit+0xf0>
        }
      }
      else
      {
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005438:	683b      	ldr	r3, [r7, #0]
 800543a:	9300      	str	r3, [sp, #0]
 800543c:	697b      	ldr	r3, [r7, #20]
 800543e:	2200      	movs	r2, #0
 8005440:	2180      	movs	r1, #128	; 0x80
 8005442:	68f8      	ldr	r0, [r7, #12]
 8005444:	f000 f98e 	bl	8005764 <UART_WaitOnFlagUntilTimeout>
 8005448:	4603      	mov	r3, r0
 800544a:	2b00      	cmp	r3, #0
 800544c:	d001      	beq.n	8005452 <HAL_UART_Transmit+0xe2>
        {
          return HAL_TIMEOUT;
 800544e:	2303      	movs	r3, #3
 8005450:	e023      	b.n	800549a <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8005452:	68bb      	ldr	r3, [r7, #8]
 8005454:	1c5a      	adds	r2, r3, #1
 8005456:	60ba      	str	r2, [r7, #8]
 8005458:	781a      	ldrb	r2, [r3, #0]
 800545a:	68fb      	ldr	r3, [r7, #12]
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	605a      	str	r2, [r3, #4]
    while(huart->TxXferCount > 0U)
 8005460:	68fb      	ldr	r3, [r7, #12]
 8005462:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005464:	b29b      	uxth	r3, r3
 8005466:	2b00      	cmp	r3, #0
 8005468:	d1b7      	bne.n	80053da <HAL_UART_Transmit+0x6a>
      }
    }

    if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800546a:	683b      	ldr	r3, [r7, #0]
 800546c:	9300      	str	r3, [sp, #0]
 800546e:	697b      	ldr	r3, [r7, #20]
 8005470:	2200      	movs	r2, #0
 8005472:	2140      	movs	r1, #64	; 0x40
 8005474:	68f8      	ldr	r0, [r7, #12]
 8005476:	f000 f975 	bl	8005764 <UART_WaitOnFlagUntilTimeout>
 800547a:	4603      	mov	r3, r0
 800547c:	2b00      	cmp	r3, #0
 800547e:	d001      	beq.n	8005484 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8005480:	2303      	movs	r3, #3
 8005482:	e00a      	b.n	800549a <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005484:	68fb      	ldr	r3, [r7, #12]
 8005486:	2220      	movs	r2, #32
 8005488:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800548c:	68fb      	ldr	r3, [r7, #12]
 800548e:	2200      	movs	r2, #0
 8005490:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    return HAL_OK;
 8005494:	2300      	movs	r3, #0
 8005496:	e000      	b.n	800549a <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 8005498:	2302      	movs	r3, #2
  }
}
 800549a:	4618      	mov	r0, r3
 800549c:	3718      	adds	r7, #24
 800549e:	46bd      	mov	sp, r7
 80054a0:	bd80      	pop	{r7, pc}

080054a2 <HAL_UART_Receive_IT>:
  * @param  pData: Pointer to data buffer
  * @param  Size: Amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80054a2:	b480      	push	{r7}
 80054a4:	b085      	sub	sp, #20
 80054a6:	af00      	add	r7, sp, #0
 80054a8:	60f8      	str	r0, [r7, #12]
 80054aa:	60b9      	str	r1, [r7, #8]
 80054ac:	4613      	mov	r3, r2
 80054ae:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if(huart->RxState == HAL_UART_STATE_READY)
 80054b0:	68fb      	ldr	r3, [r7, #12]
 80054b2:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80054b6:	b2db      	uxtb	r3, r3
 80054b8:	2b20      	cmp	r3, #32
 80054ba:	d140      	bne.n	800553e <HAL_UART_Receive_IT+0x9c>
  {
    if((pData == NULL) || (Size == 0U))
 80054bc:	68bb      	ldr	r3, [r7, #8]
 80054be:	2b00      	cmp	r3, #0
 80054c0:	d002      	beq.n	80054c8 <HAL_UART_Receive_IT+0x26>
 80054c2:	88fb      	ldrh	r3, [r7, #6]
 80054c4:	2b00      	cmp	r3, #0
 80054c6:	d101      	bne.n	80054cc <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80054c8:	2301      	movs	r3, #1
 80054ca:	e039      	b.n	8005540 <HAL_UART_Receive_IT+0x9e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80054cc:	68fb      	ldr	r3, [r7, #12]
 80054ce:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80054d2:	2b01      	cmp	r3, #1
 80054d4:	d101      	bne.n	80054da <HAL_UART_Receive_IT+0x38>
 80054d6:	2302      	movs	r3, #2
 80054d8:	e032      	b.n	8005540 <HAL_UART_Receive_IT+0x9e>
 80054da:	68fb      	ldr	r3, [r7, #12]
 80054dc:	2201      	movs	r2, #1
 80054de:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 80054e2:	68fb      	ldr	r3, [r7, #12]
 80054e4:	68ba      	ldr	r2, [r7, #8]
 80054e6:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 80054e8:	68fb      	ldr	r3, [r7, #12]
 80054ea:	88fa      	ldrh	r2, [r7, #6]
 80054ec:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 80054ee:	68fb      	ldr	r3, [r7, #12]
 80054f0:	88fa      	ldrh	r2, [r7, #6]
 80054f2:	85da      	strh	r2, [r3, #46]	; 0x2e

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80054f4:	68fb      	ldr	r3, [r7, #12]
 80054f6:	2200      	movs	r2, #0
 80054f8:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80054fa:	68fb      	ldr	r3, [r7, #12]
 80054fc:	2222      	movs	r2, #34	; 0x22
 80054fe:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
    
    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8005502:	68fb      	ldr	r3, [r7, #12]
 8005504:	2200      	movs	r2, #0
 8005506:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800550a:	68fb      	ldr	r3, [r7, #12]
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	68da      	ldr	r2, [r3, #12]
 8005510:	68fb      	ldr	r3, [r7, #12]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005518:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800551a:	68fb      	ldr	r3, [r7, #12]
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	695a      	ldr	r2, [r3, #20]
 8005520:	68fb      	ldr	r3, [r7, #12]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	f042 0201 	orr.w	r2, r2, #1
 8005528:	615a      	str	r2, [r3, #20]

    /* Enable the UART Data Register not empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800552a:	68fb      	ldr	r3, [r7, #12]
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	68da      	ldr	r2, [r3, #12]
 8005530:	68fb      	ldr	r3, [r7, #12]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	f042 0220 	orr.w	r2, r2, #32
 8005538:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 800553a:	2300      	movs	r3, #0
 800553c:	e000      	b.n	8005540 <HAL_UART_Receive_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 800553e:	2302      	movs	r3, #2
  }
}
 8005540:	4618      	mov	r0, r3
 8005542:	3714      	adds	r7, #20
 8005544:	46bd      	mov	sp, r7
 8005546:	bc80      	pop	{r7}
 8005548:	4770      	bx	lr
	...

0800554c <HAL_UART_IRQHandler>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800554c:	b580      	push	{r7, lr}
 800554e:	b088      	sub	sp, #32
 8005550:	af00      	add	r7, sp, #0
 8005552:	6078      	str	r0, [r7, #4]
   uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	61fb      	str	r3, [r7, #28]
   uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	68db      	ldr	r3, [r3, #12]
 8005562:	61bb      	str	r3, [r7, #24]
   uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	695b      	ldr	r3, [r3, #20]
 800556a:	617b      	str	r3, [r7, #20]
   uint32_t errorflags = 0x00U;
 800556c:	2300      	movs	r3, #0
 800556e:	613b      	str	r3, [r7, #16]
   uint32_t dmarequest = 0x00U;
 8005570:	2300      	movs	r3, #0
 8005572:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8005574:	69fb      	ldr	r3, [r7, #28]
 8005576:	f003 030f 	and.w	r3, r3, #15
 800557a:	613b      	str	r3, [r7, #16]
  if(errorflags == RESET)
 800557c:	693b      	ldr	r3, [r7, #16]
 800557e:	2b00      	cmp	r3, #0
 8005580:	d10d      	bne.n	800559e <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if(((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005582:	69fb      	ldr	r3, [r7, #28]
 8005584:	f003 0320 	and.w	r3, r3, #32
 8005588:	2b00      	cmp	r3, #0
 800558a:	d008      	beq.n	800559e <HAL_UART_IRQHandler+0x52>
 800558c:	69bb      	ldr	r3, [r7, #24]
 800558e:	f003 0320 	and.w	r3, r3, #32
 8005592:	2b00      	cmp	r3, #0
 8005594:	d003      	beq.n	800559e <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8005596:	6878      	ldr	r0, [r7, #4]
 8005598:	f000 f9cc 	bl	8005934 <UART_Receive_IT>
      return;
 800559c:	e0cb      	b.n	8005736 <HAL_UART_IRQHandler+0x1ea>
    }
  }

  /* If some errors occur */
  if((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800559e:	693b      	ldr	r3, [r7, #16]
 80055a0:	2b00      	cmp	r3, #0
 80055a2:	f000 80ab 	beq.w	80056fc <HAL_UART_IRQHandler+0x1b0>
 80055a6:	697b      	ldr	r3, [r7, #20]
 80055a8:	f003 0301 	and.w	r3, r3, #1
 80055ac:	2b00      	cmp	r3, #0
 80055ae:	d105      	bne.n	80055bc <HAL_UART_IRQHandler+0x70>
 80055b0:	69bb      	ldr	r3, [r7, #24]
 80055b2:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80055b6:	2b00      	cmp	r3, #0
 80055b8:	f000 80a0 	beq.w	80056fc <HAL_UART_IRQHandler+0x1b0>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if(((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80055bc:	69fb      	ldr	r3, [r7, #28]
 80055be:	f003 0301 	and.w	r3, r3, #1
 80055c2:	2b00      	cmp	r3, #0
 80055c4:	d00a      	beq.n	80055dc <HAL_UART_IRQHandler+0x90>
 80055c6:	69bb      	ldr	r3, [r7, #24]
 80055c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80055cc:	2b00      	cmp	r3, #0
 80055ce:	d005      	beq.n	80055dc <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80055d4:	f043 0201 	orr.w	r2, r3, #1
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if(((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80055dc:	69fb      	ldr	r3, [r7, #28]
 80055de:	f003 0304 	and.w	r3, r3, #4
 80055e2:	2b00      	cmp	r3, #0
 80055e4:	d00a      	beq.n	80055fc <HAL_UART_IRQHandler+0xb0>
 80055e6:	697b      	ldr	r3, [r7, #20]
 80055e8:	f003 0301 	and.w	r3, r3, #1
 80055ec:	2b00      	cmp	r3, #0
 80055ee:	d005      	beq.n	80055fc <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80055f4:	f043 0202 	orr.w	r2, r3, #2
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if(((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80055fc:	69fb      	ldr	r3, [r7, #28]
 80055fe:	f003 0302 	and.w	r3, r3, #2
 8005602:	2b00      	cmp	r3, #0
 8005604:	d00a      	beq.n	800561c <HAL_UART_IRQHandler+0xd0>
 8005606:	697b      	ldr	r3, [r7, #20]
 8005608:	f003 0301 	and.w	r3, r3, #1
 800560c:	2b00      	cmp	r3, #0
 800560e:	d005      	beq.n	800561c <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005614:	f043 0204 	orr.w	r2, r3, #4
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if(((isrflags & USART_SR_ORE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800561c:	69fb      	ldr	r3, [r7, #28]
 800561e:	f003 0308 	and.w	r3, r3, #8
 8005622:	2b00      	cmp	r3, #0
 8005624:	d00a      	beq.n	800563c <HAL_UART_IRQHandler+0xf0>
 8005626:	697b      	ldr	r3, [r7, #20]
 8005628:	f003 0301 	and.w	r3, r3, #1
 800562c:	2b00      	cmp	r3, #0
 800562e:	d005      	beq.n	800563c <HAL_UART_IRQHandler+0xf0>
    { 
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005634:	f043 0208 	orr.w	r2, r3, #8
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if(huart->ErrorCode != HAL_UART_ERROR_NONE)
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005640:	2b00      	cmp	r3, #0
 8005642:	d077      	beq.n	8005734 <HAL_UART_IRQHandler+0x1e8>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if(((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005644:	69fb      	ldr	r3, [r7, #28]
 8005646:	f003 0320 	and.w	r3, r3, #32
 800564a:	2b00      	cmp	r3, #0
 800564c:	d007      	beq.n	800565e <HAL_UART_IRQHandler+0x112>
 800564e:	69bb      	ldr	r3, [r7, #24]
 8005650:	f003 0320 	and.w	r3, r3, #32
 8005654:	2b00      	cmp	r3, #0
 8005656:	d002      	beq.n	800565e <HAL_UART_IRQHandler+0x112>
      {
        UART_Receive_IT(huart);
 8005658:	6878      	ldr	r0, [r7, #4]
 800565a:	f000 f96b 	bl	8005934 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	695b      	ldr	r3, [r3, #20]
 8005664:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005668:	2b00      	cmp	r3, #0
 800566a:	bf14      	ite	ne
 800566c:	2301      	movne	r3, #1
 800566e:	2300      	moveq	r3, #0
 8005670:	b2db      	uxtb	r3, r3
 8005672:	60fb      	str	r3, [r7, #12]
      if(((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005678:	f003 0308 	and.w	r3, r3, #8
 800567c:	2b00      	cmp	r3, #0
 800567e:	d102      	bne.n	8005686 <HAL_UART_IRQHandler+0x13a>
 8005680:	68fb      	ldr	r3, [r7, #12]
 8005682:	2b00      	cmp	r3, #0
 8005684:	d031      	beq.n	80056ea <HAL_UART_IRQHandler+0x19e>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005686:	6878      	ldr	r0, [r7, #4]
 8005688:	f000 f8b6 	bl	80057f8 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if(HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	695b      	ldr	r3, [r3, #20]
 8005692:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005696:	2b00      	cmp	r3, #0
 8005698:	d023      	beq.n	80056e2 <HAL_UART_IRQHandler+0x196>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	695a      	ldr	r2, [r3, #20]
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80056a8:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if(huart->hdmarx != NULL)
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80056ae:	2b00      	cmp	r3, #0
 80056b0:	d013      	beq.n	80056da <HAL_UART_IRQHandler+0x18e>
          {
            /* Set the UART DMA Abort callback : 
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80056b6:	4a21      	ldr	r2, [pc, #132]	; (800573c <HAL_UART_IRQHandler+0x1f0>)
 80056b8:	635a      	str	r2, [r3, #52]	; 0x34
            if(HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80056be:	4618      	mov	r0, r3
 80056c0:	f7fc fbb2 	bl	8001e28 <HAL_DMA_Abort_IT>
 80056c4:	4603      	mov	r3, r0
 80056c6:	2b00      	cmp	r3, #0
 80056c8:	d016      	beq.n	80056f8 <HAL_UART_IRQHandler+0x1ac>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80056ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80056d0:	687a      	ldr	r2, [r7, #4]
 80056d2:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80056d4:	4610      	mov	r0, r2
 80056d6:	4798      	blx	r3
        if(HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80056d8:	e00e      	b.n	80056f8 <HAL_UART_IRQHandler+0x1ac>
            }
          }
          else
          {
            /* Call user error callback */
            HAL_UART_ErrorCallback(huart);
 80056da:	6878      	ldr	r0, [r7, #4]
 80056dc:	f000 f839 	bl	8005752 <HAL_UART_ErrorCallback>
        if(HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80056e0:	e00a      	b.n	80056f8 <HAL_UART_IRQHandler+0x1ac>
          }
        }
        else
        {
          /* Call user error callback */
          HAL_UART_ErrorCallback(huart);
 80056e2:	6878      	ldr	r0, [r7, #4]
 80056e4:	f000 f835 	bl	8005752 <HAL_UART_ErrorCallback>
        if(HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80056e8:	e006      	b.n	80056f8 <HAL_UART_IRQHandler+0x1ac>
      }
      else
      {
        /* Non Blocking error : transfer could go on. 
           Error is notified to user through user error callback */
        HAL_UART_ErrorCallback(huart);
 80056ea:	6878      	ldr	r0, [r7, #4]
 80056ec:	f000 f831 	bl	8005752 <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	2200      	movs	r2, #0
 80056f4:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 80056f6:	e01d      	b.n	8005734 <HAL_UART_IRQHandler+0x1e8>
        if(HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80056f8:	bf00      	nop
    return;
 80056fa:	e01b      	b.n	8005734 <HAL_UART_IRQHandler+0x1e8>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if(((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80056fc:	69fb      	ldr	r3, [r7, #28]
 80056fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005702:	2b00      	cmp	r3, #0
 8005704:	d008      	beq.n	8005718 <HAL_UART_IRQHandler+0x1cc>
 8005706:	69bb      	ldr	r3, [r7, #24]
 8005708:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800570c:	2b00      	cmp	r3, #0
 800570e:	d003      	beq.n	8005718 <HAL_UART_IRQHandler+0x1cc>
  {
    UART_Transmit_IT(huart);
 8005710:	6878      	ldr	r0, [r7, #4]
 8005712:	f000 f8a2 	bl	800585a <UART_Transmit_IT>
    return;
 8005716:	e00e      	b.n	8005736 <HAL_UART_IRQHandler+0x1ea>
  }
  
  /* UART in mode Transmitter end --------------------------------------------*/
  if(((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8005718:	69fb      	ldr	r3, [r7, #28]
 800571a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800571e:	2b00      	cmp	r3, #0
 8005720:	d009      	beq.n	8005736 <HAL_UART_IRQHandler+0x1ea>
 8005722:	69bb      	ldr	r3, [r7, #24]
 8005724:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005728:	2b00      	cmp	r3, #0
 800572a:	d004      	beq.n	8005736 <HAL_UART_IRQHandler+0x1ea>
  {
    UART_EndTransmit_IT(huart);
 800572c:	6878      	ldr	r0, [r7, #4]
 800572e:	f000 f8e9 	bl	8005904 <UART_EndTransmit_IT>
    return;
 8005732:	e000      	b.n	8005736 <HAL_UART_IRQHandler+0x1ea>
    return;
 8005734:	bf00      	nop
  }
}
 8005736:	3720      	adds	r7, #32
 8005738:	46bd      	mov	sp, r7
 800573a:	bd80      	pop	{r7, pc}
 800573c:	08005833 	.word	0x08005833

08005740 <HAL_UART_TxCpltCallback>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
 __weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005740:	b480      	push	{r7}
 8005742:	b083      	sub	sp, #12
 8005744:	af00      	add	r7, sp, #0
 8005746:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */ 
}
 8005748:	bf00      	nop
 800574a:	370c      	adds	r7, #12
 800574c:	46bd      	mov	sp, r7
 800574e:	bc80      	pop	{r7}
 8005750:	4770      	bx	lr

08005752 <HAL_UART_ErrorCallback>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
 __weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005752:	b480      	push	{r7}
 8005754:	b083      	sub	sp, #12
 8005756:	af00      	add	r7, sp, #0
 8005758:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart); 
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */ 
}
 800575a:	bf00      	nop
 800575c:	370c      	adds	r7, #12
 800575e:	46bd      	mov	sp, r7
 8005760:	bc80      	pop	{r7}
 8005762:	4770      	bx	lr

08005764 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8005764:	b580      	push	{r7, lr}
 8005766:	b084      	sub	sp, #16
 8005768:	af00      	add	r7, sp, #0
 800576a:	60f8      	str	r0, [r7, #12]
 800576c:	60b9      	str	r1, [r7, #8]
 800576e:	603b      	str	r3, [r7, #0]
 8005770:	4613      	mov	r3, r2
 8005772:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status) 
 8005774:	e02c      	b.n	80057d0 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
 8005776:	69bb      	ldr	r3, [r7, #24]
 8005778:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800577c:	d028      	beq.n	80057d0 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 800577e:	69bb      	ldr	r3, [r7, #24]
 8005780:	2b00      	cmp	r3, #0
 8005782:	d007      	beq.n	8005794 <UART_WaitOnFlagUntilTimeout+0x30>
 8005784:	f7fb fbdc 	bl	8000f40 <HAL_GetTick>
 8005788:	4602      	mov	r2, r0
 800578a:	683b      	ldr	r3, [r7, #0]
 800578c:	1ad3      	subs	r3, r2, r3
 800578e:	69ba      	ldr	r2, [r7, #24]
 8005790:	429a      	cmp	r2, r3
 8005792:	d21d      	bcs.n	80057d0 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005794:	68fb      	ldr	r3, [r7, #12]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	68da      	ldr	r2, [r3, #12]
 800579a:	68fb      	ldr	r3, [r7, #12]
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80057a2:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80057a4:	68fb      	ldr	r3, [r7, #12]
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	695a      	ldr	r2, [r3, #20]
 80057aa:	68fb      	ldr	r3, [r7, #12]
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	f022 0201 	bic.w	r2, r2, #1
 80057b2:	615a      	str	r2, [r3, #20]
        
        huart->gState  = HAL_UART_STATE_READY;
 80057b4:	68fb      	ldr	r3, [r7, #12]
 80057b6:	2220      	movs	r2, #32
 80057b8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 80057bc:	68fb      	ldr	r3, [r7, #12]
 80057be:	2220      	movs	r2, #32
 80057c0:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
        
        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80057c4:	68fb      	ldr	r3, [r7, #12]
 80057c6:	2200      	movs	r2, #0
 80057c8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
        
        return HAL_TIMEOUT;
 80057cc:	2303      	movs	r3, #3
 80057ce:	e00f      	b.n	80057f0 <UART_WaitOnFlagUntilTimeout+0x8c>
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status) 
 80057d0:	68fb      	ldr	r3, [r7, #12]
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	681a      	ldr	r2, [r3, #0]
 80057d6:	68bb      	ldr	r3, [r7, #8]
 80057d8:	4013      	ands	r3, r2
 80057da:	68ba      	ldr	r2, [r7, #8]
 80057dc:	429a      	cmp	r2, r3
 80057de:	bf0c      	ite	eq
 80057e0:	2301      	moveq	r3, #1
 80057e2:	2300      	movne	r3, #0
 80057e4:	b2db      	uxtb	r3, r3
 80057e6:	461a      	mov	r2, r3
 80057e8:	79fb      	ldrb	r3, [r7, #7]
 80057ea:	429a      	cmp	r2, r3
 80057ec:	d0c3      	beq.n	8005776 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  
  return HAL_OK;
 80057ee:	2300      	movs	r3, #0
}
 80057f0:	4618      	mov	r0, r3
 80057f2:	3710      	adds	r7, #16
 80057f4:	46bd      	mov	sp, r7
 80057f6:	bd80      	pop	{r7, pc}

080057f8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart: UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80057f8:	b480      	push	{r7}
 80057fa:	b083      	sub	sp, #12
 80057fc:	af00      	add	r7, sp, #0
 80057fe:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	68da      	ldr	r2, [r3, #12]
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800580e:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	695a      	ldr	r2, [r3, #20]
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	f022 0201 	bic.w	r2, r2, #1
 800581e:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	2220      	movs	r2, #32
 8005824:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8005828:	bf00      	nop
 800582a:	370c      	adds	r7, #12
 800582c:	46bd      	mov	sp, r7
 800582e:	bc80      	pop	{r7}
 8005830:	4770      	bx	lr

08005832 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005832:	b580      	push	{r7, lr}
 8005834:	b084      	sub	sp, #16
 8005836:	af00      	add	r7, sp, #0
 8005838:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef* huart = ( UART_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800583e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8005840:	68fb      	ldr	r3, [r7, #12]
 8005842:	2200      	movs	r2, #0
 8005844:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8005846:	68fb      	ldr	r3, [r7, #12]
 8005848:	2200      	movs	r2, #0
 800584a:	84da      	strh	r2, [r3, #38]	; 0x26

  HAL_UART_ErrorCallback(huart);
 800584c:	68f8      	ldr	r0, [r7, #12]
 800584e:	f7ff ff80 	bl	8005752 <HAL_UART_ErrorCallback>
}
 8005852:	bf00      	nop
 8005854:	3710      	adds	r7, #16
 8005856:	46bd      	mov	sp, r7
 8005858:	bd80      	pop	{r7, pc}

0800585a <UART_Transmit_IT>:
  * @param  huart: Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800585a:	b480      	push	{r7}
 800585c:	b085      	sub	sp, #20
 800585e:	af00      	add	r7, sp, #0
 8005860:	6078      	str	r0, [r7, #4]
  uint16_t* tmp;
  
  /* Check that a Tx process is ongoing */
  if(huart->gState == HAL_UART_STATE_BUSY_TX)
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8005868:	b2db      	uxtb	r3, r3
 800586a:	2b21      	cmp	r3, #33	; 0x21
 800586c:	d144      	bne.n	80058f8 <UART_Transmit_IT+0x9e>
  {
    if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	689b      	ldr	r3, [r3, #8]
 8005872:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005876:	d11a      	bne.n	80058ae <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t*) huart->pTxBuffPtr;
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	6a1b      	ldr	r3, [r3, #32]
 800587c:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800587e:	68fb      	ldr	r3, [r7, #12]
 8005880:	881b      	ldrh	r3, [r3, #0]
 8005882:	461a      	mov	r2, r3
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800588c:	605a      	str	r2, [r3, #4]
      if(huart->Init.Parity == UART_PARITY_NONE)
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	691b      	ldr	r3, [r3, #16]
 8005892:	2b00      	cmp	r3, #0
 8005894:	d105      	bne.n	80058a2 <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	6a1b      	ldr	r3, [r3, #32]
 800589a:	1c9a      	adds	r2, r3, #2
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	621a      	str	r2, [r3, #32]
 80058a0:	e00e      	b.n	80058c0 <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	6a1b      	ldr	r3, [r3, #32]
 80058a6:	1c5a      	adds	r2, r3, #1
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	621a      	str	r2, [r3, #32]
 80058ac:	e008      	b.n	80058c0 <UART_Transmit_IT+0x66>
      }
    } 
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	6a1b      	ldr	r3, [r3, #32]
 80058b2:	1c59      	adds	r1, r3, #1
 80058b4:	687a      	ldr	r2, [r7, #4]
 80058b6:	6211      	str	r1, [r2, #32]
 80058b8:	781a      	ldrb	r2, [r3, #0]
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	605a      	str	r2, [r3, #4]
    }

    if(--huart->TxXferCount == 0U)
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80058c4:	b29b      	uxth	r3, r3
 80058c6:	3b01      	subs	r3, #1
 80058c8:	b29b      	uxth	r3, r3
 80058ca:	687a      	ldr	r2, [r7, #4]
 80058cc:	4619      	mov	r1, r3
 80058ce:	84d1      	strh	r1, [r2, #38]	; 0x26
 80058d0:	2b00      	cmp	r3, #0
 80058d2:	d10f      	bne.n	80058f4 <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	68da      	ldr	r2, [r3, #12]
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80058e2:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */    
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	68da      	ldr	r2, [r3, #12]
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80058f2:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80058f4:	2300      	movs	r3, #0
 80058f6:	e000      	b.n	80058fa <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 80058f8:	2302      	movs	r3, #2
  }
}
 80058fa:	4618      	mov	r0, r3
 80058fc:	3714      	adds	r7, #20
 80058fe:	46bd      	mov	sp, r7
 8005900:	bc80      	pop	{r7}
 8005902:	4770      	bx	lr

08005904 <UART_EndTransmit_IT>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005904:	b580      	push	{r7, lr}
 8005906:	b082      	sub	sp, #8
 8005908:	af00      	add	r7, sp, #0
 800590a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */    
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	68da      	ldr	r2, [r3, #12]
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800591a:	60da      	str	r2, [r3, #12]
  
  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	2220      	movs	r2, #32
 8005920:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  HAL_UART_TxCpltCallback(huart);
 8005924:	6878      	ldr	r0, [r7, #4]
 8005926:	f7ff ff0b 	bl	8005740 <HAL_UART_TxCpltCallback>
  
  return HAL_OK;
 800592a:	2300      	movs	r3, #0
}
 800592c:	4618      	mov	r0, r3
 800592e:	3708      	adds	r7, #8
 8005930:	46bd      	mov	sp, r7
 8005932:	bd80      	pop	{r7, pc}

08005934 <UART_Receive_IT>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8005934:	b580      	push	{r7, lr}
 8005936:	b084      	sub	sp, #16
 8005938:	af00      	add	r7, sp, #0
 800593a:	6078      	str	r0, [r7, #4]
  uint16_t* tmp;
  
  /* Check that a Rx process is ongoing */
  if(huart->RxState == HAL_UART_STATE_BUSY_RX) 
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8005942:	b2db      	uxtb	r3, r3
 8005944:	2b22      	cmp	r3, #34	; 0x22
 8005946:	d171      	bne.n	8005a2c <UART_Receive_IT+0xf8>
  {
    if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	689b      	ldr	r3, [r3, #8]
 800594c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005950:	d123      	bne.n	800599a <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t*) huart->pRxBuffPtr;
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005956:	60fb      	str	r3, [r7, #12]
      if(huart->Init.Parity == UART_PARITY_NONE)
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	691b      	ldr	r3, [r3, #16]
 800595c:	2b00      	cmp	r3, #0
 800595e:	d10e      	bne.n	800597e <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	685b      	ldr	r3, [r3, #4]
 8005966:	b29b      	uxth	r3, r3
 8005968:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800596c:	b29a      	uxth	r2, r3
 800596e:	68fb      	ldr	r3, [r7, #12]
 8005970:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005976:	1c9a      	adds	r2, r3, #2
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	629a      	str	r2, [r3, #40]	; 0x28
 800597c:	e029      	b.n	80059d2 <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	685b      	ldr	r3, [r3, #4]
 8005984:	b29b      	uxth	r3, r3
 8005986:	b2db      	uxtb	r3, r3
 8005988:	b29a      	uxth	r2, r3
 800598a:	68fb      	ldr	r3, [r7, #12]
 800598c:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005992:	1c5a      	adds	r2, r3, #1
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	629a      	str	r2, [r3, #40]	; 0x28
 8005998:	e01b      	b.n	80059d2 <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if(huart->Init.Parity == UART_PARITY_NONE)
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	691b      	ldr	r3, [r3, #16]
 800599e:	2b00      	cmp	r3, #0
 80059a0:	d10a      	bne.n	80059b8 <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	6858      	ldr	r0, [r3, #4]
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80059ac:	1c59      	adds	r1, r3, #1
 80059ae:	687a      	ldr	r2, [r7, #4]
 80059b0:	6291      	str	r1, [r2, #40]	; 0x28
 80059b2:	b2c2      	uxtb	r2, r0
 80059b4:	701a      	strb	r2, [r3, #0]
 80059b6:	e00c      	b.n	80059d2 <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	685b      	ldr	r3, [r3, #4]
 80059be:	b2da      	uxtb	r2, r3
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80059c4:	1c58      	adds	r0, r3, #1
 80059c6:	6879      	ldr	r1, [r7, #4]
 80059c8:	6288      	str	r0, [r1, #40]	; 0x28
 80059ca:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80059ce:	b2d2      	uxtb	r2, r2
 80059d0:	701a      	strb	r2, [r3, #0]
      }
    }

    if(--huart->RxXferCount == 0U)
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80059d6:	b29b      	uxth	r3, r3
 80059d8:	3b01      	subs	r3, #1
 80059da:	b29b      	uxth	r3, r3
 80059dc:	687a      	ldr	r2, [r7, #4]
 80059de:	4619      	mov	r1, r3
 80059e0:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80059e2:	2b00      	cmp	r3, #0
 80059e4:	d120      	bne.n	8005a28 <UART_Receive_IT+0xf4>
    {
      /* Disable the IRDA Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	68da      	ldr	r2, [r3, #12]
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	f022 0220 	bic.w	r2, r2, #32
 80059f4:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	68da      	ldr	r2, [r3, #12]
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005a04:	60da      	str	r2, [r3, #12]
        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	695a      	ldr	r2, [r3, #20]
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	f022 0201 	bic.w	r2, r2, #1
 8005a14:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	2220      	movs	r2, #32
 8005a1a:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

      HAL_UART_RxCpltCallback(huart);
 8005a1e:	6878      	ldr	r0, [r7, #4]
 8005a20:	f000 fc46 	bl	80062b0 <HAL_UART_RxCpltCallback>

      return HAL_OK;
 8005a24:	2300      	movs	r3, #0
 8005a26:	e002      	b.n	8005a2e <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 8005a28:	2300      	movs	r3, #0
 8005a2a:	e000      	b.n	8005a2e <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 8005a2c:	2302      	movs	r3, #2
  }
}
 8005a2e:	4618      	mov	r0, r3
 8005a30:	3710      	adds	r7, #16
 8005a32:	46bd      	mov	sp, r7
 8005a34:	bd80      	pop	{r7, pc}
	...

08005a38 <UART_SetConfig>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005a38:	b5b0      	push	{r4, r5, r7, lr}
 8005a3a:	b084      	sub	sp, #16
 8005a3c:	af00      	add	r7, sp, #0
 8005a3e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0x00U;
 8005a40:	2300      	movs	r3, #0
 8005a42:	60fb      	str	r3, [r7, #12]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*------- UART-associated USART registers setting : CR2 Configuration ------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according 
   * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	691b      	ldr	r3, [r3, #16]
 8005a4a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	68da      	ldr	r2, [r3, #12]
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	430a      	orrs	r2, r1
 8005a58:	611a      	str	r2, [r3, #16]
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1, 
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8), 
             tmpreg);
#else
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	689a      	ldr	r2, [r3, #8]
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	691b      	ldr	r3, [r3, #16]
 8005a62:	431a      	orrs	r2, r3
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	695b      	ldr	r3, [r3, #20]
 8005a68:	4313      	orrs	r3, r2
 8005a6a:	68fa      	ldr	r2, [r7, #12]
 8005a6c:	4313      	orrs	r3, r2
 8005a6e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1, 
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	68db      	ldr	r3, [r3, #12]
 8005a76:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8005a7a:	f023 030c 	bic.w	r3, r3, #12
 8005a7e:	687a      	ldr	r2, [r7, #4]
 8005a80:	6812      	ldr	r2, [r2, #0]
 8005a82:	68f9      	ldr	r1, [r7, #12]
 8005a84:	430b      	orrs	r3, r1
 8005a86:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*------- UART-associated USART registers setting : CR3 Configuration ------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	695b      	ldr	r3, [r3, #20]
 8005a8e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	699a      	ldr	r2, [r3, #24]
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	430a      	orrs	r2, r1
 8005a9c:	615a      	str	r2, [r3, #20]
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
    }
  }
#else
  /*-------------------------- USART BRR Configuration ---------------------*/
  if(huart->Instance == USART1)
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	4a6f      	ldr	r2, [pc, #444]	; (8005c60 <UART_SetConfig+0x228>)
 8005aa4:	4293      	cmp	r3, r2
 8005aa6:	d16b      	bne.n	8005b80 <UART_SetConfig+0x148>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8005aa8:	f7ff fa9a 	bl	8004fe0 <HAL_RCC_GetPCLK2Freq>
 8005aac:	4602      	mov	r2, r0
 8005aae:	4613      	mov	r3, r2
 8005ab0:	009b      	lsls	r3, r3, #2
 8005ab2:	4413      	add	r3, r2
 8005ab4:	009a      	lsls	r2, r3, #2
 8005ab6:	441a      	add	r2, r3
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	685b      	ldr	r3, [r3, #4]
 8005abc:	009b      	lsls	r3, r3, #2
 8005abe:	fbb2 f3f3 	udiv	r3, r2, r3
 8005ac2:	4a68      	ldr	r2, [pc, #416]	; (8005c64 <UART_SetConfig+0x22c>)
 8005ac4:	fba2 2303 	umull	r2, r3, r2, r3
 8005ac8:	095b      	lsrs	r3, r3, #5
 8005aca:	011c      	lsls	r4, r3, #4
 8005acc:	f7ff fa88 	bl	8004fe0 <HAL_RCC_GetPCLK2Freq>
 8005ad0:	4602      	mov	r2, r0
 8005ad2:	4613      	mov	r3, r2
 8005ad4:	009b      	lsls	r3, r3, #2
 8005ad6:	4413      	add	r3, r2
 8005ad8:	009a      	lsls	r2, r3, #2
 8005ada:	441a      	add	r2, r3
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	685b      	ldr	r3, [r3, #4]
 8005ae0:	009b      	lsls	r3, r3, #2
 8005ae2:	fbb2 f5f3 	udiv	r5, r2, r3
 8005ae6:	f7ff fa7b 	bl	8004fe0 <HAL_RCC_GetPCLK2Freq>
 8005aea:	4602      	mov	r2, r0
 8005aec:	4613      	mov	r3, r2
 8005aee:	009b      	lsls	r3, r3, #2
 8005af0:	4413      	add	r3, r2
 8005af2:	009a      	lsls	r2, r3, #2
 8005af4:	441a      	add	r2, r3
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	685b      	ldr	r3, [r3, #4]
 8005afa:	009b      	lsls	r3, r3, #2
 8005afc:	fbb2 f3f3 	udiv	r3, r2, r3
 8005b00:	4a58      	ldr	r2, [pc, #352]	; (8005c64 <UART_SetConfig+0x22c>)
 8005b02:	fba2 2303 	umull	r2, r3, r2, r3
 8005b06:	095b      	lsrs	r3, r3, #5
 8005b08:	2264      	movs	r2, #100	; 0x64
 8005b0a:	fb02 f303 	mul.w	r3, r2, r3
 8005b0e:	1aeb      	subs	r3, r5, r3
 8005b10:	011b      	lsls	r3, r3, #4
 8005b12:	3332      	adds	r3, #50	; 0x32
 8005b14:	4a53      	ldr	r2, [pc, #332]	; (8005c64 <UART_SetConfig+0x22c>)
 8005b16:	fba2 2303 	umull	r2, r3, r2, r3
 8005b1a:	095b      	lsrs	r3, r3, #5
 8005b1c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005b20:	441c      	add	r4, r3
 8005b22:	f7ff fa5d 	bl	8004fe0 <HAL_RCC_GetPCLK2Freq>
 8005b26:	4602      	mov	r2, r0
 8005b28:	4613      	mov	r3, r2
 8005b2a:	009b      	lsls	r3, r3, #2
 8005b2c:	4413      	add	r3, r2
 8005b2e:	009a      	lsls	r2, r3, #2
 8005b30:	441a      	add	r2, r3
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	685b      	ldr	r3, [r3, #4]
 8005b36:	009b      	lsls	r3, r3, #2
 8005b38:	fbb2 f5f3 	udiv	r5, r2, r3
 8005b3c:	f7ff fa50 	bl	8004fe0 <HAL_RCC_GetPCLK2Freq>
 8005b40:	4602      	mov	r2, r0
 8005b42:	4613      	mov	r3, r2
 8005b44:	009b      	lsls	r3, r3, #2
 8005b46:	4413      	add	r3, r2
 8005b48:	009a      	lsls	r2, r3, #2
 8005b4a:	441a      	add	r2, r3
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	685b      	ldr	r3, [r3, #4]
 8005b50:	009b      	lsls	r3, r3, #2
 8005b52:	fbb2 f3f3 	udiv	r3, r2, r3
 8005b56:	4a43      	ldr	r2, [pc, #268]	; (8005c64 <UART_SetConfig+0x22c>)
 8005b58:	fba2 2303 	umull	r2, r3, r2, r3
 8005b5c:	095b      	lsrs	r3, r3, #5
 8005b5e:	2264      	movs	r2, #100	; 0x64
 8005b60:	fb02 f303 	mul.w	r3, r2, r3
 8005b64:	1aeb      	subs	r3, r5, r3
 8005b66:	011b      	lsls	r3, r3, #4
 8005b68:	3332      	adds	r3, #50	; 0x32
 8005b6a:	4a3e      	ldr	r2, [pc, #248]	; (8005c64 <UART_SetConfig+0x22c>)
 8005b6c:	fba2 2303 	umull	r2, r3, r2, r3
 8005b70:	095b      	lsrs	r3, r3, #5
 8005b72:	f003 020f 	and.w	r2, r3, #15
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	4422      	add	r2, r4
 8005b7c:	609a      	str	r2, [r3, #8]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
  }
#endif /* USART_CR1_OVER8 */
}
 8005b7e:	e06a      	b.n	8005c56 <UART_SetConfig+0x21e>
    huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8005b80:	f7ff fa1a 	bl	8004fb8 <HAL_RCC_GetPCLK1Freq>
 8005b84:	4602      	mov	r2, r0
 8005b86:	4613      	mov	r3, r2
 8005b88:	009b      	lsls	r3, r3, #2
 8005b8a:	4413      	add	r3, r2
 8005b8c:	009a      	lsls	r2, r3, #2
 8005b8e:	441a      	add	r2, r3
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	685b      	ldr	r3, [r3, #4]
 8005b94:	009b      	lsls	r3, r3, #2
 8005b96:	fbb2 f3f3 	udiv	r3, r2, r3
 8005b9a:	4a32      	ldr	r2, [pc, #200]	; (8005c64 <UART_SetConfig+0x22c>)
 8005b9c:	fba2 2303 	umull	r2, r3, r2, r3
 8005ba0:	095b      	lsrs	r3, r3, #5
 8005ba2:	011c      	lsls	r4, r3, #4
 8005ba4:	f7ff fa08 	bl	8004fb8 <HAL_RCC_GetPCLK1Freq>
 8005ba8:	4602      	mov	r2, r0
 8005baa:	4613      	mov	r3, r2
 8005bac:	009b      	lsls	r3, r3, #2
 8005bae:	4413      	add	r3, r2
 8005bb0:	009a      	lsls	r2, r3, #2
 8005bb2:	441a      	add	r2, r3
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	685b      	ldr	r3, [r3, #4]
 8005bb8:	009b      	lsls	r3, r3, #2
 8005bba:	fbb2 f5f3 	udiv	r5, r2, r3
 8005bbe:	f7ff f9fb 	bl	8004fb8 <HAL_RCC_GetPCLK1Freq>
 8005bc2:	4602      	mov	r2, r0
 8005bc4:	4613      	mov	r3, r2
 8005bc6:	009b      	lsls	r3, r3, #2
 8005bc8:	4413      	add	r3, r2
 8005bca:	009a      	lsls	r2, r3, #2
 8005bcc:	441a      	add	r2, r3
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	685b      	ldr	r3, [r3, #4]
 8005bd2:	009b      	lsls	r3, r3, #2
 8005bd4:	fbb2 f3f3 	udiv	r3, r2, r3
 8005bd8:	4a22      	ldr	r2, [pc, #136]	; (8005c64 <UART_SetConfig+0x22c>)
 8005bda:	fba2 2303 	umull	r2, r3, r2, r3
 8005bde:	095b      	lsrs	r3, r3, #5
 8005be0:	2264      	movs	r2, #100	; 0x64
 8005be2:	fb02 f303 	mul.w	r3, r2, r3
 8005be6:	1aeb      	subs	r3, r5, r3
 8005be8:	011b      	lsls	r3, r3, #4
 8005bea:	3332      	adds	r3, #50	; 0x32
 8005bec:	4a1d      	ldr	r2, [pc, #116]	; (8005c64 <UART_SetConfig+0x22c>)
 8005bee:	fba2 2303 	umull	r2, r3, r2, r3
 8005bf2:	095b      	lsrs	r3, r3, #5
 8005bf4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005bf8:	441c      	add	r4, r3
 8005bfa:	f7ff f9dd 	bl	8004fb8 <HAL_RCC_GetPCLK1Freq>
 8005bfe:	4602      	mov	r2, r0
 8005c00:	4613      	mov	r3, r2
 8005c02:	009b      	lsls	r3, r3, #2
 8005c04:	4413      	add	r3, r2
 8005c06:	009a      	lsls	r2, r3, #2
 8005c08:	441a      	add	r2, r3
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	685b      	ldr	r3, [r3, #4]
 8005c0e:	009b      	lsls	r3, r3, #2
 8005c10:	fbb2 f5f3 	udiv	r5, r2, r3
 8005c14:	f7ff f9d0 	bl	8004fb8 <HAL_RCC_GetPCLK1Freq>
 8005c18:	4602      	mov	r2, r0
 8005c1a:	4613      	mov	r3, r2
 8005c1c:	009b      	lsls	r3, r3, #2
 8005c1e:	4413      	add	r3, r2
 8005c20:	009a      	lsls	r2, r3, #2
 8005c22:	441a      	add	r2, r3
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	685b      	ldr	r3, [r3, #4]
 8005c28:	009b      	lsls	r3, r3, #2
 8005c2a:	fbb2 f3f3 	udiv	r3, r2, r3
 8005c2e:	4a0d      	ldr	r2, [pc, #52]	; (8005c64 <UART_SetConfig+0x22c>)
 8005c30:	fba2 2303 	umull	r2, r3, r2, r3
 8005c34:	095b      	lsrs	r3, r3, #5
 8005c36:	2264      	movs	r2, #100	; 0x64
 8005c38:	fb02 f303 	mul.w	r3, r2, r3
 8005c3c:	1aeb      	subs	r3, r5, r3
 8005c3e:	011b      	lsls	r3, r3, #4
 8005c40:	3332      	adds	r3, #50	; 0x32
 8005c42:	4a08      	ldr	r2, [pc, #32]	; (8005c64 <UART_SetConfig+0x22c>)
 8005c44:	fba2 2303 	umull	r2, r3, r2, r3
 8005c48:	095b      	lsrs	r3, r3, #5
 8005c4a:	f003 020f 	and.w	r2, r3, #15
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	4422      	add	r2, r4
 8005c54:	609a      	str	r2, [r3, #8]
}
 8005c56:	bf00      	nop
 8005c58:	3710      	adds	r7, #16
 8005c5a:	46bd      	mov	sp, r7
 8005c5c:	bdb0      	pop	{r4, r5, r7, pc}
 8005c5e:	bf00      	nop
 8005c60:	40013800 	.word	0x40013800
 8005c64:	51eb851f 	.word	0x51eb851f

08005c68 <can_Init>:

//===========================================================================
// INIT CAN
//===========================================================================
void can_Init()
{
 8005c68:	b580      	push	{r7, lr}
 8005c6a:	af00      	add	r7, sp, #0
	CanHandle.Instance = CAN1;
 8005c6c:	4b19      	ldr	r3, [pc, #100]	; (8005cd4 <can_Init+0x6c>)
 8005c6e:	4a1a      	ldr	r2, [pc, #104]	; (8005cd8 <can_Init+0x70>)
 8005c70:	601a      	str	r2, [r3, #0]
	CanHandle.pTxMsg = &canTxMsg;
 8005c72:	4b18      	ldr	r3, [pc, #96]	; (8005cd4 <can_Init+0x6c>)
 8005c74:	4a19      	ldr	r2, [pc, #100]	; (8005cdc <can_Init+0x74>)
 8005c76:	631a      	str	r2, [r3, #48]	; 0x30
	CanHandle.pRxMsg = &canRxMsg;
 8005c78:	4b16      	ldr	r3, [pc, #88]	; (8005cd4 <can_Init+0x6c>)
 8005c7a:	4a19      	ldr	r2, [pc, #100]	; (8005ce0 <can_Init+0x78>)
 8005c7c:	635a      	str	r2, [r3, #52]	; 0x34

	CanHandle.Init.TTCM = DISABLE;
 8005c7e:	4b15      	ldr	r3, [pc, #84]	; (8005cd4 <can_Init+0x6c>)
 8005c80:	2200      	movs	r2, #0
 8005c82:	619a      	str	r2, [r3, #24]
	CanHandle.Init.ABOM = DISABLE;
 8005c84:	4b13      	ldr	r3, [pc, #76]	; (8005cd4 <can_Init+0x6c>)
 8005c86:	2200      	movs	r2, #0
 8005c88:	61da      	str	r2, [r3, #28]
	CanHandle.Init.AWUM = DISABLE;
 8005c8a:	4b12      	ldr	r3, [pc, #72]	; (8005cd4 <can_Init+0x6c>)
 8005c8c:	2200      	movs	r2, #0
 8005c8e:	621a      	str	r2, [r3, #32]
	CanHandle.Init.NART = DISABLE;
 8005c90:	4b10      	ldr	r3, [pc, #64]	; (8005cd4 <can_Init+0x6c>)
 8005c92:	2200      	movs	r2, #0
 8005c94:	625a      	str	r2, [r3, #36]	; 0x24
	CanHandle.Init.RFLM = DISABLE;
 8005c96:	4b0f      	ldr	r3, [pc, #60]	; (8005cd4 <can_Init+0x6c>)
 8005c98:	2200      	movs	r2, #0
 8005c9a:	629a      	str	r2, [r3, #40]	; 0x28
	CanHandle.Init.TXFP = DISABLE;
 8005c9c:	4b0d      	ldr	r3, [pc, #52]	; (8005cd4 <can_Init+0x6c>)
 8005c9e:	2200      	movs	r2, #0
 8005ca0:	62da      	str	r2, [r3, #44]	; 0x2c
	CanHandle.Init.Mode = CAN_MODE_NORMAL;
 8005ca2:	4b0c      	ldr	r3, [pc, #48]	; (8005cd4 <can_Init+0x6c>)
 8005ca4:	2200      	movs	r2, #0
 8005ca6:	609a      	str	r2, [r3, #8]

	// 125kbps bit rate (default)
	// APB1 peripheral clock = 36000000Hz
	CanHandle.Init.Prescaler = 18;      // number of time quanta = 36000000/18/125000 = 16
 8005ca8:	4b0a      	ldr	r3, [pc, #40]	; (8005cd4 <can_Init+0x6c>)
 8005caa:	2212      	movs	r2, #18
 8005cac:	605a      	str	r2, [r3, #4]
	CanHandle.Init.SJW = CAN_SJW_1TQ;
 8005cae:	4b09      	ldr	r3, [pc, #36]	; (8005cd4 <can_Init+0x6c>)
 8005cb0:	2200      	movs	r2, #0
 8005cb2:	60da      	str	r2, [r3, #12]
	CanHandle.Init.BS1 = CAN_BS1_11TQ;  // sample point at (1 + 11) / 16 * 100 = 75%
 8005cb4:	4b07      	ldr	r3, [pc, #28]	; (8005cd4 <can_Init+0x6c>)
 8005cb6:	f44f 2220 	mov.w	r2, #655360	; 0xa0000
 8005cba:	611a      	str	r2, [r3, #16]
	CanHandle.Init.BS2 = CAN_BS2_4TQ;
 8005cbc:	4b05      	ldr	r3, [pc, #20]	; (8005cd4 <can_Init+0x6c>)
 8005cbe:	f44f 1240 	mov.w	r2, #3145728	; 0x300000
 8005cc2:	615a      	str	r2, [r3, #20]

	HAL_CAN_Init(&CanHandle);
 8005cc4:	4803      	ldr	r0, [pc, #12]	; (8005cd4 <can_Init+0x6c>)
 8005cc6:	f7fb f969 	bl	8000f9c <HAL_CAN_Init>
	can_IrqSet(can_callback);
 8005cca:	4806      	ldr	r0, [pc, #24]	; (8005ce4 <can_Init+0x7c>)
 8005ccc:	f000 f896 	bl	8005dfc <can_IrqSet>
	
//	can_Filter(0, 0, CANAny, 0);
}
 8005cd0:	bf00      	nop
 8005cd2:	bd80      	pop	{r7, pc}
 8005cd4:	200001d4 	.word	0x200001d4
 8005cd8:	40006400 	.word	0x40006400
 8005cdc:	20000214 	.word	0x20000214
 8005ce0:	20000248 	.word	0x20000248
 8005ce4:	08006919 	.word	0x08006919

08005ce8 <can_SetFreq>:

//===========================================================================
int can_SetFreq(int hz) {
 8005ce8:	b580      	push	{r7, lr}
 8005cea:	b082      	sub	sp, #8
 8005cec:	af00      	add	r7, sp, #0
 8005cee:	6078      	str	r0, [r7, #4]

    HAL_NVIC_DisableIRQ(USB_LP_CAN1_RX0_IRQn);
 8005cf0:	2014      	movs	r0, #20
 8005cf2:	f7fc f85c 	bl	8001dae <HAL_NVIC_DisableIRQ>
    // APB1 peripheral clock = 36000000Hz
    switch(hz) {
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	4a36      	ldr	r2, [pc, #216]	; (8005dd4 <can_SetFreq+0xec>)
 8005cfa:	4293      	cmp	r3, r2
 8005cfc:	d014      	beq.n	8005d28 <can_SetFreq+0x40>
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	4a34      	ldr	r2, [pc, #208]	; (8005dd4 <can_SetFreq+0xec>)
 8005d02:	4293      	cmp	r3, r2
 8005d04:	dc4c      	bgt.n	8005da0 <can_SetFreq+0xb8>
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	4a33      	ldr	r2, [pc, #204]	; (8005dd8 <can_SetFreq+0xf0>)
 8005d0a:	4293      	cmp	r3, r2
 8005d0c:	d01b      	beq.n	8005d46 <can_SetFreq+0x5e>
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	4a31      	ldr	r2, [pc, #196]	; (8005dd8 <can_SetFreq+0xf0>)
 8005d12:	4293      	cmp	r3, r2
 8005d14:	dc44      	bgt.n	8005da0 <can_SetFreq+0xb8>
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	4a30      	ldr	r2, [pc, #192]	; (8005ddc <can_SetFreq+0xf4>)
 8005d1a:	4293      	cmp	r3, r2
 8005d1c:	d031      	beq.n	8005d82 <can_SetFreq+0x9a>
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	4a2f      	ldr	r2, [pc, #188]	; (8005de0 <can_SetFreq+0xf8>)
 8005d22:	4293      	cmp	r3, r2
 8005d24:	d01e      	beq.n	8005d64 <can_SetFreq+0x7c>
 8005d26:	e03b      	b.n	8005da0 <can_SetFreq+0xb8>
    case 1000000:
        // 1000kbps bit rate
        CanHandle.Init.Prescaler = 3;//3;      // number of time quanta = 36000000/3/1000000 = 12
 8005d28:	4b2e      	ldr	r3, [pc, #184]	; (8005de4 <can_SetFreq+0xfc>)
 8005d2a:	2203      	movs	r2, #3
 8005d2c:	605a      	str	r2, [r3, #4]
        CanHandle.Init.SJW = CAN_SJW_1TQ;
 8005d2e:	4b2d      	ldr	r3, [pc, #180]	; (8005de4 <can_SetFreq+0xfc>)
 8005d30:	2200      	movs	r2, #0
 8005d32:	60da      	str	r2, [r3, #12]
        CanHandle.Init.BS1 = CAN_BS1_8TQ;  // sample point at: (1 + 8) / 12 * 100 = 75%
 8005d34:	4b2b      	ldr	r3, [pc, #172]	; (8005de4 <can_SetFreq+0xfc>)
 8005d36:	f44f 22e0 	mov.w	r2, #458752	; 0x70000
 8005d3a:	611a      	str	r2, [r3, #16]
        CanHandle.Init.BS2 = CAN_BS2_3TQ;
 8005d3c:	4b29      	ldr	r3, [pc, #164]	; (8005de4 <can_SetFreq+0xfc>)
 8005d3e:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8005d42:	615a      	str	r2, [r3, #20]
        break;
 8005d44:	e03a      	b.n	8005dbc <can_SetFreq+0xd4>
    case 500000:
        // 500kbps bit rate
        CanHandle.Init.Prescaler = 6;      // number of time quanta = 36000000/6/500000 = 12
 8005d46:	4b27      	ldr	r3, [pc, #156]	; (8005de4 <can_SetFreq+0xfc>)
 8005d48:	2206      	movs	r2, #6
 8005d4a:	605a      	str	r2, [r3, #4]
        CanHandle.Init.SJW = CAN_SJW_1TQ;
 8005d4c:	4b25      	ldr	r3, [pc, #148]	; (8005de4 <can_SetFreq+0xfc>)
 8005d4e:	2200      	movs	r2, #0
 8005d50:	60da      	str	r2, [r3, #12]
        CanHandle.Init.BS1 = CAN_BS1_8TQ;  // sample point at: (1 + 8) / 12 * 100 = 75%
 8005d52:	4b24      	ldr	r3, [pc, #144]	; (8005de4 <can_SetFreq+0xfc>)
 8005d54:	f44f 22e0 	mov.w	r2, #458752	; 0x70000
 8005d58:	611a      	str	r2, [r3, #16]
        CanHandle.Init.BS2 = CAN_BS2_3TQ;
 8005d5a:	4b22      	ldr	r3, [pc, #136]	; (8005de4 <can_SetFreq+0xfc>)
 8005d5c:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8005d60:	615a      	str	r2, [r3, #20]
        break;
 8005d62:	e02b      	b.n	8005dbc <can_SetFreq+0xd4>
    case 250000:
        // 250kbps
        CanHandle.Init.Prescaler = 9;      // number of time quanta = 36000000/9/250000 = 16
 8005d64:	4b1f      	ldr	r3, [pc, #124]	; (8005de4 <can_SetFreq+0xfc>)
 8005d66:	2209      	movs	r2, #9
 8005d68:	605a      	str	r2, [r3, #4]
        CanHandle.Init.SJW = CAN_SJW_1TQ;
 8005d6a:	4b1e      	ldr	r3, [pc, #120]	; (8005de4 <can_SetFreq+0xfc>)
 8005d6c:	2200      	movs	r2, #0
 8005d6e:	60da      	str	r2, [r3, #12]
        CanHandle.Init.BS1 = CAN_BS1_11TQ; // sample point at: (1 + 11) / 16 * 100 = 75%
 8005d70:	4b1c      	ldr	r3, [pc, #112]	; (8005de4 <can_SetFreq+0xfc>)
 8005d72:	f44f 2220 	mov.w	r2, #655360	; 0xa0000
 8005d76:	611a      	str	r2, [r3, #16]
        CanHandle.Init.BS2 = CAN_BS2_4TQ;
 8005d78:	4b1a      	ldr	r3, [pc, #104]	; (8005de4 <can_SetFreq+0xfc>)
 8005d7a:	f44f 1240 	mov.w	r2, #3145728	; 0x300000
 8005d7e:	615a      	str	r2, [r3, #20]
        break;
 8005d80:	e01c      	b.n	8005dbc <can_SetFreq+0xd4>
    case 125000:
        // 125kbps
        CanHandle.Init.Prescaler = 18;     // number of time quanta = 36000000/18/125000 = 16
 8005d82:	4b18      	ldr	r3, [pc, #96]	; (8005de4 <can_SetFreq+0xfc>)
 8005d84:	2212      	movs	r2, #18
 8005d86:	605a      	str	r2, [r3, #4]
        CanHandle.Init.SJW = CAN_SJW_1TQ;
 8005d88:	4b16      	ldr	r3, [pc, #88]	; (8005de4 <can_SetFreq+0xfc>)
 8005d8a:	2200      	movs	r2, #0
 8005d8c:	60da      	str	r2, [r3, #12]
        CanHandle.Init.BS1 = CAN_BS1_11TQ; // sample point at: (1 + 11) / 16 * 100 = 75%
 8005d8e:	4b15      	ldr	r3, [pc, #84]	; (8005de4 <can_SetFreq+0xfc>)
 8005d90:	f44f 2220 	mov.w	r2, #655360	; 0xa0000
 8005d94:	611a      	str	r2, [r3, #16]
        CanHandle.Init.BS2 = CAN_BS2_4TQ;
 8005d96:	4b13      	ldr	r3, [pc, #76]	; (8005de4 <can_SetFreq+0xfc>)
 8005d98:	f44f 1240 	mov.w	r2, #3145728	; 0x300000
 8005d9c:	615a      	str	r2, [r3, #20]
        break;
 8005d9e:	e00d      	b.n	8005dbc <can_SetFreq+0xd4>
    default:
        // 125kbps (default)
        CanHandle.Init.Prescaler = 18;     // number of time quanta = 36000000/18/125000 = 16
 8005da0:	4b10      	ldr	r3, [pc, #64]	; (8005de4 <can_SetFreq+0xfc>)
 8005da2:	2212      	movs	r2, #18
 8005da4:	605a      	str	r2, [r3, #4]
        CanHandle.Init.SJW = CAN_SJW_1TQ;
 8005da6:	4b0f      	ldr	r3, [pc, #60]	; (8005de4 <can_SetFreq+0xfc>)
 8005da8:	2200      	movs	r2, #0
 8005daa:	60da      	str	r2, [r3, #12]
        CanHandle.Init.BS1 = CAN_BS1_11TQ; // sample point at: (1 + 11) / 16 * 100 = 75%
 8005dac:	4b0d      	ldr	r3, [pc, #52]	; (8005de4 <can_SetFreq+0xfc>)
 8005dae:	f44f 2220 	mov.w	r2, #655360	; 0xa0000
 8005db2:	611a      	str	r2, [r3, #16]
        CanHandle.Init.BS2 = CAN_BS2_4TQ;
 8005db4:	4b0b      	ldr	r3, [pc, #44]	; (8005de4 <can_SetFreq+0xfc>)
 8005db6:	f44f 1240 	mov.w	r2, #3145728	; 0x300000
 8005dba:	615a      	str	r2, [r3, #20]
    }

    HAL_CAN_Init(&CanHandle);
 8005dbc:	4809      	ldr	r0, [pc, #36]	; (8005de4 <can_SetFreq+0xfc>)
 8005dbe:	f7fb f8ed 	bl	8000f9c <HAL_CAN_Init>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 8005dc2:	2014      	movs	r0, #20
 8005dc4:	f7fb ffe5 	bl	8001d92 <HAL_NVIC_EnableIRQ>

    return 1;
 8005dc8:	2301      	movs	r3, #1
}
 8005dca:	4618      	mov	r0, r3
 8005dcc:	3708      	adds	r7, #8
 8005dce:	46bd      	mov	sp, r7
 8005dd0:	bd80      	pop	{r7, pc}
 8005dd2:	bf00      	nop
 8005dd4:	000f4240 	.word	0x000f4240
 8005dd8:	0007a120 	.word	0x0007a120
 8005ddc:	0001e848 	.word	0x0001e848
 8005de0:	0003d090 	.word	0x0003d090
 8005de4:	200001d4 	.word	0x200001d4

08005de8 <can_IrqInit>:
//===========================================================================

void can_IrqInit(void)
{
 8005de8:	b580      	push	{r7, lr}
 8005dea:	af00      	add	r7, sp, #0
	HAL_CAN_Receive_IT(&CanHandle, CAN_FIFO0);
 8005dec:	2100      	movs	r1, #0
 8005dee:	4802      	ldr	r0, [pc, #8]	; (8005df8 <can_IrqInit+0x10>)
 8005df0:	f7fb fc06 	bl	8001600 <HAL_CAN_Receive_IT>
}
 8005df4:	bf00      	nop
 8005df6:	bd80      	pop	{r7, pc}
 8005df8:	200001d4 	.word	0x200001d4

08005dfc <can_IrqSet>:
{
    rxCompleteCallback = NULL;
}
//===========================================================================
void can_IrqSet(void (*fptr) (void))
{
 8005dfc:	b480      	push	{r7}
 8005dfe:	b083      	sub	sp, #12
 8005e00:	af00      	add	r7, sp, #0
 8005e02:	6078      	str	r0, [r7, #4]
    rxCompleteCallback = fptr;
 8005e04:	4a03      	ldr	r2, [pc, #12]	; (8005e14 <can_IrqSet+0x18>)
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	6013      	str	r3, [r2, #0]
}
 8005e0a:	bf00      	nop
 8005e0c:	370c      	adds	r7, #12
 8005e0e:	46bd      	mov	sp, r7
 8005e10:	bc80      	pop	{r7}
 8005e12:	4770      	bx	lr
 8005e14:	20000508 	.word	0x20000508

08005e18 <can_Write>:
//===========================================================================
int can_Write(CAN_Message msg)
{
 8005e18:	b590      	push	{r4, r7, lr}
 8005e1a:	b087      	sub	sp, #28
 8005e1c:	af00      	add	r7, sp, #0
 8005e1e:	463c      	mov	r4, r7
 8005e20:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    int i = 0;
 8005e24:	2300      	movs	r3, #0
 8005e26:	617b      	str	r3, [r7, #20]

    if(msg.format == CANStandard) {
 8005e28:	7b7b      	ldrb	r3, [r7, #13]
 8005e2a:	2b00      	cmp	r3, #0
 8005e2c:	d108      	bne.n	8005e40 <can_Write+0x28>
        CanHandle.pTxMsg->StdId = msg.id;
 8005e2e:	4b25      	ldr	r3, [pc, #148]	; (8005ec4 <can_Write+0xac>)
 8005e30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e32:	683a      	ldr	r2, [r7, #0]
 8005e34:	601a      	str	r2, [r3, #0]
        CanHandle.pTxMsg->ExtId = 0x00;
 8005e36:	4b23      	ldr	r3, [pc, #140]	; (8005ec4 <can_Write+0xac>)
 8005e38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e3a:	2200      	movs	r2, #0
 8005e3c:	605a      	str	r2, [r3, #4]
 8005e3e:	e007      	b.n	8005e50 <can_Write+0x38>
    }
    else {
        CanHandle.pTxMsg->StdId = 0x00;
 8005e40:	4b20      	ldr	r3, [pc, #128]	; (8005ec4 <can_Write+0xac>)
 8005e42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e44:	2200      	movs	r2, #0
 8005e46:	601a      	str	r2, [r3, #0]
        CanHandle.pTxMsg->ExtId = msg.id;
 8005e48:	4b1e      	ldr	r3, [pc, #120]	; (8005ec4 <can_Write+0xac>)
 8005e4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e4c:	683a      	ldr	r2, [r7, #0]
 8005e4e:	605a      	str	r2, [r3, #4]
    }

    CanHandle.pTxMsg->RTR = msg.type == CANData ? CAN_RTR_DATA : CAN_RTR_REMOTE;
 8005e50:	7bbb      	ldrb	r3, [r7, #14]
 8005e52:	2b00      	cmp	r3, #0
 8005e54:	d101      	bne.n	8005e5a <can_Write+0x42>
 8005e56:	2200      	movs	r2, #0
 8005e58:	e000      	b.n	8005e5c <can_Write+0x44>
 8005e5a:	2202      	movs	r2, #2
 8005e5c:	4b19      	ldr	r3, [pc, #100]	; (8005ec4 <can_Write+0xac>)
 8005e5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e60:	60da      	str	r2, [r3, #12]
    CanHandle.pTxMsg->IDE = msg.format == CANStandard ? CAN_ID_STD : CAN_ID_EXT;
 8005e62:	7b7b      	ldrb	r3, [r7, #13]
 8005e64:	2b00      	cmp	r3, #0
 8005e66:	d101      	bne.n	8005e6c <can_Write+0x54>
 8005e68:	2200      	movs	r2, #0
 8005e6a:	e000      	b.n	8005e6e <can_Write+0x56>
 8005e6c:	2204      	movs	r2, #4
 8005e6e:	4b15      	ldr	r3, [pc, #84]	; (8005ec4 <can_Write+0xac>)
 8005e70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e72:	609a      	str	r2, [r3, #8]
    CanHandle.pTxMsg->DLC = msg.len;
 8005e74:	7b3a      	ldrb	r2, [r7, #12]
 8005e76:	4b13      	ldr	r3, [pc, #76]	; (8005ec4 <can_Write+0xac>)
 8005e78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e7a:	611a      	str	r2, [r3, #16]

    for(i = 0; i < msg.len; i++)
 8005e7c:	2300      	movs	r3, #0
 8005e7e:	617b      	str	r3, [r7, #20]
 8005e80:	e00d      	b.n	8005e9e <can_Write+0x86>
        CanHandle.pTxMsg->Data[i] = msg.data[i];
 8005e82:	1d3a      	adds	r2, r7, #4
 8005e84:	697b      	ldr	r3, [r7, #20]
 8005e86:	4413      	add	r3, r2
 8005e88:	7819      	ldrb	r1, [r3, #0]
 8005e8a:	4b0e      	ldr	r3, [pc, #56]	; (8005ec4 <can_Write+0xac>)
 8005e8c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005e8e:	697b      	ldr	r3, [r7, #20]
 8005e90:	3304      	adds	r3, #4
 8005e92:	009b      	lsls	r3, r3, #2
 8005e94:	4413      	add	r3, r2
 8005e96:	6059      	str	r1, [r3, #4]
    for(i = 0; i < msg.len; i++)
 8005e98:	697b      	ldr	r3, [r7, #20]
 8005e9a:	3301      	adds	r3, #1
 8005e9c:	617b      	str	r3, [r7, #20]
 8005e9e:	7b3b      	ldrb	r3, [r7, #12]
 8005ea0:	461a      	mov	r2, r3
 8005ea2:	697b      	ldr	r3, [r7, #20]
 8005ea4:	4293      	cmp	r3, r2
 8005ea6:	dbec      	blt.n	8005e82 <can_Write+0x6a>

    if(HAL_CAN_Transmit(&CanHandle, 0) != HAL_OK)
 8005ea8:	2100      	movs	r1, #0
 8005eaa:	4806      	ldr	r0, [pc, #24]	; (8005ec4 <can_Write+0xac>)
 8005eac:	f7fb fa32 	bl	8001314 <HAL_CAN_Transmit>
 8005eb0:	4603      	mov	r3, r0
 8005eb2:	2b00      	cmp	r3, #0
 8005eb4:	d001      	beq.n	8005eba <can_Write+0xa2>
							{
								 return 0;
 8005eb6:	2300      	movs	r3, #0
 8005eb8:	e000      	b.n	8005ebc <can_Write+0xa4>
							 }

    else
        return 1;
 8005eba:	2301      	movs	r3, #1
}
 8005ebc:	4618      	mov	r0, r3
 8005ebe:	371c      	adds	r7, #28
 8005ec0:	46bd      	mov	sp, r7
 8005ec2:	bd90      	pop	{r4, r7, pc}
 8005ec4:	200001d4 	.word	0x200001d4

08005ec8 <can_Read>:
//===========================================================================
int can_Read(CAN_Message* msg)
{
 8005ec8:	b480      	push	{r7}
 8005eca:	b085      	sub	sp, #20
 8005ecc:	af00      	add	r7, sp, #0
 8005ece:	6078      	str	r0, [r7, #4]
	int i=0;
 8005ed0:	2300      	movs	r3, #0
 8005ed2:	60fb      	str	r3, [r7, #12]

    msg->id = CanHandle.pRxMsg->IDE == CAN_ID_STD ? CanHandle.pRxMsg->StdId : CanHandle.pRxMsg->ExtId;
 8005ed4:	4b25      	ldr	r3, [pc, #148]	; (8005f6c <can_Read+0xa4>)
 8005ed6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005ed8:	689b      	ldr	r3, [r3, #8]
 8005eda:	2b00      	cmp	r3, #0
 8005edc:	d103      	bne.n	8005ee6 <can_Read+0x1e>
 8005ede:	4b23      	ldr	r3, [pc, #140]	; (8005f6c <can_Read+0xa4>)
 8005ee0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	e002      	b.n	8005eec <can_Read+0x24>
 8005ee6:	4b21      	ldr	r3, [pc, #132]	; (8005f6c <can_Read+0xa4>)
 8005ee8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005eea:	685b      	ldr	r3, [r3, #4]
 8005eec:	687a      	ldr	r2, [r7, #4]
 8005eee:	6013      	str	r3, [r2, #0]
    msg->type = CanHandle.pRxMsg->RTR == CAN_RTR_DATA ? CANData : CANRemote;
 8005ef0:	4b1e      	ldr	r3, [pc, #120]	; (8005f6c <can_Read+0xa4>)
 8005ef2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005ef4:	68db      	ldr	r3, [r3, #12]
 8005ef6:	2b00      	cmp	r3, #0
 8005ef8:	bf14      	ite	ne
 8005efa:	2301      	movne	r3, #1
 8005efc:	2300      	moveq	r3, #0
 8005efe:	b2db      	uxtb	r3, r3
 8005f00:	461a      	mov	r2, r3
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	739a      	strb	r2, [r3, #14]
    msg->format = CanHandle.pRxMsg->IDE == CAN_ID_STD ? CANStandard : CANExtended;
 8005f06:	4b19      	ldr	r3, [pc, #100]	; (8005f6c <can_Read+0xa4>)
 8005f08:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005f0a:	689b      	ldr	r3, [r3, #8]
 8005f0c:	2b00      	cmp	r3, #0
 8005f0e:	bf14      	ite	ne
 8005f10:	2301      	movne	r3, #1
 8005f12:	2300      	moveq	r3, #0
 8005f14:	b2db      	uxtb	r3, r3
 8005f16:	461a      	mov	r2, r3
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	735a      	strb	r2, [r3, #13]
    msg->len = CanHandle.pRxMsg->DLC;
 8005f1c:	4b13      	ldr	r3, [pc, #76]	; (8005f6c <can_Read+0xa4>)
 8005f1e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005f20:	691b      	ldr	r3, [r3, #16]
 8005f22:	b2da      	uxtb	r2, r3
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	731a      	strb	r2, [r3, #12]
    for(i = 0; i < msg->len; i++)
 8005f28:	2300      	movs	r3, #0
 8005f2a:	60fb      	str	r3, [r7, #12]
 8005f2c:	e010      	b.n	8005f50 <can_Read+0x88>
        msg->data[i] = CanHandle.pRxMsg->Data[i];
 8005f2e:	4b0f      	ldr	r3, [pc, #60]	; (8005f6c <can_Read+0xa4>)
 8005f30:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005f32:	68fb      	ldr	r3, [r7, #12]
 8005f34:	3304      	adds	r3, #4
 8005f36:	009b      	lsls	r3, r3, #2
 8005f38:	4413      	add	r3, r2
 8005f3a:	685b      	ldr	r3, [r3, #4]
 8005f3c:	b2d9      	uxtb	r1, r3
 8005f3e:	687a      	ldr	r2, [r7, #4]
 8005f40:	68fb      	ldr	r3, [r7, #12]
 8005f42:	4413      	add	r3, r2
 8005f44:	3304      	adds	r3, #4
 8005f46:	460a      	mov	r2, r1
 8005f48:	701a      	strb	r2, [r3, #0]
    for(i = 0; i < msg->len; i++)
 8005f4a:	68fb      	ldr	r3, [r7, #12]
 8005f4c:	3301      	adds	r3, #1
 8005f4e:	60fb      	str	r3, [r7, #12]
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	7b1b      	ldrb	r3, [r3, #12]
 8005f54:	461a      	mov	r2, r3
 8005f56:	68fb      	ldr	r3, [r7, #12]
 8005f58:	4293      	cmp	r3, r2
 8005f5a:	dbe8      	blt.n	8005f2e <can_Read+0x66>

    return msg->len;
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	7b1b      	ldrb	r3, [r3, #12]
}
 8005f60:	4618      	mov	r0, r3
 8005f62:	3714      	adds	r7, #20
 8005f64:	46bd      	mov	sp, r7
 8005f66:	bc80      	pop	{r7}
 8005f68:	4770      	bx	lr
 8005f6a:	bf00      	nop
 8005f6c:	200001d4 	.word	0x200001d4

08005f70 <can_Filter_list>:

    return HAL_CAN_Init(&CanHandle);
}
//===========================================================================
int can_Filter_list(uint32_t id1_id2, uint32_t id3_id4, CANFormat format /*=CANAny*/, int32_t handle /*=0*/ )
{
 8005f70:	b580      	push	{r7, lr}
 8005f72:	b08e      	sub	sp, #56	; 0x38
 8005f74:	af00      	add	r7, sp, #0
 8005f76:	60f8      	str	r0, [r7, #12]
 8005f78:	60b9      	str	r1, [r7, #8]
 8005f7a:	603b      	str	r3, [r7, #0]
 8005f7c:	4613      	mov	r3, r2
 8005f7e:	71fb      	strb	r3, [r7, #7]
    CAN_FilterConfTypeDef   sFilterConfig;

    sFilterConfig.FilterNumber = handle;
 8005f80:	683b      	ldr	r3, [r7, #0]
 8005f82:	627b      	str	r3, [r7, #36]	; 0x24
    sFilterConfig.FilterMode = CAN_FILTERMODE_IDLIST;  // CAN_FILTERMODE_IDMASK
 8005f84:	2301      	movs	r3, #1
 8005f86:	62bb      	str	r3, [r7, #40]	; 0x28
    
    sFilterConfig.FilterScale = CAN_FILTERSCALE_16BIT; // CAN_FILTERSCALE_32BIT
 8005f88:	2300      	movs	r3, #0
 8005f8a:	62fb      	str	r3, [r7, #44]	; 0x2c
    sFilterConfig.FilterIdHigh = (((id1_id2) >> 16) & 0xFFFF);
 8005f8c:	68fb      	ldr	r3, [r7, #12]
 8005f8e:	0c1b      	lsrs	r3, r3, #16
 8005f90:	613b      	str	r3, [r7, #16]
    sFilterConfig.FilterIdLow = ((id1_id2) & 0xFFFF);
 8005f92:	68fb      	ldr	r3, [r7, #12]
 8005f94:	b29b      	uxth	r3, r3
 8005f96:	617b      	str	r3, [r7, #20]
    sFilterConfig.FilterMaskIdHigh = (((id3_id4) >> 16) & 0xFFFF);
 8005f98:	68bb      	ldr	r3, [r7, #8]
 8005f9a:	0c1b      	lsrs	r3, r3, #16
 8005f9c:	61bb      	str	r3, [r7, #24]
    sFilterConfig.FilterMaskIdLow = ((id3_id4) & 0xFFFF);
 8005f9e:	68bb      	ldr	r3, [r7, #8]
 8005fa0:	b29b      	uxth	r3, r3
 8005fa2:	61fb      	str	r3, [r7, #28]
    sFilterConfig.FilterFIFOAssignment = 0;
 8005fa4:	2300      	movs	r3, #0
 8005fa6:	623b      	str	r3, [r7, #32]
    sFilterConfig.FilterActivation = ENABLE;
 8005fa8:	2301      	movs	r3, #1
 8005faa:	633b      	str	r3, [r7, #48]	; 0x30
    sFilterConfig.BankNumber = 14;
 8005fac:	230e      	movs	r3, #14
 8005fae:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_CAN_ConfigFilter(&CanHandle, &sFilterConfig);
 8005fb0:	f107 0310 	add.w	r3, r7, #16
 8005fb4:	4619      	mov	r1, r3
 8005fb6:	4804      	ldr	r0, [pc, #16]	; (8005fc8 <can_Filter_list+0x58>)
 8005fb8:	f7fb f8d2 	bl	8001160 <HAL_CAN_ConfigFilter>

    return 1;
 8005fbc:	2301      	movs	r3, #1
}
 8005fbe:	4618      	mov	r0, r3
 8005fc0:	3738      	adds	r7, #56	; 0x38
 8005fc2:	46bd      	mov	sp, r7
 8005fc4:	bd80      	pop	{r7, pc}
 8005fc6:	bf00      	nop
 8005fc8:	200001d4 	.word	0x200001d4

08005fcc <HAL_CAN_RxCpltCallback>:
    return HAL_CAN_GetError(&CanHandle);
}
//===========================================================================

void HAL_CAN_RxCpltCallback(CAN_HandleTypeDef* CanHandle)
{
 8005fcc:	b580      	push	{r7, lr}
 8005fce:	b082      	sub	sp, #8
 8005fd0:	af00      	add	r7, sp, #0
 8005fd2:	6078      	str	r0, [r7, #4]
    if (rxCompleteCallback != NULL)
 8005fd4:	4b26      	ldr	r3, [pc, #152]	; (8006070 <HAL_CAN_RxCpltCallback+0xa4>)
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	2b00      	cmp	r3, #0
 8005fda:	d002      	beq.n	8005fe2 <HAL_CAN_RxCpltCallback+0x16>
        rxCompleteCallback();
 8005fdc:	4b24      	ldr	r3, [pc, #144]	; (8006070 <HAL_CAN_RxCpltCallback+0xa4>)
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	4798      	blx	r3

    if (CanHandle->State == HAL_CAN_STATE_BUSY_TX)
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8005fe8:	b2db      	uxtb	r3, r3
 8005fea:	2b12      	cmp	r3, #18
 8005fec:	d104      	bne.n	8005ff8 <HAL_CAN_RxCpltCallback+0x2c>
        CanHandle->State = HAL_CAN_STATE_BUSY_TX_RX;
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	2232      	movs	r2, #50	; 0x32
 8005ff2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
 8005ff6:	e02e      	b.n	8006056 <HAL_CAN_RxCpltCallback+0x8a>
    else {
        CanHandle->State = HAL_CAN_STATE_BUSY_RX;
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	2222      	movs	r2, #34	; 0x22
 8005ffc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

        /* Set CAN error code to none */
        CanHandle->ErrorCode = HAL_CAN_ERROR_NONE;
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	2200      	movs	r2, #0
 8006004:	63da      	str	r2, [r3, #60]	; 0x3c

        /* Enable Error warning Interrupt */
        __HAL_CAN_ENABLE_IT(CanHandle, CAN_IT_EWG);
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	695a      	ldr	r2, [r3, #20]
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006014:	615a      	str	r2, [r3, #20]

        /* Enable Error passive Interrupt */
        __HAL_CAN_ENABLE_IT(CanHandle, CAN_IT_EPV);
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	695a      	ldr	r2, [r3, #20]
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006024:	615a      	str	r2, [r3, #20]

        /* Enable Bus-off Interrupt */
        __HAL_CAN_ENABLE_IT(CanHandle, CAN_IT_BOF);
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	695a      	ldr	r2, [r3, #20]
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006034:	615a      	str	r2, [r3, #20]

        /* Enable Last error code Interrupt */
        __HAL_CAN_ENABLE_IT(CanHandle, CAN_IT_LEC);
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	695a      	ldr	r2, [r3, #20]
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006044:	615a      	str	r2, [r3, #20]

        /* Enable Error Interrupt */
        __HAL_CAN_ENABLE_IT(CanHandle, CAN_IT_ERR);
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	695a      	ldr	r2, [r3, #20]
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006054:	615a      	str	r2, [r3, #20]
    }

    // Enable FIFO 0 message pending Interrupt
    __HAL_CAN_ENABLE_IT(CanHandle, CAN_IT_FMP0);
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	695a      	ldr	r2, [r3, #20]
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	f042 0202 	orr.w	r2, r2, #2
 8006064:	615a      	str	r2, [r3, #20]
}
 8006066:	bf00      	nop
 8006068:	3708      	adds	r7, #8
 800606a:	46bd      	mov	sp, r7
 800606c:	bd80      	pop	{r7, pc}
 800606e:	bf00      	nop
 8006070:	20000508 	.word	0x20000508

08006074 <i2c1_Init>:

//======================================================================
// Init I2C1 Peripheral
//======================================================================
void i2c1_Init()
{
 8006074:	b580      	push	{r7, lr}
 8006076:	af00      	add	r7, sp, #0
    hi2c1.Instance             = I2C1;
 8006078:	4b10      	ldr	r3, [pc, #64]	; (80060bc <i2c1_Init+0x48>)
 800607a:	4a11      	ldr	r2, [pc, #68]	; (80060c0 <i2c1_Init+0x4c>)
 800607c:	601a      	str	r2, [r3, #0]
    hi2c1.Init.ClockSpeed      = I2C1_SPEED;		// cf config.h
 800607e:	4b0f      	ldr	r3, [pc, #60]	; (80060bc <i2c1_Init+0x48>)
 8006080:	f64e 2260 	movw	r2, #60000	; 0xea60
 8006084:	605a      	str	r2, [r3, #4]
    hi2c1.Init.DutyCycle       = I2C_DUTYCYCLE_2;
 8006086:	4b0d      	ldr	r3, [pc, #52]	; (80060bc <i2c1_Init+0x48>)
 8006088:	2200      	movs	r2, #0
 800608a:	609a      	str	r2, [r3, #8]
    hi2c1.Init.OwnAddress1     = 0x2;
 800608c:	4b0b      	ldr	r3, [pc, #44]	; (80060bc <i2c1_Init+0x48>)
 800608e:	2202      	movs	r2, #2
 8006090:	60da      	str	r2, [r3, #12]
    hi2c1.Init.AddressingMode  = I2C_ADDRESSINGMODE_7BIT;
 8006092:	4b0a      	ldr	r3, [pc, #40]	; (80060bc <i2c1_Init+0x48>)
 8006094:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8006098:	611a      	str	r2, [r3, #16]
    hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800609a:	4b08      	ldr	r3, [pc, #32]	; (80060bc <i2c1_Init+0x48>)
 800609c:	2200      	movs	r2, #0
 800609e:	615a      	str	r2, [r3, #20]
    hi2c1.Init.OwnAddress2     = 0xFF;
 80060a0:	4b06      	ldr	r3, [pc, #24]	; (80060bc <i2c1_Init+0x48>)
 80060a2:	22ff      	movs	r2, #255	; 0xff
 80060a4:	619a      	str	r2, [r3, #24]
    hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80060a6:	4b05      	ldr	r3, [pc, #20]	; (80060bc <i2c1_Init+0x48>)
 80060a8:	2200      	movs	r2, #0
 80060aa:	61da      	str	r2, [r3, #28]
    hi2c1.Init.NoStretchMode   = I2C_NOSTRETCH_DISABLE;
 80060ac:	4b03      	ldr	r3, [pc, #12]	; (80060bc <i2c1_Init+0x48>)
 80060ae:	2200      	movs	r2, #0
 80060b0:	621a      	str	r2, [r3, #32]

    HAL_I2C_Init(&hi2c1);
 80060b2:	4802      	ldr	r0, [pc, #8]	; (80060bc <i2c1_Init+0x48>)
 80060b4:	f7fc f8ce 	bl	8002254 <HAL_I2C_Init>
}
 80060b8:	bf00      	nop
 80060ba:	bd80      	pop	{r7, pc}
 80060bc:	20000284 	.word	0x20000284
 80060c0:	40005400 	.word	0x40005400

080060c4 <i2c1_ReadRegBuffer>:
}
//======================================================================
// Receive n_data bytes - located at regAddr - from i2c slave
//======================================================================
int i2c1_ReadRegBuffer(uint16_t addrSlave, uint8_t  regAddr,  uint8_t *data, int n_data)
{
 80060c4:	b580      	push	{r7, lr}
 80060c6:	b088      	sub	sp, #32
 80060c8:	af02      	add	r7, sp, #8
 80060ca:	60ba      	str	r2, [r7, #8]
 80060cc:	607b      	str	r3, [r7, #4]
 80060ce:	4603      	mov	r3, r0
 80060d0:	81fb      	strh	r3, [r7, #14]
 80060d2:	460b      	mov	r3, r1
 80060d4:	737b      	strb	r3, [r7, #13]
    int status;
    uint8_t RegAddr;
    RegAddr=regAddr;
 80060d6:	7b7b      	ldrb	r3, [r7, #13]
 80060d8:	74fb      	strb	r3, [r7, #19]
    do{
        status=HAL_I2C_Master_Transmit(&hi2c1, addrSlave, &RegAddr, 1, 100);
 80060da:	f107 0213 	add.w	r2, r7, #19
 80060de:	89f9      	ldrh	r1, [r7, #14]
 80060e0:	2364      	movs	r3, #100	; 0x64
 80060e2:	9300      	str	r3, [sp, #0]
 80060e4:	2301      	movs	r3, #1
 80060e6:	480f      	ldr	r0, [pc, #60]	; (8006124 <i2c1_ReadRegBuffer+0x60>)
 80060e8:	f7fc f9ce 	bl	8002488 <HAL_I2C_Master_Transmit>
 80060ec:	4603      	mov	r3, r0
 80060ee:	617b      	str	r3, [r7, #20]
        if( status )
 80060f0:	697b      	ldr	r3, [r7, #20]
 80060f2:	2b00      	cmp	r3, #0
 80060f4:	d10f      	bne.n	8006116 <i2c1_ReadRegBuffer+0x52>
            break;
        status =HAL_I2C_Master_Receive(&hi2c1, addrSlave, data, n_data, n_data*100);
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	b29a      	uxth	r2, r3
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	2164      	movs	r1, #100	; 0x64
 80060fe:	fb01 f303 	mul.w	r3, r1, r3
 8006102:	89f9      	ldrh	r1, [r7, #14]
 8006104:	9300      	str	r3, [sp, #0]
 8006106:	4613      	mov	r3, r2
 8006108:	68ba      	ldr	r2, [r7, #8]
 800610a:	4806      	ldr	r0, [pc, #24]	; (8006124 <i2c1_ReadRegBuffer+0x60>)
 800610c:	f7fc faca 	bl	80026a4 <HAL_I2C_Master_Receive>
 8006110:	4603      	mov	r3, r0
 8006112:	617b      	str	r3, [r7, #20]
 8006114:	e000      	b.n	8006118 <i2c1_ReadRegBuffer+0x54>
            break;
 8006116:	bf00      	nop
    }while(0);
    return status;
 8006118:	697b      	ldr	r3, [r7, #20]
}
 800611a:	4618      	mov	r0, r3
 800611c:	3718      	adds	r7, #24
 800611e:	46bd      	mov	sp, r7
 8006120:	bd80      	pop	{r7, pc}
 8006122:	bf00      	nop
 8006124:	20000284 	.word	0x20000284

08006128 <i2c1_WriteRegByte_IT>:

//======================================================================
// Write 1 byte at regAddr Slave - Interrupt Method
//======================================================================
void i2c1_WriteRegByte_IT(uint16_t addrSlave, uint8_t  regAddr,  uint8_t data)
{
 8006128:	b580      	push	{r7, lr}
 800612a:	b084      	sub	sp, #16
 800612c:	af00      	add	r7, sp, #0
 800612e:	4603      	mov	r3, r0
 8006130:	80fb      	strh	r3, [r7, #6]
 8006132:	460b      	mov	r3, r1
 8006134:	717b      	strb	r3, [r7, #5]
 8006136:	4613      	mov	r3, r2
 8006138:	713b      	strb	r3, [r7, #4]

	uint8_t datas_to_send[2];

	datas_to_send[0]=regAddr;
 800613a:	797b      	ldrb	r3, [r7, #5]
 800613c:	733b      	strb	r3, [r7, #12]
	datas_to_send[1]=data;
 800613e:	793b      	ldrb	r3, [r7, #4]
 8006140:	737b      	strb	r3, [r7, #13]

	while(HAL_I2C_Master_Transmit_IT(&hi2c1, addrSlave, datas_to_send, 2)!= HAL_OK){}
 8006142:	bf00      	nop
 8006144:	f107 020c 	add.w	r2, r7, #12
 8006148:	88f9      	ldrh	r1, [r7, #6]
 800614a:	2302      	movs	r3, #2
 800614c:	4808      	ldr	r0, [pc, #32]	; (8006170 <i2c1_WriteRegByte_IT+0x48>)
 800614e:	f7fc fce9 	bl	8002b24 <HAL_I2C_Master_Transmit_IT>
 8006152:	4603      	mov	r3, r0
 8006154:	2b00      	cmp	r3, #0
 8006156:	d1f5      	bne.n	8006144 <i2c1_WriteRegByte_IT+0x1c>
	while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY){}
 8006158:	bf00      	nop
 800615a:	4805      	ldr	r0, [pc, #20]	; (8006170 <i2c1_WriteRegByte_IT+0x48>)
 800615c:	f7fd f830 	bl	80031c0 <HAL_I2C_GetState>
 8006160:	4603      	mov	r3, r0
 8006162:	2b20      	cmp	r3, #32
 8006164:	d1f9      	bne.n	800615a <i2c1_WriteRegByte_IT+0x32>
}
 8006166:	bf00      	nop
 8006168:	bf00      	nop
 800616a:	3710      	adds	r7, #16
 800616c:	46bd      	mov	sp, r7
 800616e:	bd80      	pop	{r7, pc}
 8006170:	20000284 	.word	0x20000284

08006174 <i2c1_ReadRegBuffer_IT>:
//======================================================================
// Read 1 byte from regAddr Slave - Interrupt Method
//======================================================================
void i2c1_ReadRegBuffer_IT(uint16_t addrSlave, uint8_t  regAddr,  uint8_t* datas, int len)
{
 8006174:	b580      	push	{r7, lr}
 8006176:	b084      	sub	sp, #16
 8006178:	af00      	add	r7, sp, #0
 800617a:	60ba      	str	r2, [r7, #8]
 800617c:	607b      	str	r3, [r7, #4]
 800617e:	4603      	mov	r3, r0
 8006180:	81fb      	strh	r3, [r7, #14]
 8006182:	460b      	mov	r3, r1
 8006184:	737b      	strb	r3, [r7, #13]
	while(HAL_I2C_Master_Transmit_IT(&hi2c1, addrSlave, &regAddr, 1)!= HAL_OK){}
 8006186:	bf00      	nop
 8006188:	f107 020d 	add.w	r2, r7, #13
 800618c:	89f9      	ldrh	r1, [r7, #14]
 800618e:	2301      	movs	r3, #1
 8006190:	4811      	ldr	r0, [pc, #68]	; (80061d8 <i2c1_ReadRegBuffer_IT+0x64>)
 8006192:	f7fc fcc7 	bl	8002b24 <HAL_I2C_Master_Transmit_IT>
 8006196:	4603      	mov	r3, r0
 8006198:	2b00      	cmp	r3, #0
 800619a:	d1f5      	bne.n	8006188 <i2c1_ReadRegBuffer_IT+0x14>
	while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY){}
 800619c:	bf00      	nop
 800619e:	480e      	ldr	r0, [pc, #56]	; (80061d8 <i2c1_ReadRegBuffer_IT+0x64>)
 80061a0:	f7fd f80e 	bl	80031c0 <HAL_I2C_GetState>
 80061a4:	4603      	mov	r3, r0
 80061a6:	2b20      	cmp	r3, #32
 80061a8:	d1f9      	bne.n	800619e <i2c1_ReadRegBuffer_IT+0x2a>

	while(HAL_I2C_Master_Receive_IT(&hi2c1, addrSlave, datas, len)!= HAL_OK){}
 80061aa:	bf00      	nop
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	b29b      	uxth	r3, r3
 80061b0:	89f9      	ldrh	r1, [r7, #14]
 80061b2:	68ba      	ldr	r2, [r7, #8]
 80061b4:	4808      	ldr	r0, [pc, #32]	; (80061d8 <i2c1_ReadRegBuffer_IT+0x64>)
 80061b6:	f7fc fd4d 	bl	8002c54 <HAL_I2C_Master_Receive_IT>
 80061ba:	4603      	mov	r3, r0
 80061bc:	2b00      	cmp	r3, #0
 80061be:	d1f5      	bne.n	80061ac <i2c1_ReadRegBuffer_IT+0x38>
	while( HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY ){}
 80061c0:	bf00      	nop
 80061c2:	4805      	ldr	r0, [pc, #20]	; (80061d8 <i2c1_ReadRegBuffer_IT+0x64>)
 80061c4:	f7fc fffc 	bl	80031c0 <HAL_I2C_GetState>
 80061c8:	4603      	mov	r3, r0
 80061ca:	2b20      	cmp	r3, #32
 80061cc:	d1f9      	bne.n	80061c2 <i2c1_ReadRegBuffer_IT+0x4e>
}
 80061ce:	bf00      	nop
 80061d0:	bf00      	nop
 80061d2:	3710      	adds	r7, #16
 80061d4:	46bd      	mov	sp, r7
 80061d6:	bd80      	pop	{r7, pc}
 80061d8:	20000284 	.word	0x20000284

080061dc <uart2_Init>:
//=================================================================
//	UART 2 INIT (STLINK UART)
//=================================================================

void uart2_Init()
{
 80061dc:	b580      	push	{r7, lr}
 80061de:	af00      	add	r7, sp, #0
	  Uart2Handle.Instance        = USART2;
 80061e0:	4b11      	ldr	r3, [pc, #68]	; (8006228 <uart2_Init+0x4c>)
 80061e2:	4a12      	ldr	r2, [pc, #72]	; (800622c <uart2_Init+0x50>)
 80061e4:	601a      	str	r2, [r3, #0]
	  Uart2Handle.Init.BaudRate   = UART_BAUDRATE;
 80061e6:	4b10      	ldr	r3, [pc, #64]	; (8006228 <uart2_Init+0x4c>)
 80061e8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80061ec:	605a      	str	r2, [r3, #4]
	  Uart2Handle.Init.WordLength = UART_WORDLENGTH_8B;
 80061ee:	4b0e      	ldr	r3, [pc, #56]	; (8006228 <uart2_Init+0x4c>)
 80061f0:	2200      	movs	r2, #0
 80061f2:	609a      	str	r2, [r3, #8]
	  Uart2Handle.Init.StopBits   = UART_STOPBITS_1;
 80061f4:	4b0c      	ldr	r3, [pc, #48]	; (8006228 <uart2_Init+0x4c>)
 80061f6:	2200      	movs	r2, #0
 80061f8:	60da      	str	r2, [r3, #12]
	  Uart2Handle.Init.Parity     = UART_PARITY_NONE;
 80061fa:	4b0b      	ldr	r3, [pc, #44]	; (8006228 <uart2_Init+0x4c>)
 80061fc:	2200      	movs	r2, #0
 80061fe:	611a      	str	r2, [r3, #16]
	  Uart2Handle.Init.HwFlowCtl  = UART_HWCONTROL_NONE;
 8006200:	4b09      	ldr	r3, [pc, #36]	; (8006228 <uart2_Init+0x4c>)
 8006202:	2200      	movs	r2, #0
 8006204:	619a      	str	r2, [r3, #24]
	  Uart2Handle.Init.Mode       = UART_MODE_TX_RX;
 8006206:	4b08      	ldr	r3, [pc, #32]	; (8006228 <uart2_Init+0x4c>)
 8006208:	220c      	movs	r2, #12
 800620a:	615a      	str	r2, [r3, #20]
	  Uart2Handle.Init.OverSampling = UART_OVERSAMPLING_16;
 800620c:	4b06      	ldr	r3, [pc, #24]	; (8006228 <uart2_Init+0x4c>)
 800620e:	2200      	movs	r2, #0
 8006210:	61da      	str	r2, [r3, #28]

	  HAL_UART_Init(&Uart2Handle);
 8006212:	4805      	ldr	r0, [pc, #20]	; (8006228 <uart2_Init+0x4c>)
 8006214:	f7ff f856 	bl	80052c4 <HAL_UART_Init>

	  HAL_UART_Receive_IT(&Uart2Handle, (uint8_t *)rec_buf, 1);
 8006218:	2201      	movs	r2, #1
 800621a:	4905      	ldr	r1, [pc, #20]	; (8006230 <uart2_Init+0x54>)
 800621c:	4802      	ldr	r0, [pc, #8]	; (8006228 <uart2_Init+0x4c>)
 800621e:	f7ff f940 	bl	80054a2 <HAL_UART_Receive_IT>
}
 8006222:	bf00      	nop
 8006224:	bd80      	pop	{r7, pc}
 8006226:	bf00      	nop
 8006228:	20000128 	.word	0x20000128
 800622c:	40004400 	.word	0x40004400
 8006230:	200002d8 	.word	0x200002d8

08006234 <uart3_Init>:

void uart3_Init()
{
 8006234:	b580      	push	{r7, lr}
 8006236:	af00      	add	r7, sp, #0
	  UartDxlHandle.Instance          = USART3;
 8006238:	4b11      	ldr	r3, [pc, #68]	; (8006280 <uart3_Init+0x4c>)
 800623a:	4a12      	ldr	r2, [pc, #72]	; (8006284 <uart3_Init+0x50>)
 800623c:	601a      	str	r2, [r3, #0]

	  UartDxlHandle.Init.BaudRate     =57600;//1000000;//57600;
 800623e:	4b10      	ldr	r3, [pc, #64]	; (8006280 <uart3_Init+0x4c>)
 8006240:	f44f 4261 	mov.w	r2, #57600	; 0xe100
 8006244:	605a      	str	r2, [r3, #4]
	  UartDxlHandle.Init.WordLength   = UART_WORDLENGTH_8B;
 8006246:	4b0e      	ldr	r3, [pc, #56]	; (8006280 <uart3_Init+0x4c>)
 8006248:	2200      	movs	r2, #0
 800624a:	609a      	str	r2, [r3, #8]
	  UartDxlHandle.Init.StopBits     = UART_STOPBITS_1;
 800624c:	4b0c      	ldr	r3, [pc, #48]	; (8006280 <uart3_Init+0x4c>)
 800624e:	2200      	movs	r2, #0
 8006250:	60da      	str	r2, [r3, #12]
	  UartDxlHandle.Init.Parity       = UART_PARITY_NONE;
 8006252:	4b0b      	ldr	r3, [pc, #44]	; (8006280 <uart3_Init+0x4c>)
 8006254:	2200      	movs	r2, #0
 8006256:	611a      	str	r2, [r3, #16]
	  UartDxlHandle.Init.HwFlowCtl    = UART_HWCONTROL_NONE;
 8006258:	4b09      	ldr	r3, [pc, #36]	; (8006280 <uart3_Init+0x4c>)
 800625a:	2200      	movs	r2, #0
 800625c:	619a      	str	r2, [r3, #24]
	  UartDxlHandle.Init.Mode         = UART_MODE_TX_RX;
 800625e:	4b08      	ldr	r3, [pc, #32]	; (8006280 <uart3_Init+0x4c>)
 8006260:	220c      	movs	r2, #12
 8006262:	615a      	str	r2, [r3, #20]
	  UartDxlHandle.Init.OverSampling = UART_OVERSAMPLING_16;
 8006264:	4b06      	ldr	r3, [pc, #24]	; (8006280 <uart3_Init+0x4c>)
 8006266:	2200      	movs	r2, #0
 8006268:	61da      	str	r2, [r3, #28]

	  HAL_UART_Init(&UartDxlHandle);
 800626a:	4805      	ldr	r0, [pc, #20]	; (8006280 <uart3_Init+0x4c>)
 800626c:	f7ff f82a 	bl	80052c4 <HAL_UART_Init>

	  HAL_UART_Receive_IT(&UartDxlHandle, (uint8_t *)rec_buf6, 1);
 8006270:	2201      	movs	r2, #1
 8006272:	4905      	ldr	r1, [pc, #20]	; (8006288 <uart3_Init+0x54>)
 8006274:	4802      	ldr	r0, [pc, #8]	; (8006280 <uart3_Init+0x4c>)
 8006276:	f7ff f914 	bl	80054a2 <HAL_UART_Receive_IT>
}
 800627a:	bf00      	nop
 800627c:	bd80      	pop	{r7, pc}
 800627e:	bf00      	nop
 8006280:	200000d0 	.word	0x200000d0
 8006284:	40004800 	.word	0x40004800
 8006288:	2000003c 	.word	0x2000003c

0800628c <put_char>:

//=================================================================
//	PUCHAR PROTOTYPE (USED BY PRINTF FUNCTIONS)
//=================================================================
int put_char(int ch)
{
 800628c:	b580      	push	{r7, lr}
 800628e:	b082      	sub	sp, #8
 8006290:	af00      	add	r7, sp, #0
 8006292:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&Uart2Handle, (uint8_t *)&ch, 1, 0xFFFF);
 8006294:	1d39      	adds	r1, r7, #4
 8006296:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800629a:	2201      	movs	r2, #1
 800629c:	4803      	ldr	r0, [pc, #12]	; (80062ac <put_char+0x20>)
 800629e:	f7ff f867 	bl	8005370 <HAL_UART_Transmit>
	return 0;
 80062a2:	2300      	movs	r3, #0
}
 80062a4:	4618      	mov	r0, r3
 80062a6:	3708      	adds	r7, #8
 80062a8:	46bd      	mov	sp, r7
 80062aa:	bd80      	pop	{r7, pc}
 80062ac:	20000128 	.word	0x20000128

080062b0 <HAL_UART_RxCpltCallback>:

//=================================================================
//	UART RECEIVE CALLBACK5
//=================================================================
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *UartHandle)
{
 80062b0:	b580      	push	{r7, lr}
 80062b2:	b082      	sub	sp, #8
 80062b4:	af00      	add	r7, sp, #0
 80062b6:	6078      	str	r0, [r7, #4]


		if (UartHandle -> Instance == USART3)
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	4a0b      	ldr	r2, [pc, #44]	; (80062ec <HAL_UART_RxCpltCallback+0x3c>)
 80062be:	4293      	cmp	r3, r2
 80062c0:	d10a      	bne.n	80062d8 <HAL_UART_RxCpltCallback+0x28>
		{
			HAL_UART_Receive_IT(&UartDxlHandle, (uint8_t *)rec_buf6, 1);
 80062c2:	2201      	movs	r2, #1
 80062c4:	490a      	ldr	r1, [pc, #40]	; (80062f0 <HAL_UART_RxCpltCallback+0x40>)
 80062c6:	480b      	ldr	r0, [pc, #44]	; (80062f4 <HAL_UART_RxCpltCallback+0x44>)
 80062c8:	f7ff f8eb 	bl	80054a2 <HAL_UART_Receive_IT>
			dxl_rcv_cb(rec_buf6[0]);
 80062cc:	4b08      	ldr	r3, [pc, #32]	; (80062f0 <HAL_UART_RxCpltCallback+0x40>)
 80062ce:	781b      	ldrb	r3, [r3, #0]
 80062d0:	4618      	mov	r0, r3
 80062d2:	f000 fa0f 	bl	80066f4 <dxl_rcv_cb>
		else
		{

			 HAL_UART_Receive_IT(&Uart2Handle, (uint8_t *)rec_buf, 1);
		}
}
 80062d6:	e004      	b.n	80062e2 <HAL_UART_RxCpltCallback+0x32>
			 HAL_UART_Receive_IT(&Uart2Handle, (uint8_t *)rec_buf, 1);
 80062d8:	2201      	movs	r2, #1
 80062da:	4907      	ldr	r1, [pc, #28]	; (80062f8 <HAL_UART_RxCpltCallback+0x48>)
 80062dc:	4807      	ldr	r0, [pc, #28]	; (80062fc <HAL_UART_RxCpltCallback+0x4c>)
 80062de:	f7ff f8e0 	bl	80054a2 <HAL_UART_Receive_IT>
}
 80062e2:	bf00      	nop
 80062e4:	3708      	adds	r7, #8
 80062e6:	46bd      	mov	sp, r7
 80062e8:	bd80      	pop	{r7, pc}
 80062ea:	bf00      	nop
 80062ec:	40004800 	.word	0x40004800
 80062f0:	2000003c 	.word	0x2000003c
 80062f4:	200000d0 	.word	0x200000d0
 80062f8:	200002d8 	.word	0x200002d8
 80062fc:	20000128 	.word	0x20000128

08006300 <put_string>:

//================================================================
//				PUT STRING
//================================================================
void put_string(char* s)
{
 8006300:	b580      	push	{r7, lr}
 8006302:	b082      	sub	sp, #8
 8006304:	af00      	add	r7, sp, #0
 8006306:	6078      	str	r0, [r7, #4]
	while(*s != '\0')
 8006308:	e007      	b.n	800631a <put_string+0x1a>
	{
		put_char(*s);
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	781b      	ldrb	r3, [r3, #0]
 800630e:	4618      	mov	r0, r3
 8006310:	f7ff ffbc 	bl	800628c <put_char>
		s++;
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	3301      	adds	r3, #1
 8006318:	607b      	str	r3, [r7, #4]
	while(*s != '\0')
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	781b      	ldrb	r3, [r3, #0]
 800631e:	2b00      	cmp	r3, #0
 8006320:	d1f3      	bne.n	800630a <put_string+0xa>
	}
}
 8006322:	bf00      	nop
 8006324:	bf00      	nop
 8006326:	3708      	adds	r7, #8
 8006328:	46bd      	mov	sp, r7
 800632a:	bd80      	pop	{r7, pc}

0800632c <term_printf>:

//================================================================
//				TERM_PRINTF
//================================================================
void term_printf(const char* fmt, ...)
{
 800632c:	b40f      	push	{r0, r1, r2, r3}
 800632e:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006332:	b0a6      	sub	sp, #152	; 0x98
 8006334:	af02      	add	r7, sp, #8
	unsigned long long ull;
	unsigned long long tmp;
	unsigned long  size;
	unsigned int   sp;
	char           s[60];
	int first=0;
 8006336:	2300      	movs	r3, #0
 8006338:	67bb      	str	r3, [r7, #120]	; 0x78

	va_start(ap, fmt);
 800633a:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 800633e:	64bb      	str	r3, [r7, #72]	; 0x48

	while (*fmt != '\0') {
 8006340:	e1c4      	b.n	80066cc <term_printf+0x3a0>
		if (*fmt =='%') {
 8006342:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8006346:	781b      	ldrb	r3, [r3, #0]
 8006348:	2b25      	cmp	r3, #37	; 0x25
 800634a:	f040 81b4 	bne.w	80066b6 <term_printf+0x38a>
			size=0; sp=1;
 800634e:	2300      	movs	r3, #0
 8006350:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8006354:	2301      	movs	r3, #1
 8006356:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
			if (*++fmt=='0') {fmt++; sp=0;}	// parse %04d --> sp=0
 800635a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800635e:	3301      	adds	r3, #1
 8006360:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006364:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8006368:	781b      	ldrb	r3, [r3, #0]
 800636a:	2b30      	cmp	r3, #48	; 0x30
 800636c:	d107      	bne.n	800637e <term_printf+0x52>
 800636e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8006372:	3301      	adds	r3, #1
 8006374:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006378:	2300      	movs	r3, #0
 800637a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
			ch=*fmt;
 800637e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8006382:	781b      	ldrb	r3, [r3, #0]
 8006384:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
			if ((ch>'0') && (ch<='9')) {	// parse %4d --> size=4
 8006388:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 800638c:	2b30      	cmp	r3, #48	; 0x30
 800638e:	d92d      	bls.n	80063ec <term_printf+0xc0>
 8006390:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 8006394:	2b39      	cmp	r3, #57	; 0x39
 8006396:	d829      	bhi.n	80063ec <term_printf+0xc0>
				char tmp[10];
				int i=0;
 8006398:	2300      	movs	r3, #0
 800639a:	67fb      	str	r3, [r7, #124]	; 0x7c
				while ((ch>='0') && (ch<='9')) {
 800639c:	e012      	b.n	80063c4 <term_printf+0x98>
					tmp[i++]=ch;
 800639e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80063a0:	1c5a      	adds	r2, r3, #1
 80063a2:	67fa      	str	r2, [r7, #124]	; 0x7c
 80063a4:	3390      	adds	r3, #144	; 0x90
 80063a6:	443b      	add	r3, r7
 80063a8:	f897 208f 	ldrb.w	r2, [r7, #143]	; 0x8f
 80063ac:	f803 2c90 	strb.w	r2, [r3, #-144]
					ch=*++fmt;
 80063b0:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80063b4:	3301      	adds	r3, #1
 80063b6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80063ba:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80063be:	781b      	ldrb	r3, [r3, #0]
 80063c0:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
				while ((ch>='0') && (ch<='9')) {
 80063c4:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 80063c8:	2b2f      	cmp	r3, #47	; 0x2f
 80063ca:	d903      	bls.n	80063d4 <term_printf+0xa8>
 80063cc:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 80063d0:	2b39      	cmp	r3, #57	; 0x39
 80063d2:	d9e4      	bls.n	800639e <term_printf+0x72>
				}
				tmp[i]='\0';
 80063d4:	463a      	mov	r2, r7
 80063d6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80063d8:	4413      	add	r3, r2
 80063da:	2200      	movs	r2, #0
 80063dc:	701a      	strb	r2, [r3, #0]
				size=str2num(tmp,10);
 80063de:	463b      	mov	r3, r7
 80063e0:	210a      	movs	r1, #10
 80063e2:	4618      	mov	r0, r3
 80063e4:	f001 f892 	bl	800750c <str2num>
 80063e8:	f8c7 0084 	str.w	r0, [r7, #132]	; 0x84
			}
			switch (ch) {
 80063ec:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 80063f0:	2b25      	cmp	r3, #37	; 0x25
 80063f2:	d03b      	beq.n	800646c <term_printf+0x140>
 80063f4:	2b25      	cmp	r3, #37	; 0x25
 80063f6:	f2c0 8157 	blt.w	80066a8 <term_printf+0x37c>
 80063fa:	2b78      	cmp	r3, #120	; 0x78
 80063fc:	f300 8154 	bgt.w	80066a8 <term_printf+0x37c>
 8006400:	2b63      	cmp	r3, #99	; 0x63
 8006402:	f2c0 8151 	blt.w	80066a8 <term_printf+0x37c>
 8006406:	3b63      	subs	r3, #99	; 0x63
 8006408:	2b15      	cmp	r3, #21
 800640a:	f200 814d 	bhi.w	80066a8 <term_printf+0x37c>
 800640e:	a201      	add	r2, pc, #4	; (adr r2, 8006414 <term_printf+0xe8>)
 8006410:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006414:	08006475 	.word	0x08006475
 8006418:	0800649f 	.word	0x0800649f
 800641c:	080066a9 	.word	0x080066a9
 8006420:	080065b3 	.word	0x080065b3
 8006424:	080066a9 	.word	0x080066a9
 8006428:	080066a9 	.word	0x080066a9
 800642c:	080066a9 	.word	0x080066a9
 8006430:	080066a9 	.word	0x080066a9
 8006434:	080066a9 	.word	0x080066a9
 8006438:	080066a9 	.word	0x080066a9
 800643c:	080066a9 	.word	0x080066a9
 8006440:	080066a9 	.word	0x080066a9
 8006444:	08006517 	.word	0x08006517
 8006448:	08006547 	.word	0x08006547
 800644c:	080066a9 	.word	0x080066a9
 8006450:	080066a9 	.word	0x080066a9
 8006454:	0800648d 	.word	0x0800648d
 8006458:	080066a9 	.word	0x080066a9
 800645c:	080064e7 	.word	0x080064e7
 8006460:	080066a9 	.word	0x080066a9
 8006464:	080066a9 	.word	0x080066a9
 8006468:	08006583 	.word	0x08006583
				case '%':
					put_char('%');
 800646c:	2025      	movs	r0, #37	; 0x25
 800646e:	f7ff ff0d 	bl	800628c <put_char>
					break;
 8006472:	e126      	b.n	80066c2 <term_printf+0x396>
				case 'c':
					ch = va_arg(ap, int);
 8006474:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006476:	1d1a      	adds	r2, r3, #4
 8006478:	64ba      	str	r2, [r7, #72]	; 0x48
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
					put_char(ch);
 8006480:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 8006484:	4618      	mov	r0, r3
 8006486:	f7ff ff01 	bl	800628c <put_char>
					break;
 800648a:	e11a      	b.n	80066c2 <term_printf+0x396>
				case 's':
					p = va_arg(ap, char *);
 800648c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800648e:	1d1a      	adds	r2, r3, #4
 8006490:	64ba      	str	r2, [r7, #72]	; 0x48
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	677b      	str	r3, [r7, #116]	; 0x74
					put_string(p);
 8006496:	6f78      	ldr	r0, [r7, #116]	; 0x74
 8006498:	f7ff ff32 	bl	8006300 <put_string>
					break;
 800649c:	e111      	b.n	80066c2 <term_printf+0x396>
				case 'd':
					ul = va_arg(ap, long);
 800649e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80064a0:	1d1a      	adds	r2, r3, #4
 80064a2:	64ba      	str	r2, [r7, #72]	; 0x48
 80064a4:	681b      	ldr	r3, [r3, #0]
 80064a6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
					if ((long)ul < 0) {
 80064aa:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80064ae:	2b00      	cmp	r3, #0
 80064b0:	da07      	bge.n	80064c2 <term_printf+0x196>
						put_char('-');
 80064b2:	202d      	movs	r0, #45	; 0x2d
 80064b4:	f7ff feea 	bl	800628c <put_char>
						ul = -(long)ul;
 80064b8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80064bc:	425b      	negs	r3, r3
 80064be:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
						//size--;
					}
					num2str(s, ul, 10, size, sp);
 80064c2:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80064c6:	f107 000c 	add.w	r0, r7, #12
 80064ca:	9300      	str	r3, [sp, #0]
 80064cc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80064d0:	220a      	movs	r2, #10
 80064d2:	f8d7 1088 	ldr.w	r1, [r7, #136]	; 0x88
 80064d6:	f000 ff97 	bl	8007408 <num2str>
					put_string(s);
 80064da:	f107 030c 	add.w	r3, r7, #12
 80064de:	4618      	mov	r0, r3
 80064e0:	f7ff ff0e 	bl	8006300 <put_string>
					break;
 80064e4:	e0ed      	b.n	80066c2 <term_printf+0x396>
				case 'u':
					ul = va_arg(ap, unsigned int);
 80064e6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80064e8:	1d1a      	adds	r2, r3, #4
 80064ea:	64ba      	str	r2, [r7, #72]	; 0x48
 80064ec:	681b      	ldr	r3, [r3, #0]
 80064ee:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
					num2str(s, ul, 10, size, sp);
 80064f2:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80064f6:	f107 000c 	add.w	r0, r7, #12
 80064fa:	9300      	str	r3, [sp, #0]
 80064fc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006500:	220a      	movs	r2, #10
 8006502:	f8d7 1088 	ldr.w	r1, [r7, #136]	; 0x88
 8006506:	f000 ff7f 	bl	8007408 <num2str>
					put_string(s);
 800650a:	f107 030c 	add.w	r3, r7, #12
 800650e:	4618      	mov	r0, r3
 8006510:	f7ff fef6 	bl	8006300 <put_string>
					break;
 8006514:	e0d5      	b.n	80066c2 <term_printf+0x396>
				case 'o':
					ul = va_arg(ap, unsigned int);
 8006516:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006518:	1d1a      	adds	r2, r3, #4
 800651a:	64ba      	str	r2, [r7, #72]	; 0x48
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
					num2str(s, ul, 8, size, sp);
 8006522:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8006526:	f107 000c 	add.w	r0, r7, #12
 800652a:	9300      	str	r3, [sp, #0]
 800652c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006530:	2208      	movs	r2, #8
 8006532:	f8d7 1088 	ldr.w	r1, [r7, #136]	; 0x88
 8006536:	f000 ff67 	bl	8007408 <num2str>
					put_string(s);
 800653a:	f107 030c 	add.w	r3, r7, #12
 800653e:	4618      	mov	r0, r3
 8006540:	f7ff fede 	bl	8006300 <put_string>
					break;
 8006544:	e0bd      	b.n	80066c2 <term_printf+0x396>
				case 'p':
					put_char('0');
 8006546:	2030      	movs	r0, #48	; 0x30
 8006548:	f7ff fea0 	bl	800628c <put_char>
					put_char('x');
 800654c:	2078      	movs	r0, #120	; 0x78
 800654e:	f7ff fe9d 	bl	800628c <put_char>
					ul = va_arg(ap, unsigned int);
 8006552:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006554:	1d1a      	adds	r2, r3, #4
 8006556:	64ba      	str	r2, [r7, #72]	; 0x48
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
					num2str(s, ul, 16, size, sp);
 800655e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8006562:	f107 000c 	add.w	r0, r7, #12
 8006566:	9300      	str	r3, [sp, #0]
 8006568:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800656c:	2210      	movs	r2, #16
 800656e:	f8d7 1088 	ldr.w	r1, [r7, #136]	; 0x88
 8006572:	f000 ff49 	bl	8007408 <num2str>
					put_string(s);
 8006576:	f107 030c 	add.w	r3, r7, #12
 800657a:	4618      	mov	r0, r3
 800657c:	f7ff fec0 	bl	8006300 <put_string>
					break;
 8006580:	e09f      	b.n	80066c2 <term_printf+0x396>
				case 'x':
					ul = va_arg(ap, unsigned int);
 8006582:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006584:	1d1a      	adds	r2, r3, #4
 8006586:	64ba      	str	r2, [r7, #72]	; 0x48
 8006588:	681b      	ldr	r3, [r3, #0]
 800658a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
					num2str(s, ul, 16, size, sp);
 800658e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8006592:	f107 000c 	add.w	r0, r7, #12
 8006596:	9300      	str	r3, [sp, #0]
 8006598:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800659c:	2210      	movs	r2, #16
 800659e:	f8d7 1088 	ldr.w	r1, [r7, #136]	; 0x88
 80065a2:	f000 ff31 	bl	8007408 <num2str>
					put_string(s);
 80065a6:	f107 030c 	add.w	r3, r7, #12
 80065aa:	4618      	mov	r0, r3
 80065ac:	f7ff fea8 	bl	8006300 <put_string>
					break;
 80065b0:	e087      	b.n	80066c2 <term_printf+0x396>
				case 'f':
					//if(first==0){ ull = va_arg(ap, long long unsigned int); first = 1;}
					ull = va_arg(ap, long long unsigned int);
 80065b2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80065b4:	3307      	adds	r3, #7
 80065b6:	f023 0307 	bic.w	r3, r3, #7
 80065ba:	f103 0208 	add.w	r2, r3, #8
 80065be:	64ba      	str	r2, [r7, #72]	; 0x48
 80065c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065c4:	e9c7 231a 	strd	r2, r3, [r7, #104]	; 0x68
					tmp = ull >> 63;
 80065c8:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80065cc:	f04f 0200 	mov.w	r2, #0
 80065d0:	f04f 0300 	mov.w	r3, #0
 80065d4:	0fca      	lsrs	r2, r1, #31
 80065d6:	2300      	movs	r3, #0
 80065d8:	e9c7 2318 	strd	r2, r3, [r7, #96]	; 0x60
					int sign = tmp & 0x1 ;
 80065dc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80065de:	f003 0301 	and.w	r3, r3, #1
 80065e2:	65fb      	str	r3, [r7, #92]	; 0x5c
					tmp = (ull & 0x000FFFFFFFFFFFFF) ;
 80065e4:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 80065e8:	4692      	mov	sl, r2
 80065ea:	f3c3 0b13 	ubfx	fp, r3, #0, #20
 80065ee:	e9c7 ab18 	strd	sl, fp, [r7, #96]	; 0x60
					double mf = (double)tmp ;
 80065f2:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 80065f6:	f7f9 ff2f 	bl	8000458 <__aeabi_ul2d>
 80065fa:	4602      	mov	r2, r0
 80065fc:	460b      	mov	r3, r1
 80065fe:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
					mf = mf / pow(2.0,52.0);
 8006602:	f04f 0200 	mov.w	r2, #0
 8006606:	4b38      	ldr	r3, [pc, #224]	; (80066e8 <term_printf+0x3bc>)
 8006608:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 800660c:	f7fa f884 	bl	8000718 <__aeabi_ddiv>
 8006610:	4602      	mov	r2, r0
 8006612:	460b      	mov	r3, r1
 8006614:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
					mf = mf + 1.0;
 8006618:	f04f 0200 	mov.w	r2, #0
 800661c:	4b33      	ldr	r3, [pc, #204]	; (80066ec <term_printf+0x3c0>)
 800661e:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8006622:	f7f9 fd99 	bl	8000158 <__adddf3>
 8006626:	4602      	mov	r2, r0
 8006628:	460b      	mov	r3, r1
 800662a:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
					tmp = ( ull & 0x7FF0000000000000 ) >> 52;
 800662e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8006632:	f04f 0200 	mov.w	r2, #0
 8006636:	f04f 0300 	mov.w	r3, #0
 800663a:	0d0a      	lsrs	r2, r1, #20
 800663c:	2300      	movs	r3, #0
 800663e:	f3c2 080a 	ubfx	r8, r2, #0, #11
 8006642:	f04f 0900 	mov.w	r9, #0
 8006646:	e9c7 8918 	strd	r8, r9, [r7, #96]	; 0x60
					tmp = tmp - 1023;
 800664a:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 800664e:	4928      	ldr	r1, [pc, #160]	; (80066f0 <term_printf+0x3c4>)
 8006650:	1854      	adds	r4, r2, r1
 8006652:	f143 35ff 	adc.w	r5, r3, #4294967295	; 0xffffffff
 8006656:	e9c7 4518 	strd	r4, r5, [r7, #96]	; 0x60
					float f = mf*myPow(2.0,tmp);
 800665a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800665c:	461a      	mov	r2, r3
 800665e:	f04f 0000 	mov.w	r0, #0
 8006662:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8006666:	f001 f855 	bl	8007714 <myPow>
 800666a:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800666e:	f7f9 ff29 	bl	80004c4 <__aeabi_dmul>
 8006672:	4602      	mov	r2, r0
 8006674:	460b      	mov	r3, r1
 8006676:	4610      	mov	r0, r2
 8006678:	4619      	mov	r1, r3
 800667a:	f7fa f935 	bl	80008e8 <__aeabi_d2f>
 800667e:	4603      	mov	r3, r0
 8006680:	64fb      	str	r3, [r7, #76]	; 0x4c
					if(sign==1){ put_char('-'); }
 8006682:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006684:	2b01      	cmp	r3, #1
 8006686:	d102      	bne.n	800668e <term_printf+0x362>
 8006688:	202d      	movs	r0, #45	; 0x2d
 800668a:	f7ff fdff 	bl	800628c <put_char>
					float2str((char*)s, f, 5);
 800668e:	f107 030c 	add.w	r3, r7, #12
 8006692:	2205      	movs	r2, #5
 8006694:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8006696:	4618      	mov	r0, r3
 8006698:	f000 fff4 	bl	8007684 <float2str>
					put_string((char*)s);
 800669c:	f107 030c 	add.w	r3, r7, #12
 80066a0:	4618      	mov	r0, r3
 80066a2:	f7ff fe2d 	bl	8006300 <put_string>
					break;
 80066a6:	e00c      	b.n	80066c2 <term_printf+0x396>

				default:
					put_char(*fmt);
 80066a8:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80066ac:	781b      	ldrb	r3, [r3, #0]
 80066ae:	4618      	mov	r0, r3
 80066b0:	f7ff fdec 	bl	800628c <put_char>
 80066b4:	e005      	b.n	80066c2 <term_printf+0x396>
			}
		} else put_char(*fmt);
 80066b6:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80066ba:	781b      	ldrb	r3, [r3, #0]
 80066bc:	4618      	mov	r0, r3
 80066be:	f7ff fde5 	bl	800628c <put_char>
		fmt++;
 80066c2:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80066c6:	3301      	adds	r3, #1
 80066c8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
	while (*fmt != '\0') {
 80066cc:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80066d0:	781b      	ldrb	r3, [r3, #0]
 80066d2:	2b00      	cmp	r3, #0
 80066d4:	f47f ae35 	bne.w	8006342 <term_printf+0x16>
	}
	va_end(ap);
}
 80066d8:	bf00      	nop
 80066da:	bf00      	nop
 80066dc:	3790      	adds	r7, #144	; 0x90
 80066de:	46bd      	mov	sp, r7
 80066e0:	e8bd 4fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80066e4:	b004      	add	sp, #16
 80066e6:	4770      	bx	lr
 80066e8:	43300000 	.word	0x43300000
 80066ec:	3ff00000 	.word	0x3ff00000
 80066f0:	fffffc01 	.word	0xfffffc01

080066f4 <dxl_rcv_cb>:
uint8_t 	size = 0;

uint8_t 	dxl_rcvBuf[BUF_SIZE];
//==================================================================
void dxl_rcv_cb(uint8_t car)
{
 80066f4:	b480      	push	{r7}
 80066f6:	b083      	sub	sp, #12
 80066f8:	af00      	add	r7, sp, #0
 80066fa:	4603      	mov	r3, r0
 80066fc:	71fb      	strb	r3, [r7, #7]
		dxl_rcvBuf[(p_wr++)%BUF_SIZE] = car;
 80066fe:	4b10      	ldr	r3, [pc, #64]	; (8006740 <dxl_rcv_cb+0x4c>)
 8006700:	781b      	ldrb	r3, [r3, #0]
 8006702:	1c5a      	adds	r2, r3, #1
 8006704:	b2d1      	uxtb	r1, r2
 8006706:	4a0e      	ldr	r2, [pc, #56]	; (8006740 <dxl_rcv_cb+0x4c>)
 8006708:	7011      	strb	r1, [r2, #0]
 800670a:	461a      	mov	r2, r3
 800670c:	4b0d      	ldr	r3, [pc, #52]	; (8006744 <dxl_rcv_cb+0x50>)
 800670e:	fb83 1302 	smull	r1, r3, r3, r2
 8006712:	1159      	asrs	r1, r3, #5
 8006714:	17d3      	asrs	r3, r2, #31
 8006716:	1acb      	subs	r3, r1, r3
 8006718:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 800671c:	fb01 f303 	mul.w	r3, r1, r3
 8006720:	1ad3      	subs	r3, r2, r3
 8006722:	4909      	ldr	r1, [pc, #36]	; (8006748 <dxl_rcv_cb+0x54>)
 8006724:	79fa      	ldrb	r2, [r7, #7]
 8006726:	54ca      	strb	r2, [r1, r3]
		size++;
 8006728:	4b08      	ldr	r3, [pc, #32]	; (800674c <dxl_rcv_cb+0x58>)
 800672a:	781b      	ldrb	r3, [r3, #0]
 800672c:	3301      	adds	r3, #1
 800672e:	b2da      	uxtb	r2, r3
 8006730:	4b06      	ldr	r3, [pc, #24]	; (800674c <dxl_rcv_cb+0x58>)
 8006732:	701a      	strb	r2, [r3, #0]
}
 8006734:	bf00      	nop
 8006736:	370c      	adds	r7, #12
 8006738:	46bd      	mov	sp, r7
 800673a:	bc80      	pop	{r7}
 800673c:	4770      	bx	lr
 800673e:	bf00      	nop
 8006740:	20000054 	.word	0x20000054
 8006744:	10624dd3 	.word	0x10624dd3
 8006748:	200002dc 	.word	0x200002dc
 800674c:	20000056 	.word	0x20000056

08006750 <NVIC_SetPriority>:
{
 8006750:	b480      	push	{r7}
 8006752:	b083      	sub	sp, #12
 8006754:	af00      	add	r7, sp, #0
 8006756:	4603      	mov	r3, r0
 8006758:	6039      	str	r1, [r7, #0]
 800675a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) < 0)
 800675c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006760:	2b00      	cmp	r3, #0
 8006762:	da0b      	bge.n	800677c <NVIC_SetPriority+0x2c>
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006764:	683b      	ldr	r3, [r7, #0]
 8006766:	b2da      	uxtb	r2, r3
 8006768:	490c      	ldr	r1, [pc, #48]	; (800679c <NVIC_SetPriority+0x4c>)
 800676a:	79fb      	ldrb	r3, [r7, #7]
 800676c:	f003 030f 	and.w	r3, r3, #15
 8006770:	3b04      	subs	r3, #4
 8006772:	0112      	lsls	r2, r2, #4
 8006774:	b2d2      	uxtb	r2, r2
 8006776:	440b      	add	r3, r1
 8006778:	761a      	strb	r2, [r3, #24]
}
 800677a:	e009      	b.n	8006790 <NVIC_SetPriority+0x40>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800677c:	683b      	ldr	r3, [r7, #0]
 800677e:	b2da      	uxtb	r2, r3
 8006780:	4907      	ldr	r1, [pc, #28]	; (80067a0 <NVIC_SetPriority+0x50>)
 8006782:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006786:	0112      	lsls	r2, r2, #4
 8006788:	b2d2      	uxtb	r2, r2
 800678a:	440b      	add	r3, r1
 800678c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8006790:	bf00      	nop
 8006792:	370c      	adds	r7, #12
 8006794:	46bd      	mov	sp, r7
 8006796:	bc80      	pop	{r7}
 8006798:	4770      	bx	lr
 800679a:	bf00      	nop
 800679c:	e000ed00 	.word	0xe000ed00
 80067a0:	e000e100 	.word	0xe000e100

080067a4 <SysTick_Config>:
{
 80067a4:	b580      	push	{r7, lr}
 80067a6:	b082      	sub	sp, #8
 80067a8:	af00      	add	r7, sp, #0
 80067aa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	3b01      	subs	r3, #1
 80067b0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80067b4:	d301      	bcc.n	80067ba <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 80067b6:	2301      	movs	r3, #1
 80067b8:	e00f      	b.n	80067da <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80067ba:	4a0a      	ldr	r2, [pc, #40]	; (80067e4 <SysTick_Config+0x40>)
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	3b01      	subs	r3, #1
 80067c0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80067c2:	210f      	movs	r1, #15
 80067c4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80067c8:	f7ff ffc2 	bl	8006750 <NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80067cc:	4b05      	ldr	r3, [pc, #20]	; (80067e4 <SysTick_Config+0x40>)
 80067ce:	2200      	movs	r2, #0
 80067d0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80067d2:	4b04      	ldr	r3, [pc, #16]	; (80067e4 <SysTick_Config+0x40>)
 80067d4:	2207      	movs	r2, #7
 80067d6:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 80067d8:	2300      	movs	r3, #0
}
 80067da:	4618      	mov	r0, r3
 80067dc:	3708      	adds	r7, #8
 80067de:	46bd      	mov	sp, r7
 80067e0:	bd80      	pop	{r7, pc}
 80067e2:	bf00      	nop
 80067e4:	e000e010 	.word	0xe000e010

080067e8 <main>:

//====================================================================
// >>>>>>>>>>>>>>>>>>>>>>>>>> MAIN <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
//====================================================================
int main(void)
{
 80067e8:	b580      	push	{r7, lr}
 80067ea:	b082      	sub	sp, #8
 80067ec:	af00      	add	r7, sp, #0
	HAL_Init();
 80067ee:	f7fa fb4f 	bl	8000e90 <HAL_Init>
	systemClock_Config();
 80067f2:	f000 fd97 	bl	8007324 <systemClock_Config>
    SysTick_Config(HAL_RCC_GetHCLKFreq() / 1000); //SysTick end of count event each 1ms
 80067f6:	f7fe fbd5 	bl	8004fa4 <HAL_RCC_GetHCLKFreq>
 80067fa:	4603      	mov	r3, r0
 80067fc:	4a39      	ldr	r2, [pc, #228]	; (80068e4 <main+0xfc>)
 80067fe:	fba2 2303 	umull	r2, r3, r2, r3
 8006802:	099b      	lsrs	r3, r3, #6
 8006804:	4618      	mov	r0, r3
 8006806:	f7ff ffcd 	bl	80067a4 <SysTick_Config>
	uart2_Init();
 800680a:	f7ff fce7 	bl	80061dc <uart2_Init>
	uart3_Init();
 800680e:	f7ff fd11 	bl	8006234 <uart3_Init>
	i2c1_Init();
 8006812:	f7ff fc2f 	bl	8006074 <i2c1_Init>

#if DYN_ANEMO_PRESS
    anemo_Timer1Init();
#endif

	HAL_Delay(1000); // Wait
 8006816:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800681a:	f7fa fb9b 	bl	8000f54 <HAL_Delay>
#if VL6180X
    VL6180x_Init();
#endif

#if MPU9250
    mpu9250_InitMPU9250();
 800681e:	f000 f94c 	bl	8006aba <mpu9250_InitMPU9250>
    mpu9250_CalibrateMPU9250();
 8006822:	f000 fa0b 	bl	8006c3c <mpu9250_CalibrateMPU9250>
#if USE_MAGNETOMETER
    mpu9250_InitAK8963(magCalibration);
#endif
    uint8_t response=0;
 8006826:	2300      	movs	r3, #0
 8006828:	71fb      	strb	r3, [r7, #7]
	response =  mpu9250_WhoAmI();
 800682a:	f000 f97f 	bl	8006b2c <mpu9250_WhoAmI>
 800682e:	4603      	mov	r3, r0
 8006830:	71fb      	strb	r3, [r7, #7]
	//term_printf("%d",response);
#endif


    can_Init();
 8006832:	f7ff fa19 	bl	8005c68 <can_Init>
    can_SetFreq(CAN_BAUDRATE); // CAN BAUDRATE : 500 MHz -- cf Inc/config.h
 8006836:	482c      	ldr	r0, [pc, #176]	; (80068e8 <main+0x100>)
 8006838:	f7ff fa56 	bl	8005ce8 <can_SetFreq>
#if USE_FILTER
    can_Filter_list((ID_1<<21)|(ID_2<<5) , (ID_3<<21)|(ID_4<<5) , CANStandard, 0); // Accept until 4 Standard IDs
 800683c:	2300      	movs	r3, #0
 800683e:	2200      	movs	r2, #0
 8006840:	492a      	ldr	r1, [pc, #168]	; (80068ec <main+0x104>)
 8006842:	482b      	ldr	r0, [pc, #172]	; (80068f0 <main+0x108>)
 8006844:	f7ff fb94 	bl	8005f70 <can_Filter_list>
#else
    can_Filter_disable(); // Accept everybody
#endif
    can_IrqInit();
 8006848:	f7ff face 	bl	8005de8 <can_IrqInit>
    can_IrqSet(&can_callback);
 800684c:	4829      	ldr	r0, [pc, #164]	; (80068f4 <main+0x10c>)
 800684e:	f7ff fad5 	bl	8005dfc <can_IrqSet>

    txMsg.id=0x55;
 8006852:	4b29      	ldr	r3, [pc, #164]	; (80068f8 <main+0x110>)
 8006854:	2255      	movs	r2, #85	; 0x55
 8006856:	601a      	str	r2, [r3, #0]
    txMsg.data[0]=1;
 8006858:	4b27      	ldr	r3, [pc, #156]	; (80068f8 <main+0x110>)
 800685a:	2201      	movs	r2, #1
 800685c:	711a      	strb	r2, [r3, #4]
    txMsg.data[1]=2;
 800685e:	4b26      	ldr	r3, [pc, #152]	; (80068f8 <main+0x110>)
 8006860:	2202      	movs	r2, #2
 8006862:	715a      	strb	r2, [r3, #5]
    txMsg.len=2;
 8006864:	4b24      	ldr	r3, [pc, #144]	; (80068f8 <main+0x110>)
 8006866:	2202      	movs	r2, #2
 8006868:	731a      	strb	r2, [r3, #12]
    txMsg.format=CANStandard;
 800686a:	4b23      	ldr	r3, [pc, #140]	; (80068f8 <main+0x110>)
 800686c:	2200      	movs	r2, #0
 800686e:	735a      	strb	r2, [r3, #13]
    txMsg.type=CANData;
 8006870:	4b21      	ldr	r3, [pc, #132]	; (80068f8 <main+0x110>)
 8006872:	2200      	movs	r2, #0
 8006874:	739a      	strb	r2, [r3, #14]

    can_Write(txMsg);
 8006876:	4b20      	ldr	r3, [pc, #128]	; (80068f8 <main+0x110>)
 8006878:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800687a:	f7ff facd 	bl	8005e18 <can_Write>



#if MPU9250

	 mpu9250_ReadAccelData(accel_data);
 800687e:	481f      	ldr	r0, [pc, #124]	; (80068fc <main+0x114>)
 8006880:	f000 f964 	bl	8006b4c <mpu9250_ReadAccelData>
	 mpu9250_ReadGyroData(gyro_data);
 8006884:	481e      	ldr	r0, [pc, #120]	; (8006900 <main+0x118>)
 8006886:	f000 f98d 	bl	8006ba4 <mpu9250_ReadGyroData>
	// mpu9250_ReadMagData(&mag_data);
	 temp_data = mpu9250_ReadTempData();
 800688a:	f000 f9b7 	bl	8006bfc <mpu9250_ReadTempData>
 800688e:	4603      	mov	r3, r0
 8006890:	461a      	mov	r2, r3
 8006892:	4b1c      	ldr	r3, [pc, #112]	; (8006904 <main+0x11c>)
 8006894:	801a      	strh	r2, [r3, #0]

	 term_printf("Accel(G): xl=%d, yl=%d, zl=%d\n", (int)accel_data_g[0],(int)accel_data_g[1], (int)accel_data_g[2] );
 8006896:	4b1c      	ldr	r3, [pc, #112]	; (8006908 <main+0x120>)
 8006898:	f9b3 3000 	ldrsh.w	r3, [r3]
 800689c:	4619      	mov	r1, r3
 800689e:	4b1a      	ldr	r3, [pc, #104]	; (8006908 <main+0x120>)
 80068a0:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80068a4:	461a      	mov	r2, r3
 80068a6:	4b18      	ldr	r3, [pc, #96]	; (8006908 <main+0x120>)
 80068a8:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80068ac:	4817      	ldr	r0, [pc, #92]	; (800690c <main+0x124>)
 80068ae:	f7ff fd3d 	bl	800632c <term_printf>
	 term_printf("Gyro(rad/s): xa=%d, ya=%d, za=%d\n", (int)gyro_data_rad[0],(int)gyro_data_rad[1],(int)gyro_data[2] );
 80068b2:	4b17      	ldr	r3, [pc, #92]	; (8006910 <main+0x128>)
 80068b4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80068b8:	4619      	mov	r1, r3
 80068ba:	4b15      	ldr	r3, [pc, #84]	; (8006910 <main+0x128>)
 80068bc:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80068c0:	461a      	mov	r2, r3
 80068c2:	4b0f      	ldr	r3, [pc, #60]	; (8006900 <main+0x118>)
 80068c4:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80068c8:	4812      	ldr	r0, [pc, #72]	; (8006914 <main+0x12c>)
 80068ca:	f7ff fd2f 	bl	800632c <term_printf>

	 can_send_temperature();
 80068ce:	f000 f841 	bl	8006954 <can_send_temperature>
	 can_send_accel();
 80068d2:	f000 f865 	bl	80069a0 <can_send_accel>
	 can_send_gyro();
 80068d6:	f000 f8a5 	bl	8006a24 <can_send_gyro>
//	 can_send_accel_g();
//	 can_send_gyro_rad_s();
	 HAL_Delay(100);
 80068da:	2064      	movs	r0, #100	; 0x64
 80068dc:	f7fa fb3a 	bl	8000f54 <HAL_Delay>
	 mpu9250_ReadAccelData(accel_data);
 80068e0:	e7cd      	b.n	800687e <main+0x96>
 80068e2:	bf00      	nop
 80068e4:	10624dd3 	.word	0x10624dd3
 80068e8:	0007a120 	.word	0x0007a120
 80068ec:	06000800 	.word	0x06000800
 80068f0:	02000400 	.word	0x02000400
 80068f4:	08006919 	.word	0x08006919
 80068f8:	200004f8 	.word	0x200004f8
 80068fc:	2000050c 	.word	0x2000050c
 8006900:	20000514 	.word	0x20000514
 8006904:	200004da 	.word	0x200004da
 8006908:	200004d4 	.word	0x200004d4
 800690c:	080079b0 	.word	0x080079b0
 8006910:	200004f0 	.word	0x200004f0
 8006914:	080079d0 	.word	0x080079d0

08006918 <can_callback>:
//====================================================================
//			CAN CALLBACK RECEPT
//====================================================================

void can_callback(void)
{
 8006918:	b580      	push	{r7, lr}
 800691a:	b084      	sub	sp, #16
 800691c:	af00      	add	r7, sp, #0
	CAN_Message msg_rcv;


	can_Read(&msg_rcv);
 800691e:	463b      	mov	r3, r7
 8006920:	4618      	mov	r0, r3
 8006922:	f7ff fad1 	bl	8005ec8 <can_Read>
	txMsg.id=0x55;			// Identifiant du message à envoyer
 8006926:	4b0a      	ldr	r3, [pc, #40]	; (8006950 <can_callback+0x38>)
 8006928:	2255      	movs	r2, #85	; 0x55
 800692a:	601a      	str	r2, [r3, #0]
	txMsg.len=8;			// Nombre d'octets à envoyer
 800692c:	4b08      	ldr	r3, [pc, #32]	; (8006950 <can_callback+0x38>)
 800692e:	2208      	movs	r2, #8
 8006930:	731a      	strb	r2, [r3, #12]
	txMsg.format=CANStandard;
 8006932:	4b07      	ldr	r3, [pc, #28]	; (8006950 <can_callback+0x38>)
 8006934:	2200      	movs	r2, #0
 8006936:	735a      	strb	r2, [r3, #13]
	txMsg.type=CANData;
 8006938:	4b05      	ldr	r3, [pc, #20]	; (8006950 <can_callback+0x38>)
 800693a:	2200      	movs	r2, #0
 800693c:	739a      	strb	r2, [r3, #14]

	can_Write(txMsg);
 800693e:	4b04      	ldr	r3, [pc, #16]	; (8006950 <can_callback+0x38>)
 8006940:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8006942:	f7ff fa69 	bl	8005e18 <can_Write>
}
 8006946:	bf00      	nop
 8006948:	3710      	adds	r7, #16
 800694a:	46bd      	mov	sp, r7
 800694c:	bd80      	pop	{r7, pc}
 800694e:	bf00      	nop
 8006950:	200004f8 	.word	0x200004f8

08006954 <can_send_temperature>:

void can_send_temperature(){
 8006954:	b580      	push	{r7, lr}
 8006956:	af00      	add	r7, sp, #0
    txMsg.id = 0x01;
 8006958:	4b0f      	ldr	r3, [pc, #60]	; (8006998 <can_send_temperature+0x44>)
 800695a:	2201      	movs	r2, #1
 800695c:	601a      	str	r2, [r3, #0]
	txMsg.len = 2;
 800695e:	4b0e      	ldr	r3, [pc, #56]	; (8006998 <can_send_temperature+0x44>)
 8006960:	2202      	movs	r2, #2
 8006962:	731a      	strb	r2, [r3, #12]
	txMsg.type = CANData;
 8006964:	4b0c      	ldr	r3, [pc, #48]	; (8006998 <can_send_temperature+0x44>)
 8006966:	2200      	movs	r2, #0
 8006968:	739a      	strb	r2, [r3, #14]
	txMsg.format = CANStandard;
 800696a:	4b0b      	ldr	r3, [pc, #44]	; (8006998 <can_send_temperature+0x44>)
 800696c:	2200      	movs	r2, #0
 800696e:	735a      	strb	r2, [r3, #13]

	// Pack temperature data into CAN message
	txMsg.data[0] = (uint8_t)(temp_data & 0xFF);
 8006970:	4b0a      	ldr	r3, [pc, #40]	; (800699c <can_send_temperature+0x48>)
 8006972:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006976:	b2da      	uxtb	r2, r3
 8006978:	4b07      	ldr	r3, [pc, #28]	; (8006998 <can_send_temperature+0x44>)
 800697a:	711a      	strb	r2, [r3, #4]
	txMsg.data[1] = (uint8_t)((temp_data >> 8) & 0xFF);
 800697c:	4b07      	ldr	r3, [pc, #28]	; (800699c <can_send_temperature+0x48>)
 800697e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006982:	121b      	asrs	r3, r3, #8
 8006984:	b21b      	sxth	r3, r3
 8006986:	b2da      	uxtb	r2, r3
 8006988:	4b03      	ldr	r3, [pc, #12]	; (8006998 <can_send_temperature+0x44>)
 800698a:	715a      	strb	r2, [r3, #5]
	can_Write(txMsg);
 800698c:	4b02      	ldr	r3, [pc, #8]	; (8006998 <can_send_temperature+0x44>)
 800698e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8006990:	f7ff fa42 	bl	8005e18 <can_Write>
}
 8006994:	bf00      	nop
 8006996:	bd80      	pop	{r7, pc}
 8006998:	200004f8 	.word	0x200004f8
 800699c:	200004da 	.word	0x200004da

080069a0 <can_send_accel>:
void can_send_accel(){
 80069a0:	b580      	push	{r7, lr}
 80069a2:	af00      	add	r7, sp, #0
	txMsg.id = 0x02; // Set CAN message ID for accelerometer data (adjust as needed)
 80069a4:	4b1d      	ldr	r3, [pc, #116]	; (8006a1c <can_send_accel+0x7c>)
 80069a6:	2202      	movs	r2, #2
 80069a8:	601a      	str	r2, [r3, #0]
	txMsg.len = 6; // 6 bytes for accelerometer data (2 bytes for each axis)
 80069aa:	4b1c      	ldr	r3, [pc, #112]	; (8006a1c <can_send_accel+0x7c>)
 80069ac:	2206      	movs	r2, #6
 80069ae:	731a      	strb	r2, [r3, #12]
	txMsg.type = CANData;
 80069b0:	4b1a      	ldr	r3, [pc, #104]	; (8006a1c <can_send_accel+0x7c>)
 80069b2:	2200      	movs	r2, #0
 80069b4:	739a      	strb	r2, [r3, #14]
	txMsg.format = CANStandard;
 80069b6:	4b19      	ldr	r3, [pc, #100]	; (8006a1c <can_send_accel+0x7c>)
 80069b8:	2200      	movs	r2, #0
 80069ba:	735a      	strb	r2, [r3, #13]

	// Pack accelerometer data into CAN message
	txMsg.data[0] = (uint8_t)(accel_data[0] & 0xFF);
 80069bc:	4b18      	ldr	r3, [pc, #96]	; (8006a20 <can_send_accel+0x80>)
 80069be:	f9b3 3000 	ldrsh.w	r3, [r3]
 80069c2:	b2da      	uxtb	r2, r3
 80069c4:	4b15      	ldr	r3, [pc, #84]	; (8006a1c <can_send_accel+0x7c>)
 80069c6:	711a      	strb	r2, [r3, #4]
	txMsg.data[1] = (uint8_t)((accel_data[0] >> 8) & 0xFF);
 80069c8:	4b15      	ldr	r3, [pc, #84]	; (8006a20 <can_send_accel+0x80>)
 80069ca:	f9b3 3000 	ldrsh.w	r3, [r3]
 80069ce:	121b      	asrs	r3, r3, #8
 80069d0:	b21b      	sxth	r3, r3
 80069d2:	b2da      	uxtb	r2, r3
 80069d4:	4b11      	ldr	r3, [pc, #68]	; (8006a1c <can_send_accel+0x7c>)
 80069d6:	715a      	strb	r2, [r3, #5]
	txMsg.data[2] = (uint8_t)(accel_data[1] & 0xFF);
 80069d8:	4b11      	ldr	r3, [pc, #68]	; (8006a20 <can_send_accel+0x80>)
 80069da:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80069de:	b2da      	uxtb	r2, r3
 80069e0:	4b0e      	ldr	r3, [pc, #56]	; (8006a1c <can_send_accel+0x7c>)
 80069e2:	719a      	strb	r2, [r3, #6]
	txMsg.data[3] = (uint8_t)((accel_data[1] >> 8) & 0xFF);
 80069e4:	4b0e      	ldr	r3, [pc, #56]	; (8006a20 <can_send_accel+0x80>)
 80069e6:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80069ea:	121b      	asrs	r3, r3, #8
 80069ec:	b21b      	sxth	r3, r3
 80069ee:	b2da      	uxtb	r2, r3
 80069f0:	4b0a      	ldr	r3, [pc, #40]	; (8006a1c <can_send_accel+0x7c>)
 80069f2:	71da      	strb	r2, [r3, #7]
	txMsg.data[4] = (uint8_t)(accel_data[2] & 0xFF);
 80069f4:	4b0a      	ldr	r3, [pc, #40]	; (8006a20 <can_send_accel+0x80>)
 80069f6:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80069fa:	b2da      	uxtb	r2, r3
 80069fc:	4b07      	ldr	r3, [pc, #28]	; (8006a1c <can_send_accel+0x7c>)
 80069fe:	721a      	strb	r2, [r3, #8]
	txMsg.data[5] = (uint8_t)((accel_data[2] >> 8) & 0xFF);
 8006a00:	4b07      	ldr	r3, [pc, #28]	; (8006a20 <can_send_accel+0x80>)
 8006a02:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8006a06:	121b      	asrs	r3, r3, #8
 8006a08:	b21b      	sxth	r3, r3
 8006a0a:	b2da      	uxtb	r2, r3
 8006a0c:	4b03      	ldr	r3, [pc, #12]	; (8006a1c <can_send_accel+0x7c>)
 8006a0e:	725a      	strb	r2, [r3, #9]
	can_Write(txMsg);
 8006a10:	4b02      	ldr	r3, [pc, #8]	; (8006a1c <can_send_accel+0x7c>)
 8006a12:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8006a14:	f7ff fa00 	bl	8005e18 <can_Write>

}
 8006a18:	bf00      	nop
 8006a1a:	bd80      	pop	{r7, pc}
 8006a1c:	200004f8 	.word	0x200004f8
 8006a20:	2000050c 	.word	0x2000050c

08006a24 <can_send_gyro>:

void can_send_gyro(){
 8006a24:	b580      	push	{r7, lr}
 8006a26:	af00      	add	r7, sp, #0
	txMsg.id = 0x03;
 8006a28:	4b1d      	ldr	r3, [pc, #116]	; (8006aa0 <can_send_gyro+0x7c>)
 8006a2a:	2203      	movs	r2, #3
 8006a2c:	601a      	str	r2, [r3, #0]
	txMsg.len = 6;
 8006a2e:	4b1c      	ldr	r3, [pc, #112]	; (8006aa0 <can_send_gyro+0x7c>)
 8006a30:	2206      	movs	r2, #6
 8006a32:	731a      	strb	r2, [r3, #12]
	txMsg.type = CANData;
 8006a34:	4b1a      	ldr	r3, [pc, #104]	; (8006aa0 <can_send_gyro+0x7c>)
 8006a36:	2200      	movs	r2, #0
 8006a38:	739a      	strb	r2, [r3, #14]
	txMsg.format = CANStandard;
 8006a3a:	4b19      	ldr	r3, [pc, #100]	; (8006aa0 <can_send_gyro+0x7c>)
 8006a3c:	2200      	movs	r2, #0
 8006a3e:	735a      	strb	r2, [r3, #13]

	// Pack gyroscope data into CAN message
	txMsg.data[0] = (uint8_t)(gyro_data[0] & 0xFF);
 8006a40:	4b18      	ldr	r3, [pc, #96]	; (8006aa4 <can_send_gyro+0x80>)
 8006a42:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006a46:	b2da      	uxtb	r2, r3
 8006a48:	4b15      	ldr	r3, [pc, #84]	; (8006aa0 <can_send_gyro+0x7c>)
 8006a4a:	711a      	strb	r2, [r3, #4]
	txMsg.data[1] = (uint8_t)((gyro_data[0] >> 8) & 0xFF);
 8006a4c:	4b15      	ldr	r3, [pc, #84]	; (8006aa4 <can_send_gyro+0x80>)
 8006a4e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006a52:	121b      	asrs	r3, r3, #8
 8006a54:	b21b      	sxth	r3, r3
 8006a56:	b2da      	uxtb	r2, r3
 8006a58:	4b11      	ldr	r3, [pc, #68]	; (8006aa0 <can_send_gyro+0x7c>)
 8006a5a:	715a      	strb	r2, [r3, #5]
	txMsg.data[2] = (uint8_t)(gyro_data[1] & 0xFF);
 8006a5c:	4b11      	ldr	r3, [pc, #68]	; (8006aa4 <can_send_gyro+0x80>)
 8006a5e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8006a62:	b2da      	uxtb	r2, r3
 8006a64:	4b0e      	ldr	r3, [pc, #56]	; (8006aa0 <can_send_gyro+0x7c>)
 8006a66:	719a      	strb	r2, [r3, #6]
	txMsg.data[3] = (uint8_t)((gyro_data[1] >> 8) & 0xFF);
 8006a68:	4b0e      	ldr	r3, [pc, #56]	; (8006aa4 <can_send_gyro+0x80>)
 8006a6a:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8006a6e:	121b      	asrs	r3, r3, #8
 8006a70:	b21b      	sxth	r3, r3
 8006a72:	b2da      	uxtb	r2, r3
 8006a74:	4b0a      	ldr	r3, [pc, #40]	; (8006aa0 <can_send_gyro+0x7c>)
 8006a76:	71da      	strb	r2, [r3, #7]
	txMsg.data[4] = (uint8_t)(gyro_data[2] & 0xFF);
 8006a78:	4b0a      	ldr	r3, [pc, #40]	; (8006aa4 <can_send_gyro+0x80>)
 8006a7a:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8006a7e:	b2da      	uxtb	r2, r3
 8006a80:	4b07      	ldr	r3, [pc, #28]	; (8006aa0 <can_send_gyro+0x7c>)
 8006a82:	721a      	strb	r2, [r3, #8]
	txMsg.data[5] = (uint8_t)((gyro_data[2] >> 8) & 0xFF);
 8006a84:	4b07      	ldr	r3, [pc, #28]	; (8006aa4 <can_send_gyro+0x80>)
 8006a86:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8006a8a:	121b      	asrs	r3, r3, #8
 8006a8c:	b21b      	sxth	r3, r3
 8006a8e:	b2da      	uxtb	r2, r3
 8006a90:	4b03      	ldr	r3, [pc, #12]	; (8006aa0 <can_send_gyro+0x7c>)
 8006a92:	725a      	strb	r2, [r3, #9]

	can_Write(txMsg);
 8006a94:	4b02      	ldr	r3, [pc, #8]	; (8006aa0 <can_send_gyro+0x7c>)
 8006a96:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8006a98:	f7ff f9be 	bl	8005e18 <can_Write>
}
 8006a9c:	bf00      	nop
 8006a9e:	bd80      	pop	{r7, pc}
 8006aa0:	200004f8 	.word	0x200004f8
 8006aa4:	20000514 	.word	0x20000514

08006aa8 <HAL_TIM_PeriodElapsedCallback>:
//====================================================================
//			TIMER CALLBACK PERIOD
//====================================================================

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006aa8:	b480      	push	{r7}
 8006aaa:	b083      	sub	sp, #12
 8006aac:	af00      	add	r7, sp, #0
 8006aae:	6078      	str	r0, [r7, #4]
	//term_printf("from timer interrupt\n\r");
}
 8006ab0:	bf00      	nop
 8006ab2:	370c      	adds	r7, #12
 8006ab4:	46bd      	mov	sp, r7
 8006ab6:	bc80      	pop	{r7}
 8006ab8:	4770      	bx	lr

08006aba <mpu9250_InitMPU9250>:

//================================================================
//			INIT MPU9250
//================================================================
void mpu9250_InitMPU9250()
{
 8006aba:	b580      	push	{r7, lr}
 8006abc:	af00      	add	r7, sp, #0
	mpu9250_ResetMPU9250();
 8006abe:	f000 f8b1 	bl	8006c24 <mpu9250_ResetMPU9250>
	HAL_Delay(100);
 8006ac2:	2064      	movs	r0, #100	; 0x64
 8006ac4:	f7fa fa46 	bl	8000f54 <HAL_Delay>
	// wake up device
	i2c1_WriteRegByte_IT(MPU9250_ADDRESS, PWR_MGMT_1, 	0x00); // Clear sleep mode bit (6), enable all sensors
 8006ac8:	2200      	movs	r2, #0
 8006aca:	216b      	movs	r1, #107	; 0x6b
 8006acc:	20d0      	movs	r0, #208	; 0xd0
 8006ace:	f7ff fb2b 	bl	8006128 <i2c1_WriteRegByte_IT>
	HAL_Delay(100); // Delay 100 ms for PLL to get established on x-axis gyro; should check for PLL ready interrupt
 8006ad2:	2064      	movs	r0, #100	; 0x64
 8006ad4:	f7fa fa3e 	bl	8000f54 <HAL_Delay>
	i2c1_WriteRegByte_IT(MPU9250_ADDRESS, PWR_MGMT_1, 	0x01);  // Set clock source to be PLL with x-axis gyroscope reference, bits 2:0 = 001
 8006ad8:	2201      	movs	r2, #1
 8006ada:	216b      	movs	r1, #107	; 0x6b
 8006adc:	20d0      	movs	r0, #208	; 0xd0
 8006ade:	f7ff fb23 	bl	8006128 <i2c1_WriteRegByte_IT>
	i2c1_WriteRegByte_IT(MPU9250_ADDRESS, PWR_MGMT_2, 	0x00);
 8006ae2:	2200      	movs	r2, #0
 8006ae4:	216c      	movs	r1, #108	; 0x6c
 8006ae6:	20d0      	movs	r0, #208	; 0xd0
 8006ae8:	f7ff fb1e 	bl	8006128 <i2c1_WriteRegByte_IT>
	i2c1_WriteRegByte_IT(MPU9250_ADDRESS, CONFIG, 		BANDWITH_GYRO_250_HZ); //41
 8006aec:	2200      	movs	r2, #0
 8006aee:	211a      	movs	r1, #26
 8006af0:	20d0      	movs	r0, #208	; 0xd0
 8006af2:	f7ff fb19 	bl	8006128 <i2c1_WriteRegByte_IT>
	i2c1_WriteRegByte_IT(MPU9250_ADDRESS, SMPLRT_DIV, 	SAMPLE_RATE_DIVIDER_0);
 8006af6:	2200      	movs	r2, #0
 8006af8:	2119      	movs	r1, #25
 8006afa:	20d0      	movs	r0, #208	; 0xd0
 8006afc:	f7ff fb14 	bl	8006128 <i2c1_WriteRegByte_IT>
	i2c1_WriteRegByte_IT(MPU9250_ADDRESS, GYRO_CONFIG, 	GYRO_FULL_SCALE_1000_DPS);
 8006b00:	2210      	movs	r2, #16
 8006b02:	211b      	movs	r1, #27
 8006b04:	20d0      	movs	r0, #208	; 0xd0
 8006b06:	f7ff fb0f 	bl	8006128 <i2c1_WriteRegByte_IT>
	i2c1_WriteRegByte_IT(MPU9250_ADDRESS, ACCEL_CONFIG, 	ACC_FULL_SCALE_4_G);
 8006b0a:	2208      	movs	r2, #8
 8006b0c:	211c      	movs	r1, #28
 8006b0e:	20d0      	movs	r0, #208	; 0xd0
 8006b10:	f7ff fb0a 	bl	8006128 <i2c1_WriteRegByte_IT>
	i2c1_WriteRegByte_IT(MPU9250_ADDRESS, ACCEL_CONFIG2, BANDWITH_ACCEL_41_Hz);
 8006b14:	2203      	movs	r2, #3
 8006b16:	211d      	movs	r1, #29
 8006b18:	20d0      	movs	r0, #208	; 0xd0
 8006b1a:	f7ff fb05 	bl	8006128 <i2c1_WriteRegByte_IT>
	i2c1_WriteRegByte_IT(MPU9250_ADDRESS, INT_PIN_CFG, 	BYPASS_EN); // 0x37 0x02
 8006b1e:	2202      	movs	r2, #2
 8006b20:	2137      	movs	r1, #55	; 0x37
 8006b22:	20d0      	movs	r0, #208	; 0xd0
 8006b24:	f7ff fb00 	bl	8006128 <i2c1_WriteRegByte_IT>
}
 8006b28:	bf00      	nop
 8006b2a:	bd80      	pop	{r7, pc}

08006b2c <mpu9250_WhoAmI>:
}
//================================================================
//	GET MPU9250 DEVICE ID (Default Value : 0x71)
//================================================================
uint8_t mpu9250_WhoAmI(void)
{
 8006b2c:	b580      	push	{r7, lr}
 8006b2e:	b082      	sub	sp, #8
 8006b30:	af00      	add	r7, sp, #0
	uint8_t response=0;
 8006b32:	2300      	movs	r3, #0
 8006b34:	71fb      	strb	r3, [r7, #7]
	i2c1_ReadRegBuffer_IT( MPU9250_ADDRESS, WHO_AM_I_MPU9250 ,&response,1);
 8006b36:	1dfa      	adds	r2, r7, #7
 8006b38:	2301      	movs	r3, #1
 8006b3a:	2175      	movs	r1, #117	; 0x75
 8006b3c:	20d0      	movs	r0, #208	; 0xd0
 8006b3e:	f7ff fb19 	bl	8006174 <i2c1_ReadRegBuffer_IT>
	return response;
 8006b42:	79fb      	ldrb	r3, [r7, #7]
}
 8006b44:	4618      	mov	r0, r3
 8006b46:	3708      	adds	r7, #8
 8006b48:	46bd      	mov	sp, r7
 8006b4a:	bd80      	pop	{r7, pc}

08006b4c <mpu9250_ReadAccelData>:
  }
//================================================================
//			READ ACCELERATION
//================================================================
void mpu9250_ReadAccelData(int16_t * destination)
{
 8006b4c:	b580      	push	{r7, lr}
 8006b4e:	b084      	sub	sp, #16
 8006b50:	af00      	add	r7, sp, #0
 8006b52:	6078      	str	r0, [r7, #4]
  uint8_t rawData[6];  // x/y/z accel register data stored here
  i2c1_ReadRegBuffer( MPU9250_ADDRESS, ACCEL_XOUT_H,&rawData[0],6);  // Read the six raw data registers into data array
 8006b54:	f107 0208 	add.w	r2, r7, #8
 8006b58:	2306      	movs	r3, #6
 8006b5a:	213b      	movs	r1, #59	; 0x3b
 8006b5c:	20d0      	movs	r0, #208	; 0xd0
 8006b5e:	f7ff fab1 	bl	80060c4 <i2c1_ReadRegBuffer>
  destination[0] = (int16_t)(((int16_t)rawData[0] << 8) | rawData[1]) ;  // Turn the MSB and LSB into a signed 16-bit value
 8006b62:	7a3b      	ldrb	r3, [r7, #8]
 8006b64:	021b      	lsls	r3, r3, #8
 8006b66:	b21a      	sxth	r2, r3
 8006b68:	7a7b      	ldrb	r3, [r7, #9]
 8006b6a:	b21b      	sxth	r3, r3
 8006b6c:	4313      	orrs	r3, r2
 8006b6e:	b21a      	sxth	r2, r3
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	801a      	strh	r2, [r3, #0]
  destination[1] = (int16_t)(((int16_t)rawData[2] << 8) | rawData[3]) ;
 8006b74:	7abb      	ldrb	r3, [r7, #10]
 8006b76:	021b      	lsls	r3, r3, #8
 8006b78:	b219      	sxth	r1, r3
 8006b7a:	7afb      	ldrb	r3, [r7, #11]
 8006b7c:	b21a      	sxth	r2, r3
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	3302      	adds	r3, #2
 8006b82:	430a      	orrs	r2, r1
 8006b84:	b212      	sxth	r2, r2
 8006b86:	801a      	strh	r2, [r3, #0]
  destination[2] = (int16_t)(((int16_t)rawData[4] << 8) | rawData[5]) ;
 8006b88:	7b3b      	ldrb	r3, [r7, #12]
 8006b8a:	021b      	lsls	r3, r3, #8
 8006b8c:	b219      	sxth	r1, r3
 8006b8e:	7b7b      	ldrb	r3, [r7, #13]
 8006b90:	b21a      	sxth	r2, r3
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	3304      	adds	r3, #4
 8006b96:	430a      	orrs	r2, r1
 8006b98:	b212      	sxth	r2, r2
 8006b9a:	801a      	strh	r2, [r3, #0]
}
 8006b9c:	bf00      	nop
 8006b9e:	3710      	adds	r7, #16
 8006ba0:	46bd      	mov	sp, r7
 8006ba2:	bd80      	pop	{r7, pc}

08006ba4 <mpu9250_ReadGyroData>:
//================================================================
//			READ GYRO
//================================================================
void mpu9250_ReadGyroData(int16_t * destination)
{
 8006ba4:	b580      	push	{r7, lr}
 8006ba6:	b084      	sub	sp, #16
 8006ba8:	af00      	add	r7, sp, #0
 8006baa:	6078      	str	r0, [r7, #4]
  uint8_t rawData[6];  // x/y/z gyro register data stored here
  i2c1_ReadRegBuffer( MPU9250_ADDRESS, GYRO_XOUT_H, &rawData[0],6);  // Read the six raw data registers sequentially into data array
 8006bac:	f107 0208 	add.w	r2, r7, #8
 8006bb0:	2306      	movs	r3, #6
 8006bb2:	2143      	movs	r1, #67	; 0x43
 8006bb4:	20d0      	movs	r0, #208	; 0xd0
 8006bb6:	f7ff fa85 	bl	80060c4 <i2c1_ReadRegBuffer>
  destination[0] = (int16_t)(((int16_t)rawData[0] << 8) | rawData[1]) ;  // Turn the MSB and LSB into a signed 16-bit value
 8006bba:	7a3b      	ldrb	r3, [r7, #8]
 8006bbc:	021b      	lsls	r3, r3, #8
 8006bbe:	b21a      	sxth	r2, r3
 8006bc0:	7a7b      	ldrb	r3, [r7, #9]
 8006bc2:	b21b      	sxth	r3, r3
 8006bc4:	4313      	orrs	r3, r2
 8006bc6:	b21a      	sxth	r2, r3
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	801a      	strh	r2, [r3, #0]
  destination[1] = (int16_t)(((int16_t)rawData[2] << 8) | rawData[3]) ;
 8006bcc:	7abb      	ldrb	r3, [r7, #10]
 8006bce:	021b      	lsls	r3, r3, #8
 8006bd0:	b219      	sxth	r1, r3
 8006bd2:	7afb      	ldrb	r3, [r7, #11]
 8006bd4:	b21a      	sxth	r2, r3
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	3302      	adds	r3, #2
 8006bda:	430a      	orrs	r2, r1
 8006bdc:	b212      	sxth	r2, r2
 8006bde:	801a      	strh	r2, [r3, #0]
  destination[2] = (int16_t)(((int16_t)rawData[4] << 8) | rawData[5]) ;
 8006be0:	7b3b      	ldrb	r3, [r7, #12]
 8006be2:	021b      	lsls	r3, r3, #8
 8006be4:	b219      	sxth	r1, r3
 8006be6:	7b7b      	ldrb	r3, [r7, #13]
 8006be8:	b21a      	sxth	r2, r3
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	3304      	adds	r3, #4
 8006bee:	430a      	orrs	r2, r1
 8006bf0:	b212      	sxth	r2, r2
 8006bf2:	801a      	strh	r2, [r3, #0]
}
 8006bf4:	bf00      	nop
 8006bf6:	3710      	adds	r7, #16
 8006bf8:	46bd      	mov	sp, r7
 8006bfa:	bd80      	pop	{r7, pc}

08006bfc <mpu9250_ReadTempData>:
}
//================================================================
//			READ TEMPERATURE
//================================================================
int16_t mpu9250_ReadTempData()
{
 8006bfc:	b580      	push	{r7, lr}
 8006bfe:	b082      	sub	sp, #8
 8006c00:	af00      	add	r7, sp, #0
  uint8_t rawData[2];  // x/y/z gyro register data stored here
  i2c1_ReadRegBuffer_IT( MPU9250_ADDRESS, TEMP_OUT_H, &rawData[0],2);  // Read the two raw data registers sequentially into data array
 8006c02:	1d3a      	adds	r2, r7, #4
 8006c04:	2302      	movs	r3, #2
 8006c06:	2141      	movs	r1, #65	; 0x41
 8006c08:	20d0      	movs	r0, #208	; 0xd0
 8006c0a:	f7ff fab3 	bl	8006174 <i2c1_ReadRegBuffer_IT>
  return (int16_t)(((int16_t)rawData[0]) << 8 | rawData[1]) ;  // Turn the MSB and LSB into a 16-bit value
 8006c0e:	793b      	ldrb	r3, [r7, #4]
 8006c10:	021b      	lsls	r3, r3, #8
 8006c12:	b21a      	sxth	r2, r3
 8006c14:	797b      	ldrb	r3, [r7, #5]
 8006c16:	b21b      	sxth	r3, r3
 8006c18:	4313      	orrs	r3, r2
 8006c1a:	b21b      	sxth	r3, r3
}
 8006c1c:	4618      	mov	r0, r3
 8006c1e:	3708      	adds	r7, #8
 8006c20:	46bd      	mov	sp, r7
 8006c22:	bd80      	pop	{r7, pc}

08006c24 <mpu9250_ResetMPU9250>:
//================================================================
//			RESET MPU9250
//================================================================
void mpu9250_ResetMPU9250()
{
 8006c24:	b580      	push	{r7, lr}
 8006c26:	af00      	add	r7, sp, #0
	i2c1_WriteRegByte_IT( MPU9250_ADDRESS, PWR_MGMT_1, 0x80); // Write a one to bit 7 reset bit; toggle reset device
 8006c28:	2280      	movs	r2, #128	; 0x80
 8006c2a:	216b      	movs	r1, #107	; 0x6b
 8006c2c:	20d0      	movs	r0, #208	; 0xd0
 8006c2e:	f7ff fa7b 	bl	8006128 <i2c1_WriteRegByte_IT>
	  HAL_Delay(100);
 8006c32:	2064      	movs	r0, #100	; 0x64
 8006c34:	f7fa f98e 	bl	8000f54 <HAL_Delay>
}
 8006c38:	bf00      	nop
 8006c3a:	bd80      	pop	{r7, pc}

08006c3c <mpu9250_CalibrateMPU9250>:
//================================================================
//			CALIBRATE
//================================================================
void mpu9250_CalibrateMPU9250()
{
 8006c3c:	b580      	push	{r7, lr}
 8006c3e:	b08e      	sub	sp, #56	; 0x38
 8006c40:	af00      	add	r7, sp, #0
	int nb_mes=0;
 8006c42:	2300      	movs	r3, #0
 8006c44:	637b      	str	r3, [r7, #52]	; 0x34
	uint8_t Buf[14];
	int16_t ax=0, ay=0, az=0;
 8006c46:	2300      	movs	r3, #0
 8006c48:	837b      	strh	r3, [r7, #26]
 8006c4a:	2300      	movs	r3, #0
 8006c4c:	833b      	strh	r3, [r7, #24]
 8006c4e:	2300      	movs	r3, #0
 8006c50:	82fb      	strh	r3, [r7, #22]
	int16_t gx=0, gy=0, gz=0;
 8006c52:	2300      	movs	r3, #0
 8006c54:	82bb      	strh	r3, [r7, #20]
 8006c56:	2300      	movs	r3, #0
 8006c58:	827b      	strh	r3, [r7, #18]
 8006c5a:	2300      	movs	r3, #0
 8006c5c:	823b      	strh	r3, [r7, #16]
	int32_t ax_acc=0, ay_acc=0, az_acc=0;
 8006c5e:	2300      	movs	r3, #0
 8006c60:	633b      	str	r3, [r7, #48]	; 0x30
 8006c62:	2300      	movs	r3, #0
 8006c64:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006c66:	2300      	movs	r3, #0
 8006c68:	62bb      	str	r3, [r7, #40]	; 0x28
	int32_t	gx_acc=0, gy_acc=0, gz_acc=0;
 8006c6a:	2300      	movs	r3, #0
 8006c6c:	627b      	str	r3, [r7, #36]	; 0x24
 8006c6e:	2300      	movs	r3, #0
 8006c70:	623b      	str	r3, [r7, #32]
 8006c72:	2300      	movs	r3, #0
 8006c74:	61fb      	str	r3, [r7, #28]
	//uint8_t data[12]; // data array to hold accelerometer and gyro x, y, z, data

	for(nb_mes=0 ; nb_mes < 100 ; nb_mes++)
 8006c76:	2300      	movs	r3, #0
 8006c78:	637b      	str	r3, [r7, #52]	; 0x34
 8006c7a:	e053      	b.n	8006d24 <mpu9250_CalibrateMPU9250+0xe8>
	{
	i2c1_ReadRegBuffer_IT( MPU9250_ADDRESS,ACCEL_XOUT_H ,  Buf,14);
 8006c7c:	463a      	mov	r2, r7
 8006c7e:	230e      	movs	r3, #14
 8006c80:	213b      	movs	r1, #59	; 0x3b
 8006c82:	20d0      	movs	r0, #208	; 0xd0
 8006c84:	f7ff fa76 	bl	8006174 <i2c1_ReadRegBuffer_IT>
	ax=(int16_t)((int16_t)Buf[0]<<8 	| Buf[1]);
 8006c88:	783b      	ldrb	r3, [r7, #0]
 8006c8a:	021b      	lsls	r3, r3, #8
 8006c8c:	b21a      	sxth	r2, r3
 8006c8e:	787b      	ldrb	r3, [r7, #1]
 8006c90:	b21b      	sxth	r3, r3
 8006c92:	4313      	orrs	r3, r2
 8006c94:	837b      	strh	r3, [r7, #26]
	ay=(int16_t)((int16_t)Buf[2]<<8 	| Buf[3]);
 8006c96:	78bb      	ldrb	r3, [r7, #2]
 8006c98:	021b      	lsls	r3, r3, #8
 8006c9a:	b21a      	sxth	r2, r3
 8006c9c:	78fb      	ldrb	r3, [r7, #3]
 8006c9e:	b21b      	sxth	r3, r3
 8006ca0:	4313      	orrs	r3, r2
 8006ca2:	833b      	strh	r3, [r7, #24]
	az=(int16_t)((int16_t)Buf[4]<<8 	| Buf[5]);
 8006ca4:	793b      	ldrb	r3, [r7, #4]
 8006ca6:	021b      	lsls	r3, r3, #8
 8006ca8:	b21a      	sxth	r2, r3
 8006caa:	797b      	ldrb	r3, [r7, #5]
 8006cac:	b21b      	sxth	r3, r3
 8006cae:	4313      	orrs	r3, r2
 8006cb0:	82fb      	strh	r3, [r7, #22]
	gx=(int16_t)((int16_t)Buf[8]<<8 	| Buf[9]);
 8006cb2:	7a3b      	ldrb	r3, [r7, #8]
 8006cb4:	021b      	lsls	r3, r3, #8
 8006cb6:	b21a      	sxth	r2, r3
 8006cb8:	7a7b      	ldrb	r3, [r7, #9]
 8006cba:	b21b      	sxth	r3, r3
 8006cbc:	4313      	orrs	r3, r2
 8006cbe:	82bb      	strh	r3, [r7, #20]
	gy=(int16_t)((int16_t)Buf[10]<<8 	| Buf[11]);
 8006cc0:	7abb      	ldrb	r3, [r7, #10]
 8006cc2:	021b      	lsls	r3, r3, #8
 8006cc4:	b21a      	sxth	r2, r3
 8006cc6:	7afb      	ldrb	r3, [r7, #11]
 8006cc8:	b21b      	sxth	r3, r3
 8006cca:	4313      	orrs	r3, r2
 8006ccc:	827b      	strh	r3, [r7, #18]
	gz=(int16_t)((int16_t)Buf[12]<<8 	| Buf[13]);
 8006cce:	7b3b      	ldrb	r3, [r7, #12]
 8006cd0:	021b      	lsls	r3, r3, #8
 8006cd2:	b21a      	sxth	r2, r3
 8006cd4:	7b7b      	ldrb	r3, [r7, #13]
 8006cd6:	b21b      	sxth	r3, r3
 8006cd8:	4313      	orrs	r3, r2
 8006cda:	823b      	strh	r3, [r7, #16]

	ax_acc=ax_acc+(int32_t)ax;
 8006cdc:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8006ce0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006ce2:	4413      	add	r3, r2
 8006ce4:	633b      	str	r3, [r7, #48]	; 0x30
	ay_acc=ay_acc+(int32_t)ay;
 8006ce6:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8006cea:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006cec:	4413      	add	r3, r2
 8006cee:	62fb      	str	r3, [r7, #44]	; 0x2c
	az_acc=az_acc+(int32_t)az;
 8006cf0:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8006cf4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006cf6:	4413      	add	r3, r2
 8006cf8:	62bb      	str	r3, [r7, #40]	; 0x28
	gx_acc=gx_acc+(int32_t)gx;
 8006cfa:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8006cfe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006d00:	4413      	add	r3, r2
 8006d02:	627b      	str	r3, [r7, #36]	; 0x24
	gy_acc=gy_acc+(int32_t)gy;
 8006d04:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8006d08:	6a3a      	ldr	r2, [r7, #32]
 8006d0a:	4413      	add	r3, r2
 8006d0c:	623b      	str	r3, [r7, #32]
	gz_acc=gz_acc+(int32_t)gz;
 8006d0e:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8006d12:	69fa      	ldr	r2, [r7, #28]
 8006d14:	4413      	add	r3, r2
 8006d16:	61fb      	str	r3, [r7, #28]

	HAL_Delay(20);
 8006d18:	2014      	movs	r0, #20
 8006d1a:	f7fa f91b 	bl	8000f54 <HAL_Delay>
	for(nb_mes=0 ; nb_mes < 100 ; nb_mes++)
 8006d1e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006d20:	3301      	adds	r3, #1
 8006d22:	637b      	str	r3, [r7, #52]	; 0x34
 8006d24:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006d26:	2b63      	cmp	r3, #99	; 0x63
 8006d28:	dda8      	ble.n	8006c7c <mpu9250_CalibrateMPU9250+0x40>
	}

	accel_bias_int[0]=ax_acc/100;
 8006d2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d2c:	4a1c      	ldr	r2, [pc, #112]	; (8006da0 <mpu9250_CalibrateMPU9250+0x164>)
 8006d2e:	fb82 1203 	smull	r1, r2, r2, r3
 8006d32:	1152      	asrs	r2, r2, #5
 8006d34:	17db      	asrs	r3, r3, #31
 8006d36:	1ad3      	subs	r3, r2, r3
 8006d38:	4a1a      	ldr	r2, [pc, #104]	; (8006da4 <mpu9250_CalibrateMPU9250+0x168>)
 8006d3a:	6013      	str	r3, [r2, #0]
	accel_bias_int[1]=ay_acc/100;
 8006d3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d3e:	4a18      	ldr	r2, [pc, #96]	; (8006da0 <mpu9250_CalibrateMPU9250+0x164>)
 8006d40:	fb82 1203 	smull	r1, r2, r2, r3
 8006d44:	1152      	asrs	r2, r2, #5
 8006d46:	17db      	asrs	r3, r3, #31
 8006d48:	1ad3      	subs	r3, r2, r3
 8006d4a:	4a16      	ldr	r2, [pc, #88]	; (8006da4 <mpu9250_CalibrateMPU9250+0x168>)
 8006d4c:	6053      	str	r3, [r2, #4]
	accel_bias_int[2]=az_acc/100;
 8006d4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d50:	4a13      	ldr	r2, [pc, #76]	; (8006da0 <mpu9250_CalibrateMPU9250+0x164>)
 8006d52:	fb82 1203 	smull	r1, r2, r2, r3
 8006d56:	1152      	asrs	r2, r2, #5
 8006d58:	17db      	asrs	r3, r3, #31
 8006d5a:	1ad3      	subs	r3, r2, r3
 8006d5c:	4a11      	ldr	r2, [pc, #68]	; (8006da4 <mpu9250_CalibrateMPU9250+0x168>)
 8006d5e:	6093      	str	r3, [r2, #8]
	gyro_bias_int[0]=gx_acc/100;
 8006d60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d62:	4a0f      	ldr	r2, [pc, #60]	; (8006da0 <mpu9250_CalibrateMPU9250+0x164>)
 8006d64:	fb82 1203 	smull	r1, r2, r2, r3
 8006d68:	1152      	asrs	r2, r2, #5
 8006d6a:	17db      	asrs	r3, r3, #31
 8006d6c:	1ad3      	subs	r3, r2, r3
 8006d6e:	4a0e      	ldr	r2, [pc, #56]	; (8006da8 <mpu9250_CalibrateMPU9250+0x16c>)
 8006d70:	6013      	str	r3, [r2, #0]
	gyro_bias_int[1]=gy_acc/100;
 8006d72:	6a3b      	ldr	r3, [r7, #32]
 8006d74:	4a0a      	ldr	r2, [pc, #40]	; (8006da0 <mpu9250_CalibrateMPU9250+0x164>)
 8006d76:	fb82 1203 	smull	r1, r2, r2, r3
 8006d7a:	1152      	asrs	r2, r2, #5
 8006d7c:	17db      	asrs	r3, r3, #31
 8006d7e:	1ad3      	subs	r3, r2, r3
 8006d80:	4a09      	ldr	r2, [pc, #36]	; (8006da8 <mpu9250_CalibrateMPU9250+0x16c>)
 8006d82:	6053      	str	r3, [r2, #4]
	gyro_bias_int[2]=gz_acc/100;
 8006d84:	69fb      	ldr	r3, [r7, #28]
 8006d86:	4a06      	ldr	r2, [pc, #24]	; (8006da0 <mpu9250_CalibrateMPU9250+0x164>)
 8006d88:	fb82 1203 	smull	r1, r2, r2, r3
 8006d8c:	1152      	asrs	r2, r2, #5
 8006d8e:	17db      	asrs	r3, r3, #31
 8006d90:	1ad3      	subs	r3, r2, r3
 8006d92:	4a05      	ldr	r2, [pc, #20]	; (8006da8 <mpu9250_CalibrateMPU9250+0x16c>)
 8006d94:	6093      	str	r3, [r2, #8]
	i2c1_WriteRegByte_IT(MPU9250_ADDRESS, XG_OFFSET_L, data[1]);
	i2c1_WriteRegByte_IT(MPU9250_ADDRESS, YG_OFFSET_H, data[2]);
	i2c1_WriteRegByte_IT(MPU9250_ADDRESS, YG_OFFSET_L, data[3]);
	i2c1_WriteRegByte_IT(MPU9250_ADDRESS, ZG_OFFSET_H, data[4]);
	i2c1_WriteRegByte_IT(MPU9250_ADDRESS, ZG_OFFSET_L, data[5]);*/
}
 8006d96:	bf00      	nop
 8006d98:	3738      	adds	r7, #56	; 0x38
 8006d9a:	46bd      	mov	sp, r7
 8006d9c:	bd80      	pop	{r7, pc}
 8006d9e:	bf00      	nop
 8006da0:	51eb851f 	.word	0x51eb851f
 8006da4:	20000094 	.word	0x20000094
 8006da8:	200000a0 	.word	0x200000a0

08006dac <HAL_MspInit>:
void HAL_UARTDXLMspInit(void);
void HAL_GPIO_PA10_MspInit(void);

//===================================================================
void HAL_MspInit(void)
{
 8006dac:	b580      	push	{r7, lr}
 8006dae:	af00      	add	r7, sp, #0
	HAL_UARTCOM_MspInit();
 8006db0:	f000 f812 	bl	8006dd8 <HAL_UARTCOM_MspInit>

	HAL_CANBUS_MspInit();
 8006db4:	f000 f88a 	bl	8006ecc <HAL_CANBUS_MspInit>
	//HAL_spi_MspInit();
	HAL_timer1_MspInit();
 8006db8:	f000 f8ee 	bl	8006f98 <HAL_timer1_MspInit>
	HAL_tickTimer_MspInit();
 8006dbc:	f000 f92e 	bl	800701c <HAL_tickTimer_MspInit>
	HAL_pushButton_MspInit();
 8006dc0:	f000 f9ca 	bl	8007158 <HAL_pushButton_MspInit>
	HAL_vl6180x_GPIO1_MspInit();
 8006dc4:	f000 f9ec 	bl	80071a0 <HAL_vl6180x_GPIO1_MspInit>
	HAL_i2c1_MspInit();
 8006dc8:	f000 f946 	bl	8007058 <HAL_i2c1_MspInit>
	HAL_UARTDXLMspInit();
 8006dcc:	f000 f840 	bl	8006e50 <HAL_UARTDXLMspInit>
	HAL_GPIO_PA10_MspInit();
 8006dd0:	f000 fa14 	bl	80071fc <HAL_GPIO_PA10_MspInit>
}
 8006dd4:	bf00      	nop
 8006dd6:	bd80      	pop	{r7, pc}

08006dd8 <HAL_UARTCOM_MspInit>:
// TX --> PA2
// RX --> PA3
//===================================================================

void HAL_UARTCOM_MspInit(void)
{
 8006dd8:	b580      	push	{r7, lr}
 8006dda:	b086      	sub	sp, #24
 8006ddc:	af00      	add	r7, sp, #0
	  GPIO_InitTypeDef  GPIO_InitStruct;
	  __HAL_RCC_GPIOA_CLK_ENABLE();
 8006dde:	4b1a      	ldr	r3, [pc, #104]	; (8006e48 <HAL_UARTCOM_MspInit+0x70>)
 8006de0:	699b      	ldr	r3, [r3, #24]
 8006de2:	4a19      	ldr	r2, [pc, #100]	; (8006e48 <HAL_UARTCOM_MspInit+0x70>)
 8006de4:	f043 0304 	orr.w	r3, r3, #4
 8006de8:	6193      	str	r3, [r2, #24]
 8006dea:	4b17      	ldr	r3, [pc, #92]	; (8006e48 <HAL_UARTCOM_MspInit+0x70>)
 8006dec:	699b      	ldr	r3, [r3, #24]
 8006dee:	f003 0304 	and.w	r3, r3, #4
 8006df2:	607b      	str	r3, [r7, #4]
 8006df4:	687b      	ldr	r3, [r7, #4]
	  __HAL_RCC_USART2_CLK_ENABLE();
 8006df6:	4b14      	ldr	r3, [pc, #80]	; (8006e48 <HAL_UARTCOM_MspInit+0x70>)
 8006df8:	69db      	ldr	r3, [r3, #28]
 8006dfa:	4a13      	ldr	r2, [pc, #76]	; (8006e48 <HAL_UARTCOM_MspInit+0x70>)
 8006dfc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006e00:	61d3      	str	r3, [r2, #28]
 8006e02:	4b11      	ldr	r3, [pc, #68]	; (8006e48 <HAL_UARTCOM_MspInit+0x70>)
 8006e04:	69db      	ldr	r3, [r3, #28]
 8006e06:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006e0a:	603b      	str	r3, [r7, #0]
 8006e0c:	683b      	ldr	r3, [r7, #0]

	  GPIO_InitStruct.Pin       = GPIO_PIN_2;		// USART 2 TX PIN
 8006e0e:	2304      	movs	r3, #4
 8006e10:	60bb      	str	r3, [r7, #8]
	  GPIO_InitStruct.Mode      = GPIO_MODE_AF_PP;
 8006e12:	2302      	movs	r3, #2
 8006e14:	60fb      	str	r3, [r7, #12]
	  GPIO_InitStruct.Pull      = GPIO_PULLUP;
 8006e16:	2301      	movs	r3, #1
 8006e18:	613b      	str	r3, [r7, #16]
	  GPIO_InitStruct.Speed     = GPIO_SPEED_FREQ_HIGH;
 8006e1a:	2303      	movs	r3, #3
 8006e1c:	617b      	str	r3, [r7, #20]

	  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006e1e:	f107 0308 	add.w	r3, r7, #8
 8006e22:	4619      	mov	r1, r3
 8006e24:	4809      	ldr	r0, [pc, #36]	; (8006e4c <HAL_UARTCOM_MspInit+0x74>)
 8006e26:	f7fb f875 	bl	8001f14 <HAL_GPIO_Init>

	  GPIO_InitStruct.Pin =  GPIO_PIN_3;			// USART 2 RX PIN
 8006e2a:	2308      	movs	r3, #8
 8006e2c:	60bb      	str	r3, [r7, #8]
	  GPIO_InitStruct.Mode      = GPIO_MODE_INPUT;
 8006e2e:	2300      	movs	r3, #0
 8006e30:	60fb      	str	r3, [r7, #12]

	  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006e32:	f107 0308 	add.w	r3, r7, #8
 8006e36:	4619      	mov	r1, r3
 8006e38:	4804      	ldr	r0, [pc, #16]	; (8006e4c <HAL_UARTCOM_MspInit+0x74>)
 8006e3a:	f7fb f86b 	bl	8001f14 <HAL_GPIO_Init>
}
 8006e3e:	bf00      	nop
 8006e40:	3718      	adds	r7, #24
 8006e42:	46bd      	mov	sp, r7
 8006e44:	bd80      	pop	{r7, pc}
 8006e46:	bf00      	nop
 8006e48:	40021000 	.word	0x40021000
 8006e4c:	40010800 	.word	0x40010800

08006e50 <HAL_UARTDXLMspInit>:

void HAL_UARTDXLMspInit(void)
{
 8006e50:	b580      	push	{r7, lr}
 8006e52:	b086      	sub	sp, #24
 8006e54:	af00      	add	r7, sp, #0
	  GPIO_InitTypeDef  GPIO_InitStruct;
	  __HAL_RCC_GPIOB_CLK_ENABLE();
 8006e56:	4b1b      	ldr	r3, [pc, #108]	; (8006ec4 <HAL_UARTDXLMspInit+0x74>)
 8006e58:	699b      	ldr	r3, [r3, #24]
 8006e5a:	4a1a      	ldr	r2, [pc, #104]	; (8006ec4 <HAL_UARTDXLMspInit+0x74>)
 8006e5c:	f043 0308 	orr.w	r3, r3, #8
 8006e60:	6193      	str	r3, [r2, #24]
 8006e62:	4b18      	ldr	r3, [pc, #96]	; (8006ec4 <HAL_UARTDXLMspInit+0x74>)
 8006e64:	699b      	ldr	r3, [r3, #24]
 8006e66:	f003 0308 	and.w	r3, r3, #8
 8006e6a:	607b      	str	r3, [r7, #4]
 8006e6c:	687b      	ldr	r3, [r7, #4]
	  GPIO_InitStruct.Pin =  GPIO_PIN_11;			// USART 2 RX PIN
	  GPIO_InitStruct.Mode      = GPIO_MODE_INPUT;

	  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);*/

	  __HAL_RCC_USART3_CLK_ENABLE();
 8006e6e:	4b15      	ldr	r3, [pc, #84]	; (8006ec4 <HAL_UARTDXLMspInit+0x74>)
 8006e70:	69db      	ldr	r3, [r3, #28]
 8006e72:	4a14      	ldr	r2, [pc, #80]	; (8006ec4 <HAL_UARTDXLMspInit+0x74>)
 8006e74:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006e78:	61d3      	str	r3, [r2, #28]
 8006e7a:	4b12      	ldr	r3, [pc, #72]	; (8006ec4 <HAL_UARTDXLMspInit+0x74>)
 8006e7c:	69db      	ldr	r3, [r3, #28]
 8006e7e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006e82:	603b      	str	r3, [r7, #0]
 8006e84:	683b      	ldr	r3, [r7, #0]

	         GPIO_InitStruct.Pin = GPIO_PIN_10;
 8006e86:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006e8a:	60bb      	str	r3, [r7, #8]
	         GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006e8c:	2302      	movs	r3, #2
 8006e8e:	60fb      	str	r3, [r7, #12]
	         GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8006e90:	2303      	movs	r3, #3
 8006e92:	617b      	str	r3, [r7, #20]
	         HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006e94:	f107 0308 	add.w	r3, r7, #8
 8006e98:	4619      	mov	r1, r3
 8006e9a:	480b      	ldr	r0, [pc, #44]	; (8006ec8 <HAL_UARTDXLMspInit+0x78>)
 8006e9c:	f7fb f83a 	bl	8001f14 <HAL_GPIO_Init>

	         GPIO_InitStruct.Pin = GPIO_PIN_11;
 8006ea0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8006ea4:	60bb      	str	r3, [r7, #8]
	         GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8006ea6:	2300      	movs	r3, #0
 8006ea8:	60fb      	str	r3, [r7, #12]
	         GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006eaa:	2300      	movs	r3, #0
 8006eac:	613b      	str	r3, [r7, #16]
	         HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006eae:	f107 0308 	add.w	r3, r7, #8
 8006eb2:	4619      	mov	r1, r3
 8006eb4:	4804      	ldr	r0, [pc, #16]	; (8006ec8 <HAL_UARTDXLMspInit+0x78>)
 8006eb6:	f7fb f82d 	bl	8001f14 <HAL_GPIO_Init>

	   	//  HAL_NVIC_SetPriority(USART3_IRQn, 6, 0);
	   	//  HAL_NVIC_EnableIRQ(USART3_IRQn);

}
 8006eba:	bf00      	nop
 8006ebc:	3718      	adds	r7, #24
 8006ebe:	46bd      	mov	sp, r7
 8006ec0:	bd80      	pop	{r7, pc}
 8006ec2:	bf00      	nop
 8006ec4:	40021000 	.word	0x40021000
 8006ec8:	40010c00 	.word	0x40010c00

08006ecc <HAL_CANBUS_MspInit>:
// CAN1 alternate function remapping
// RX PA11	PB8	(PD0)
// TX PA12	PB9	(PD1)
//===================================================================
void HAL_CANBUS_MspInit(void)
{
 8006ecc:	b580      	push	{r7, lr}
 8006ece:	b088      	sub	sp, #32
 8006ed0:	af00      	add	r7, sp, #0
	  GPIO_InitTypeDef   GPIO_InitStruct;

	  __HAL_RCC_CAN1_CLK_ENABLE();
 8006ed2:	4b2e      	ldr	r3, [pc, #184]	; (8006f8c <HAL_CANBUS_MspInit+0xc0>)
 8006ed4:	69db      	ldr	r3, [r3, #28]
 8006ed6:	4a2d      	ldr	r2, [pc, #180]	; (8006f8c <HAL_CANBUS_MspInit+0xc0>)
 8006ed8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8006edc:	61d3      	str	r3, [r2, #28]
 8006ede:	4b2b      	ldr	r3, [pc, #172]	; (8006f8c <HAL_CANBUS_MspInit+0xc0>)
 8006ee0:	69db      	ldr	r3, [r3, #28]
 8006ee2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006ee6:	60bb      	str	r3, [r7, #8]
 8006ee8:	68bb      	ldr	r3, [r7, #8]
	 __HAL_RCC_GPIOA_CLK_ENABLE();
 8006eea:	4b28      	ldr	r3, [pc, #160]	; (8006f8c <HAL_CANBUS_MspInit+0xc0>)
 8006eec:	699b      	ldr	r3, [r3, #24]
 8006eee:	4a27      	ldr	r2, [pc, #156]	; (8006f8c <HAL_CANBUS_MspInit+0xc0>)
 8006ef0:	f043 0304 	orr.w	r3, r3, #4
 8006ef4:	6193      	str	r3, [r2, #24]
 8006ef6:	4b25      	ldr	r3, [pc, #148]	; (8006f8c <HAL_CANBUS_MspInit+0xc0>)
 8006ef8:	699b      	ldr	r3, [r3, #24]
 8006efa:	f003 0304 	and.w	r3, r3, #4
 8006efe:	607b      	str	r3, [r7, #4]
 8006f00:	687b      	ldr	r3, [r7, #4]
	  __HAL_AFIO_REMAP_CAN1_1();
 8006f02:	4b23      	ldr	r3, [pc, #140]	; (8006f90 <HAL_CANBUS_MspInit+0xc4>)
 8006f04:	685b      	ldr	r3, [r3, #4]
 8006f06:	61fb      	str	r3, [r7, #28]
 8006f08:	69fb      	ldr	r3, [r7, #28]
 8006f0a:	f423 43c0 	bic.w	r3, r3, #24576	; 0x6000
 8006f0e:	61fb      	str	r3, [r7, #28]
 8006f10:	69fb      	ldr	r3, [r7, #28]
 8006f12:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8006f16:	61fb      	str	r3, [r7, #28]
 8006f18:	4a1d      	ldr	r2, [pc, #116]	; (8006f90 <HAL_CANBUS_MspInit+0xc4>)
 8006f1a:	69fb      	ldr	r3, [r7, #28]
 8006f1c:	6053      	str	r3, [r2, #4]
	  __HAL_RCC_AFIO_CLK_ENABLE();
 8006f1e:	4b1b      	ldr	r3, [pc, #108]	; (8006f8c <HAL_CANBUS_MspInit+0xc0>)
 8006f20:	699b      	ldr	r3, [r3, #24]
 8006f22:	4a1a      	ldr	r2, [pc, #104]	; (8006f8c <HAL_CANBUS_MspInit+0xc0>)
 8006f24:	f043 0301 	orr.w	r3, r3, #1
 8006f28:	6193      	str	r3, [r2, #24]
 8006f2a:	4b18      	ldr	r3, [pc, #96]	; (8006f8c <HAL_CANBUS_MspInit+0xc0>)
 8006f2c:	699b      	ldr	r3, [r3, #24]
 8006f2e:	f003 0301 	and.w	r3, r3, #1
 8006f32:	603b      	str	r3, [r7, #0]
 8006f34:	683b      	ldr	r3, [r7, #0]

	  /* CAN1 TX GPIO pin configuration --> PA_12 */
	  GPIO_InitStruct.Pin =  GPIO_PIN_12;		//CANx_TX_PIN;
 8006f36:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006f3a:	60fb      	str	r3, [r7, #12]
	  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006f3c:	2302      	movs	r3, #2
 8006f3e:	613b      	str	r3, [r7, #16]
	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8006f40:	2303      	movs	r3, #3
 8006f42:	61bb      	str	r3, [r7, #24]
	  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8006f44:	2301      	movs	r3, #1
 8006f46:	617b      	str	r3, [r7, #20]

	  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006f48:	f107 030c 	add.w	r3, r7, #12
 8006f4c:	4619      	mov	r1, r3
 8006f4e:	4811      	ldr	r0, [pc, #68]	; (8006f94 <HAL_CANBUS_MspInit+0xc8>)
 8006f50:	f7fa ffe0 	bl	8001f14 <HAL_GPIO_Init>

	  GPIO_InitStruct.Pin = GPIO_PIN_11;		//CANx_RX_PIN;
 8006f54:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8006f58:	60fb      	str	r3, [r7, #12]
	  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;	//GPIO_MODE_AF_PP;
 8006f5a:	2300      	movs	r3, #0
 8006f5c:	613b      	str	r3, [r7, #16]
	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8006f5e:	2303      	movs	r3, #3
 8006f60:	61bb      	str	r3, [r7, #24]
	  GPIO_InitStruct.Pull = GPIO_NOPULL;		//GPIO_PULLUP;
 8006f62:	2300      	movs	r3, #0
 8006f64:	617b      	str	r3, [r7, #20]

	  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006f66:	f107 030c 	add.w	r3, r7, #12
 8006f6a:	4619      	mov	r1, r3
 8006f6c:	4809      	ldr	r0, [pc, #36]	; (8006f94 <HAL_CANBUS_MspInit+0xc8>)
 8006f6e:	f7fa ffd1 	bl	8001f14 <HAL_GPIO_Init>

	  HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 5, 0);
 8006f72:	2200      	movs	r2, #0
 8006f74:	2105      	movs	r1, #5
 8006f76:	2014      	movs	r0, #20
 8006f78:	f7fa feef 	bl	8001d5a <HAL_NVIC_SetPriority>
	  HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 8006f7c:	2014      	movs	r0, #20
 8006f7e:	f7fa ff08 	bl	8001d92 <HAL_NVIC_EnableIRQ>

}
 8006f82:	bf00      	nop
 8006f84:	3720      	adds	r7, #32
 8006f86:	46bd      	mov	sp, r7
 8006f88:	bd80      	pop	{r7, pc}
 8006f8a:	bf00      	nop
 8006f8c:	40021000 	.word	0x40021000
 8006f90:	40010000 	.word	0x40010000
 8006f94:	40010800 	.word	0x40010800

08006f98 <HAL_timer1_MspInit>:
//===================================================================
//			TIMER 1 Anemometer
// TIM_CLK		--> 	PA8 (PWM1_1)
//===================================================================
void HAL_timer1_MspInit(void)
{
 8006f98:	b580      	push	{r7, lr}
 8006f9a:	b088      	sub	sp, #32
 8006f9c:	af00      	add	r7, sp, #0
	  GPIO_InitTypeDef  GPIO_InitStruct;
	   __HAL_RCC_TIM1_CLK_ENABLE();
 8006f9e:	4b1c      	ldr	r3, [pc, #112]	; (8007010 <HAL_timer1_MspInit+0x78>)
 8006fa0:	699b      	ldr	r3, [r3, #24]
 8006fa2:	4a1b      	ldr	r2, [pc, #108]	; (8007010 <HAL_timer1_MspInit+0x78>)
 8006fa4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8006fa8:	6193      	str	r3, [r2, #24]
 8006faa:	4b19      	ldr	r3, [pc, #100]	; (8007010 <HAL_timer1_MspInit+0x78>)
 8006fac:	699b      	ldr	r3, [r3, #24]
 8006fae:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006fb2:	60bb      	str	r3, [r7, #8]
 8006fb4:	68bb      	ldr	r3, [r7, #8]
	   __HAL_RCC_GPIOA_CLK_ENABLE();
 8006fb6:	4b16      	ldr	r3, [pc, #88]	; (8007010 <HAL_timer1_MspInit+0x78>)
 8006fb8:	699b      	ldr	r3, [r3, #24]
 8006fba:	4a15      	ldr	r2, [pc, #84]	; (8007010 <HAL_timer1_MspInit+0x78>)
 8006fbc:	f043 0304 	orr.w	r3, r3, #4
 8006fc0:	6193      	str	r3, [r2, #24]
 8006fc2:	4b13      	ldr	r3, [pc, #76]	; (8007010 <HAL_timer1_MspInit+0x78>)
 8006fc4:	699b      	ldr	r3, [r3, #24]
 8006fc6:	f003 0304 	and.w	r3, r3, #4
 8006fca:	607b      	str	r3, [r7, #4]
 8006fcc:	687b      	ldr	r3, [r7, #4]

	   __HAL_AFIO_REMAP_TIM1_DISABLE();
 8006fce:	4b11      	ldr	r3, [pc, #68]	; (8007014 <HAL_timer1_MspInit+0x7c>)
 8006fd0:	685b      	ldr	r3, [r3, #4]
 8006fd2:	61fb      	str	r3, [r7, #28]
 8006fd4:	69fb      	ldr	r3, [r7, #28]
 8006fd6:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8006fda:	61fb      	str	r3, [r7, #28]
 8006fdc:	69fb      	ldr	r3, [r7, #28]
 8006fde:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8006fe2:	61fb      	str	r3, [r7, #28]
 8006fe4:	4a0b      	ldr	r2, [pc, #44]	; (8007014 <HAL_timer1_MspInit+0x7c>)
 8006fe6:	69fb      	ldr	r3, [r7, #28]
 8006fe8:	6053      	str	r3, [r2, #4]

	  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8006fea:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006fee:	60fb      	str	r3, [r7, #12]
	  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8006ff0:	2300      	movs	r3, #0
 8006ff2:	613b      	str	r3, [r7, #16]
	  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8006ff4:	2301      	movs	r3, #1
 8006ff6:	617b      	str	r3, [r7, #20]
	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006ff8:	2302      	movs	r3, #2
 8006ffa:	61bb      	str	r3, [r7, #24]

 	  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006ffc:	f107 030c 	add.w	r3, r7, #12
 8007000:	4619      	mov	r1, r3
 8007002:	4805      	ldr	r0, [pc, #20]	; (8007018 <HAL_timer1_MspInit+0x80>)
 8007004:	f7fa ff86 	bl	8001f14 <HAL_GPIO_Init>
}
 8007008:	bf00      	nop
 800700a:	3720      	adds	r7, #32
 800700c:	46bd      	mov	sp, r7
 800700e:	bd80      	pop	{r7, pc}
 8007010:	40021000 	.word	0x40021000
 8007014:	40010000 	.word	0x40010000
 8007018:	40010800 	.word	0x40010800

0800701c <HAL_tickTimer_MspInit>:

//===================================================================
//			TIMER 3 TickTimer
//===================================================================
void HAL_tickTimer_MspInit(void)
{
 800701c:	b580      	push	{r7, lr}
 800701e:	b082      	sub	sp, #8
 8007020:	af00      	add	r7, sp, #0
	  __HAL_RCC_TIM3_CLK_ENABLE();
 8007022:	4b0c      	ldr	r3, [pc, #48]	; (8007054 <HAL_tickTimer_MspInit+0x38>)
 8007024:	69db      	ldr	r3, [r3, #28]
 8007026:	4a0b      	ldr	r2, [pc, #44]	; (8007054 <HAL_tickTimer_MspInit+0x38>)
 8007028:	f043 0302 	orr.w	r3, r3, #2
 800702c:	61d3      	str	r3, [r2, #28]
 800702e:	4b09      	ldr	r3, [pc, #36]	; (8007054 <HAL_tickTimer_MspInit+0x38>)
 8007030:	69db      	ldr	r3, [r3, #28]
 8007032:	f003 0302 	and.w	r3, r3, #2
 8007036:	607b      	str	r3, [r7, #4]
 8007038:	687b      	ldr	r3, [r7, #4]
	  HAL_NVIC_SetPriority(TIM3_IRQn, 3, 0);
 800703a:	2200      	movs	r2, #0
 800703c:	2103      	movs	r1, #3
 800703e:	201d      	movs	r0, #29
 8007040:	f7fa fe8b 	bl	8001d5a <HAL_NVIC_SetPriority>
	  HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8007044:	201d      	movs	r0, #29
 8007046:	f7fa fea4 	bl	8001d92 <HAL_NVIC_EnableIRQ>
}
 800704a:	bf00      	nop
 800704c:	3708      	adds	r7, #8
 800704e:	46bd      	mov	sp, r7
 8007050:	bd80      	pop	{r7, pc}
 8007052:	bf00      	nop
 8007054:	40021000 	.word	0x40021000

08007058 <HAL_i2c1_MspInit>:
//			I2C1
// PB8 : I2C1 SCL
// PB9 : I2C1 SDA
//===================================================================
void HAL_i2c1_MspInit(void)
{
 8007058:	b580      	push	{r7, lr}
 800705a:	b08a      	sub	sp, #40	; 0x28
 800705c:	af00      	add	r7, sp, #0

	  GPIO_InitTypeDef  GPIO_InitStruct;

	  __HAL_RCC_GPIOA_CLK_ENABLE();
 800705e:	4b3b      	ldr	r3, [pc, #236]	; (800714c <HAL_i2c1_MspInit+0xf4>)
 8007060:	699b      	ldr	r3, [r3, #24]
 8007062:	4a3a      	ldr	r2, [pc, #232]	; (800714c <HAL_i2c1_MspInit+0xf4>)
 8007064:	f043 0304 	orr.w	r3, r3, #4
 8007068:	6193      	str	r3, [r2, #24]
 800706a:	4b38      	ldr	r3, [pc, #224]	; (800714c <HAL_i2c1_MspInit+0xf4>)
 800706c:	699b      	ldr	r3, [r3, #24]
 800706e:	f003 0304 	and.w	r3, r3, #4
 8007072:	613b      	str	r3, [r7, #16]
 8007074:	693b      	ldr	r3, [r7, #16]
	  __HAL_RCC_GPIOB_CLK_ENABLE();
 8007076:	4b35      	ldr	r3, [pc, #212]	; (800714c <HAL_i2c1_MspInit+0xf4>)
 8007078:	699b      	ldr	r3, [r3, #24]
 800707a:	4a34      	ldr	r2, [pc, #208]	; (800714c <HAL_i2c1_MspInit+0xf4>)
 800707c:	f043 0308 	orr.w	r3, r3, #8
 8007080:	6193      	str	r3, [r2, #24]
 8007082:	4b32      	ldr	r3, [pc, #200]	; (800714c <HAL_i2c1_MspInit+0xf4>)
 8007084:	699b      	ldr	r3, [r3, #24]
 8007086:	f003 0308 	and.w	r3, r3, #8
 800708a:	60fb      	str	r3, [r7, #12]
 800708c:	68fb      	ldr	r3, [r7, #12]
	  __HAL_RCC_GPIOC_CLK_ENABLE();
 800708e:	4b2f      	ldr	r3, [pc, #188]	; (800714c <HAL_i2c1_MspInit+0xf4>)
 8007090:	699b      	ldr	r3, [r3, #24]
 8007092:	4a2e      	ldr	r2, [pc, #184]	; (800714c <HAL_i2c1_MspInit+0xf4>)
 8007094:	f043 0310 	orr.w	r3, r3, #16
 8007098:	6193      	str	r3, [r2, #24]
 800709a:	4b2c      	ldr	r3, [pc, #176]	; (800714c <HAL_i2c1_MspInit+0xf4>)
 800709c:	699b      	ldr	r3, [r3, #24]
 800709e:	f003 0310 	and.w	r3, r3, #16
 80070a2:	60bb      	str	r3, [r7, #8]
 80070a4:	68bb      	ldr	r3, [r7, #8]

	  __HAL_RCC_AFIO_CLK_ENABLE();
 80070a6:	4b29      	ldr	r3, [pc, #164]	; (800714c <HAL_i2c1_MspInit+0xf4>)
 80070a8:	699b      	ldr	r3, [r3, #24]
 80070aa:	4a28      	ldr	r2, [pc, #160]	; (800714c <HAL_i2c1_MspInit+0xf4>)
 80070ac:	f043 0301 	orr.w	r3, r3, #1
 80070b0:	6193      	str	r3, [r2, #24]
 80070b2:	4b26      	ldr	r3, [pc, #152]	; (800714c <HAL_i2c1_MspInit+0xf4>)
 80070b4:	699b      	ldr	r3, [r3, #24]
 80070b6:	f003 0301 	and.w	r3, r3, #1
 80070ba:	607b      	str	r3, [r7, #4]
 80070bc:	687b      	ldr	r3, [r7, #4]
	  __HAL_AFIO_REMAP_I2C1_ENABLE();
 80070be:	4b24      	ldr	r3, [pc, #144]	; (8007150 <HAL_i2c1_MspInit+0xf8>)
 80070c0:	685b      	ldr	r3, [r3, #4]
 80070c2:	627b      	str	r3, [r7, #36]	; 0x24
 80070c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070c6:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 80070ca:	627b      	str	r3, [r7, #36]	; 0x24
 80070cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070ce:	f043 0302 	orr.w	r3, r3, #2
 80070d2:	627b      	str	r3, [r7, #36]	; 0x24
 80070d4:	4a1e      	ldr	r2, [pc, #120]	; (8007150 <HAL_i2c1_MspInit+0xf8>)
 80070d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070d8:	6053      	str	r3, [r2, #4]

	  __HAL_RCC_I2C1_CLK_ENABLE();
 80070da:	4b1c      	ldr	r3, [pc, #112]	; (800714c <HAL_i2c1_MspInit+0xf4>)
 80070dc:	69db      	ldr	r3, [r3, #28]
 80070de:	4a1b      	ldr	r2, [pc, #108]	; (800714c <HAL_i2c1_MspInit+0xf4>)
 80070e0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80070e4:	61d3      	str	r3, [r2, #28]
 80070e6:	4b19      	ldr	r3, [pc, #100]	; (800714c <HAL_i2c1_MspInit+0xf4>)
 80070e8:	69db      	ldr	r3, [r3, #28]
 80070ea:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80070ee:	603b      	str	r3, [r7, #0]
 80070f0:	683b      	ldr	r3, [r7, #0]

	  GPIO_InitStruct.Pin       = GPIO_PIN_8;
 80070f2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80070f6:	617b      	str	r3, [r7, #20]
	  GPIO_InitStruct.Mode      = GPIO_MODE_AF_OD;
 80070f8:	2312      	movs	r3, #18
 80070fa:	61bb      	str	r3, [r7, #24]
	  GPIO_InitStruct.Pull      = GPIO_PULLUP;
 80070fc:	2301      	movs	r3, #1
 80070fe:	61fb      	str	r3, [r7, #28]
	  GPIO_InitStruct.Speed     = GPIO_SPEED_FREQ_HIGH;
 8007100:	2303      	movs	r3, #3
 8007102:	623b      	str	r3, [r7, #32]

	  HAL_GPIO_Init( GPIOB, &GPIO_InitStruct);
 8007104:	f107 0314 	add.w	r3, r7, #20
 8007108:	4619      	mov	r1, r3
 800710a:	4812      	ldr	r0, [pc, #72]	; (8007154 <HAL_i2c1_MspInit+0xfc>)
 800710c:	f7fa ff02 	bl	8001f14 <HAL_GPIO_Init>

	  GPIO_InitStruct.Pin       = GPIO_PIN_9;
 8007110:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007114:	617b      	str	r3, [r7, #20]
	  HAL_GPIO_Init( GPIOB, &GPIO_InitStruct);
 8007116:	f107 0314 	add.w	r3, r7, #20
 800711a:	4619      	mov	r1, r3
 800711c:	480d      	ldr	r0, [pc, #52]	; (8007154 <HAL_i2c1_MspInit+0xfc>)
 800711e:	f7fa fef9 	bl	8001f14 <HAL_GPIO_Init>

	  HAL_NVIC_SetPriority(I2C1_ER_IRQn, 4, 1);
 8007122:	2201      	movs	r2, #1
 8007124:	2104      	movs	r1, #4
 8007126:	2020      	movs	r0, #32
 8007128:	f7fa fe17 	bl	8001d5a <HAL_NVIC_SetPriority>
	  HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 800712c:	2020      	movs	r0, #32
 800712e:	f7fa fe30 	bl	8001d92 <HAL_NVIC_EnableIRQ>
	  HAL_NVIC_SetPriority(I2C1_EV_IRQn, 4, 2);
 8007132:	2202      	movs	r2, #2
 8007134:	2104      	movs	r1, #4
 8007136:	201f      	movs	r0, #31
 8007138:	f7fa fe0f 	bl	8001d5a <HAL_NVIC_SetPriority>
	  HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 800713c:	201f      	movs	r0, #31
 800713e:	f7fa fe28 	bl	8001d92 <HAL_NVIC_EnableIRQ>
}
 8007142:	bf00      	nop
 8007144:	3728      	adds	r7, #40	; 0x28
 8007146:	46bd      	mov	sp, r7
 8007148:	bd80      	pop	{r7, pc}
 800714a:	bf00      	nop
 800714c:	40021000 	.word	0x40021000
 8007150:	40010000 	.word	0x40010000
 8007154:	40010c00 	.word	0x40010c00

08007158 <HAL_pushButton_MspInit>:
//===================================================================
//			GPIO USER PUSH BUTTON
// PC13
//===================================================================
void HAL_pushButton_MspInit(void)
{
 8007158:	b580      	push	{r7, lr}
 800715a:	b086      	sub	sp, #24
 800715c:	af00      	add	r7, sp, #0
	  GPIO_InitTypeDef GPIO_InitStruct;
	  __HAL_RCC_GPIOC_CLK_ENABLE();
 800715e:	4b0e      	ldr	r3, [pc, #56]	; (8007198 <HAL_pushButton_MspInit+0x40>)
 8007160:	699b      	ldr	r3, [r3, #24]
 8007162:	4a0d      	ldr	r2, [pc, #52]	; (8007198 <HAL_pushButton_MspInit+0x40>)
 8007164:	f043 0310 	orr.w	r3, r3, #16
 8007168:	6193      	str	r3, [r2, #24]
 800716a:	4b0b      	ldr	r3, [pc, #44]	; (8007198 <HAL_pushButton_MspInit+0x40>)
 800716c:	699b      	ldr	r3, [r3, #24]
 800716e:	f003 0310 	and.w	r3, r3, #16
 8007172:	607b      	str	r3, [r7, #4]
 8007174:	687b      	ldr	r3, [r7, #4]

	  /*Configure GPIO pin : PC13 */
	  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8007176:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800717a:	60bb      	str	r3, [r7, #8]
	  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800717c:	2300      	movs	r3, #0
 800717e:	60fb      	str	r3, [r7, #12]
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007180:	2300      	movs	r3, #0
 8007182:	613b      	str	r3, [r7, #16]
	  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8007184:	f107 0308 	add.w	r3, r7, #8
 8007188:	4619      	mov	r1, r3
 800718a:	4804      	ldr	r0, [pc, #16]	; (800719c <HAL_pushButton_MspInit+0x44>)
 800718c:	f7fa fec2 	bl	8001f14 <HAL_GPIO_Init>
}
 8007190:	bf00      	nop
 8007192:	3718      	adds	r7, #24
 8007194:	46bd      	mov	sp, r7
 8007196:	bd80      	pop	{r7, pc}
 8007198:	40021000 	.word	0x40021000
 800719c:	40011000 	.word	0x40011000

080071a0 <HAL_vl6180x_GPIO1_MspInit>:
//===================================================================
//			vl6180x_GPIO1
// PB0 = INT
//===================================================================
void HAL_vl6180x_GPIO1_MspInit(void)
{
 80071a0:	b580      	push	{r7, lr}
 80071a2:	b086      	sub	sp, #24
 80071a4:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef GPIO_InitStruct;

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80071a6:	4b12      	ldr	r3, [pc, #72]	; (80071f0 <HAL_vl6180x_GPIO1_MspInit+0x50>)
 80071a8:	699b      	ldr	r3, [r3, #24]
 80071aa:	4a11      	ldr	r2, [pc, #68]	; (80071f0 <HAL_vl6180x_GPIO1_MspInit+0x50>)
 80071ac:	f043 0308 	orr.w	r3, r3, #8
 80071b0:	6193      	str	r3, [r2, #24]
 80071b2:	4b0f      	ldr	r3, [pc, #60]	; (80071f0 <HAL_vl6180x_GPIO1_MspInit+0x50>)
 80071b4:	699b      	ldr	r3, [r3, #24]
 80071b6:	f003 0308 	and.w	r3, r3, #8
 80071ba:	607b      	str	r3, [r7, #4]
 80071bc:	687b      	ldr	r3, [r7, #4]

    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80071be:	2301      	movs	r3, #1
 80071c0:	60bb      	str	r3, [r7, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80071c2:	4b0c      	ldr	r3, [pc, #48]	; (80071f4 <HAL_vl6180x_GPIO1_MspInit+0x54>)
 80071c4:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80071c6:	2300      	movs	r3, #0
 80071c8:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80071ca:	f107 0308 	add.w	r3, r7, #8
 80071ce:	4619      	mov	r1, r3
 80071d0:	4809      	ldr	r0, [pc, #36]	; (80071f8 <HAL_vl6180x_GPIO1_MspInit+0x58>)
 80071d2:	f7fa fe9f 	bl	8001f14 <HAL_GPIO_Init>

    HAL_NVIC_SetPriority(EXTI0_IRQn, 7, 1);
 80071d6:	2201      	movs	r2, #1
 80071d8:	2107      	movs	r1, #7
 80071da:	2006      	movs	r0, #6
 80071dc:	f7fa fdbd 	bl	8001d5a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 80071e0:	2006      	movs	r0, #6
 80071e2:	f7fa fdd6 	bl	8001d92 <HAL_NVIC_EnableIRQ>
}
 80071e6:	bf00      	nop
 80071e8:	3718      	adds	r7, #24
 80071ea:	46bd      	mov	sp, r7
 80071ec:	bd80      	pop	{r7, pc}
 80071ee:	bf00      	nop
 80071f0:	40021000 	.word	0x40021000
 80071f4:	10110000 	.word	0x10110000
 80071f8:	40010c00 	.word	0x40010c00

080071fc <HAL_GPIO_PA10_MspInit>:


void HAL_GPIO_PA10_MspInit(void)
{
 80071fc:	b580      	push	{r7, lr}
 80071fe:	b086      	sub	sp, #24
 8007200:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef GPIO_InitStruct;

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007202:	4b0e      	ldr	r3, [pc, #56]	; (800723c <HAL_GPIO_PA10_MspInit+0x40>)
 8007204:	699b      	ldr	r3, [r3, #24]
 8007206:	4a0d      	ldr	r2, [pc, #52]	; (800723c <HAL_GPIO_PA10_MspInit+0x40>)
 8007208:	f043 0304 	orr.w	r3, r3, #4
 800720c:	6193      	str	r3, [r2, #24]
 800720e:	4b0b      	ldr	r3, [pc, #44]	; (800723c <HAL_GPIO_PA10_MspInit+0x40>)
 8007210:	699b      	ldr	r3, [r3, #24]
 8007212:	f003 0304 	and.w	r3, r3, #4
 8007216:	607b      	str	r3, [r7, #4]
 8007218:	687b      	ldr	r3, [r7, #4]

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800721a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800721e:	60bb      	str	r3, [r7, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8007220:	2301      	movs	r3, #1
 8007222:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007224:	2300      	movs	r3, #0
 8007226:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007228:	f107 0308 	add.w	r3, r7, #8
 800722c:	4619      	mov	r1, r3
 800722e:	4804      	ldr	r0, [pc, #16]	; (8007240 <HAL_GPIO_PA10_MspInit+0x44>)
 8007230:	f7fa fe70 	bl	8001f14 <HAL_GPIO_Init>


}
 8007234:	bf00      	nop
 8007236:	3718      	adds	r7, #24
 8007238:	46bd      	mov	sp, r7
 800723a:	bd80      	pop	{r7, pc}
 800723c:	40021000 	.word	0x40021000
 8007240:	40010800 	.word	0x40010800

08007244 <NMI_Handler>:
//===================================================================
// Cortex-M3 Processor Exceptions Handlers
//===================================================================

void NMI_Handler(void)
{
 8007244:	b480      	push	{r7}
 8007246:	af00      	add	r7, sp, #0
}
 8007248:	bf00      	nop
 800724a:	46bd      	mov	sp, r7
 800724c:	bc80      	pop	{r7}
 800724e:	4770      	bx	lr

08007250 <HardFault_Handler>:

void HardFault_Handler(void)
{
 8007250:	b480      	push	{r7}
 8007252:	af00      	add	r7, sp, #0
  while (1)
 8007254:	e7fe      	b.n	8007254 <HardFault_Handler+0x4>

08007256 <MemManage_Handler>:
  {
  }
}

void MemManage_Handler(void)
{
 8007256:	b480      	push	{r7}
 8007258:	af00      	add	r7, sp, #0
  while (1)
 800725a:	e7fe      	b.n	800725a <MemManage_Handler+0x4>

0800725c <BusFault_Handler>:
  {
  }
}

void BusFault_Handler(void)
{
 800725c:	b480      	push	{r7}
 800725e:	af00      	add	r7, sp, #0
  while (1)
 8007260:	e7fe      	b.n	8007260 <BusFault_Handler+0x4>

08007262 <UsageFault_Handler>:
  {
  }
}

void UsageFault_Handler(void)
{
 8007262:	b480      	push	{r7}
 8007264:	af00      	add	r7, sp, #0
  while (1)
 8007266:	e7fe      	b.n	8007266 <UsageFault_Handler+0x4>

08007268 <SVC_Handler>:
  {
  }
}

void SVC_Handler(void)
{
 8007268:	b480      	push	{r7}
 800726a:	af00      	add	r7, sp, #0
}
 800726c:	bf00      	nop
 800726e:	46bd      	mov	sp, r7
 8007270:	bc80      	pop	{r7}
 8007272:	4770      	bx	lr

08007274 <DebugMon_Handler>:

void DebugMon_Handler(void)
{
 8007274:	b480      	push	{r7}
 8007276:	af00      	add	r7, sp, #0
}
 8007278:	bf00      	nop
 800727a:	46bd      	mov	sp, r7
 800727c:	bc80      	pop	{r7}
 800727e:	4770      	bx	lr

08007280 <PendSV_Handler>:

void PendSV_Handler(void)
{
 8007280:	b480      	push	{r7}
 8007282:	af00      	add	r7, sp, #0
}
 8007284:	bf00      	nop
 8007286:	46bd      	mov	sp, r7
 8007288:	bc80      	pop	{r7}
 800728a:	4770      	bx	lr

0800728c <SysTick_Handler>:

void SysTick_Handler(void)
{
 800728c:	b580      	push	{r7, lr}
 800728e:	af00      	add	r7, sp, #0
  HAL_IncTick();
 8007290:	f7f9 fe44 	bl	8000f1c <HAL_IncTick>
  HAL_SYSTICK_IRQHandler();
 8007294:	f7fa fdc2 	bl	8001e1c <HAL_SYSTICK_IRQHandler>
}
 8007298:	bf00      	nop
 800729a:	bd80      	pop	{r7, pc}

0800729c <EXTI0_IRQHandler>:
/*  available peripheral interrupt handler's name please refer to the startup */
/*  file (startup_stm32f1xx.s).                                               */
//==============================================================================

void EXTI0_IRQHandler(void)
{
 800729c:	b580      	push	{r7, lr}
 800729e:	af00      	add	r7, sp, #0
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 80072a0:	2001      	movs	r0, #1
 80072a2:	f7fa ffbf 	bl	8002224 <HAL_GPIO_EXTI_IRQHandler>
}
 80072a6:	bf00      	nop
 80072a8:	bd80      	pop	{r7, pc}
	...

080072ac <I2C1_EV_IRQHandler>:

void I2C1_EV_IRQHandler(void)
{
 80072ac:	b580      	push	{r7, lr}
 80072ae:	af00      	add	r7, sp, #0
  HAL_I2C_EV_IRQHandler(&hi2c1);
 80072b0:	4802      	ldr	r0, [pc, #8]	; (80072bc <I2C1_EV_IRQHandler+0x10>)
 80072b2:	f7fb fd71 	bl	8002d98 <HAL_I2C_EV_IRQHandler>
}
 80072b6:	bf00      	nop
 80072b8:	bd80      	pop	{r7, pc}
 80072ba:	bf00      	nop
 80072bc:	20000284 	.word	0x20000284

080072c0 <I2C1_ER_IRQHandler>:

void I2C1_ER_IRQHandler(void)
{
 80072c0:	b580      	push	{r7, lr}
 80072c2:	af00      	add	r7, sp, #0
  HAL_I2C_ER_IRQHandler(&hi2c1);
 80072c4:	4802      	ldr	r0, [pc, #8]	; (80072d0 <I2C1_ER_IRQHandler+0x10>)
 80072c6:	f7fb fe6b 	bl	8002fa0 <HAL_I2C_ER_IRQHandler>
}
 80072ca:	bf00      	nop
 80072cc:	bd80      	pop	{r7, pc}
 80072ce:	bf00      	nop
 80072d0:	20000284 	.word	0x20000284

080072d4 <USB_LP_CAN1_RX0_IRQHandler>:

void USB_LP_CAN1_RX0_IRQHandler(void) {
 80072d4:	b580      	push	{r7, lr}
 80072d6:	af00      	add	r7, sp, #0
    HAL_CAN_IRQHandler(&CanHandle);
 80072d8:	4802      	ldr	r0, [pc, #8]	; (80072e4 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 80072da:	f7fa f9eb 	bl	80016b4 <HAL_CAN_IRQHandler>
}
 80072de:	bf00      	nop
 80072e0:	bd80      	pop	{r7, pc}
 80072e2:	bf00      	nop
 80072e4:	200001d4 	.word	0x200001d4

080072e8 <TIM3_IRQHandler>:

void TIM3_IRQHandler(void)
{
 80072e8:	b580      	push	{r7, lr}
 80072ea:	af00      	add	r7, sp, #0
  HAL_TIM_IRQHandler(&TimHandle_period);
 80072ec:	4802      	ldr	r0, [pc, #8]	; (80072f8 <TIM3_IRQHandler+0x10>)
 80072ee:	f7fd feab 	bl	8005048 <HAL_TIM_IRQHandler>
}
 80072f2:	bf00      	nop
 80072f4:	bd80      	pop	{r7, pc}
 80072f6:	bf00      	nop
 80072f8:	20000528 	.word	0x20000528

080072fc <USART3_IRQHandler>:

void USART3_IRQHandler(void)
{
 80072fc:	b580      	push	{r7, lr}
 80072fe:	af00      	add	r7, sp, #0
  HAL_UART_IRQHandler(&UartDxlHandle);
 8007300:	4802      	ldr	r0, [pc, #8]	; (800730c <USART3_IRQHandler+0x10>)
 8007302:	f7fe f923 	bl	800554c <HAL_UART_IRQHandler>
}
 8007306:	bf00      	nop
 8007308:	bd80      	pop	{r7, pc}
 800730a:	bf00      	nop
 800730c:	200000d0 	.word	0x200000d0

08007310 <USART2_IRQHandler>:

void USART2_IRQHandler(void)
{
 8007310:	b580      	push	{r7, lr}
 8007312:	af00      	add	r7, sp, #0
  HAL_UART_IRQHandler(&Uart2Handle);
 8007314:	4802      	ldr	r0, [pc, #8]	; (8007320 <USART2_IRQHandler+0x10>)
 8007316:	f7fe f919 	bl	800554c <HAL_UART_IRQHandler>
}
 800731a:	bf00      	nop
 800731c:	bd80      	pop	{r7, pc}
 800731e:	bf00      	nop
 8007320:	20000128 	.word	0x20000128

08007324 <systemClock_Config>:

#include "systemClock.h"


void systemClock_Config(void)
{
 8007324:	b580      	push	{r7, lr}
 8007326:	b090      	sub	sp, #64	; 0x40
 8007328:	af00      	add	r7, sp, #0
	 RCC_OscInitTypeDef RCC_OscInitStruct;
	 RCC_ClkInitTypeDef RCC_ClkInitStruct;

	 RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800732a:	2302      	movs	r3, #2
 800732c:	61bb      	str	r3, [r7, #24]
	 RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800732e:	2301      	movs	r3, #1
 8007330:	62bb      	str	r3, [r7, #40]	; 0x28
	 RCC_OscInitStruct.HSICalibrationValue = 16;
 8007332:	2310      	movs	r3, #16
 8007334:	62fb      	str	r3, [r7, #44]	; 0x2c
	 RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8007336:	2302      	movs	r3, #2
 8007338:	637b      	str	r3, [r7, #52]	; 0x34
	 RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 800733a:	2300      	movs	r3, #0
 800733c:	63bb      	str	r3, [r7, #56]	; 0x38
	 RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800733e:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8007342:	63fb      	str	r3, [r7, #60]	; 0x3c
	 HAL_RCC_OscConfig(&RCC_OscInitStruct);
 8007344:	f107 0318 	add.w	r3, r7, #24
 8007348:	4618      	mov	r0, r3
 800734a:	f7fd fa5d 	bl	8004808 <HAL_RCC_OscConfig>

	 RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_SYSCLK;
 800734e:	2301      	movs	r3, #1
 8007350:	607b      	str	r3, [r7, #4]
	 RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8007352:	2302      	movs	r3, #2
 8007354:	60bb      	str	r3, [r7, #8]
	 RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8007356:	2300      	movs	r3, #0
 8007358:	60fb      	str	r3, [r7, #12]
	 RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800735a:	2300      	movs	r3, #0
 800735c:	613b      	str	r3, [r7, #16]
	 RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800735e:	2300      	movs	r3, #0
 8007360:	617b      	str	r3, [r7, #20]
	 HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1);
 8007362:	1d3b      	adds	r3, r7, #4
 8007364:	2101      	movs	r1, #1
 8007366:	4618      	mov	r0, r3
 8007368:	f7fd fcb2 	bl	8004cd0 <HAL_RCC_ClockConfig>

	 HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 800736c:	f7fd fe1a 	bl	8004fa4 <HAL_RCC_GetHCLKFreq>
 8007370:	4603      	mov	r3, r0
 8007372:	4a0a      	ldr	r2, [pc, #40]	; (800739c <systemClock_Config+0x78>)
 8007374:	fba2 2303 	umull	r2, r3, r2, r3
 8007378:	099b      	lsrs	r3, r3, #6
 800737a:	4618      	mov	r0, r3
 800737c:	f7fa fd25 	bl	8001dca <HAL_SYSTICK_Config>
	 HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8007380:	2004      	movs	r0, #4
 8007382:	f7fa fd2f 	bl	8001de4 <HAL_SYSTICK_CLKSourceConfig>

	  /* SysTick_IRQn interrupt configuration */
	  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8007386:	2200      	movs	r2, #0
 8007388:	2100      	movs	r1, #0
 800738a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800738e:	f7fa fce4 	bl	8001d5a <HAL_NVIC_SetPriority>

}
 8007392:	bf00      	nop
 8007394:	3740      	adds	r7, #64	; 0x40
 8007396:	46bd      	mov	sp, r7
 8007398:	bd80      	pop	{r7, pc}
 800739a:	bf00      	nop
 800739c:	10624dd3 	.word	0x10624dd3

080073a0 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80073a0:	b480      	push	{r7}
 80073a2:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 80073a4:	4b15      	ldr	r3, [pc, #84]	; (80073fc <SystemInit+0x5c>)
 80073a6:	681b      	ldr	r3, [r3, #0]
 80073a8:	4a14      	ldr	r2, [pc, #80]	; (80073fc <SystemInit+0x5c>)
 80073aa:	f043 0301 	orr.w	r3, r3, #1
 80073ae:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= (uint32_t)0xF8FF0000;
 80073b0:	4b12      	ldr	r3, [pc, #72]	; (80073fc <SystemInit+0x5c>)
 80073b2:	685a      	ldr	r2, [r3, #4]
 80073b4:	4911      	ldr	r1, [pc, #68]	; (80073fc <SystemInit+0x5c>)
 80073b6:	4b12      	ldr	r3, [pc, #72]	; (8007400 <SystemInit+0x60>)
 80073b8:	4013      	ands	r3, r2
 80073ba:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= (uint32_t)0xF0FF0000;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 80073bc:	4b0f      	ldr	r3, [pc, #60]	; (80073fc <SystemInit+0x5c>)
 80073be:	681b      	ldr	r3, [r3, #0]
 80073c0:	4a0e      	ldr	r2, [pc, #56]	; (80073fc <SystemInit+0x5c>)
 80073c2:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 80073c6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80073ca:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 80073cc:	4b0b      	ldr	r3, [pc, #44]	; (80073fc <SystemInit+0x5c>)
 80073ce:	681b      	ldr	r3, [r3, #0]
 80073d0:	4a0a      	ldr	r2, [pc, #40]	; (80073fc <SystemInit+0x5c>)
 80073d2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80073d6:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= (uint32_t)0xFF80FFFF;
 80073d8:	4b08      	ldr	r3, [pc, #32]	; (80073fc <SystemInit+0x5c>)
 80073da:	685b      	ldr	r3, [r3, #4]
 80073dc:	4a07      	ldr	r2, [pc, #28]	; (80073fc <SystemInit+0x5c>)
 80073de:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 80073e2:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000;
 80073e4:	4b05      	ldr	r3, [pc, #20]	; (80073fc <SystemInit+0x5c>)
 80073e6:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 80073ea:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 80073ec:	4b05      	ldr	r3, [pc, #20]	; (8007404 <SystemInit+0x64>)
 80073ee:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80073f2:	609a      	str	r2, [r3, #8]
#endif 
}
 80073f4:	bf00      	nop
 80073f6:	46bd      	mov	sp, r7
 80073f8:	bc80      	pop	{r7}
 80073fa:	4770      	bx	lr
 80073fc:	40021000 	.word	0x40021000
 8007400:	f8ff0000 	.word	0xf8ff0000
 8007404:	e000ed00 	.word	0xe000ed00

08007408 <num2str>:
#include "util.h"

//=================================================================
void num2str(char *s, unsigned int number, unsigned int base, unsigned int size, int sp)
{
 8007408:	b480      	push	{r7}
 800740a:	b089      	sub	sp, #36	; 0x24
 800740c:	af00      	add	r7, sp, #0
 800740e:	60f8      	str	r0, [r7, #12]
 8007410:	60b9      	str	r1, [r7, #8]
 8007412:	607a      	str	r2, [r7, #4]
 8007414:	603b      	str	r3, [r7, #0]
        static char  hexChars[] = "0123456789ABCDEF";

        char *p=s;
 8007416:	68fb      	ldr	r3, [r7, #12]
 8007418:	617b      	str	r3, [r7, #20]
        unsigned int i;
        char tmp;

        // get digits
        do {
                *s++=hexChars[number % base];
 800741a:	68bb      	ldr	r3, [r7, #8]
 800741c:	687a      	ldr	r2, [r7, #4]
 800741e:	fbb3 f2f2 	udiv	r2, r3, r2
 8007422:	6879      	ldr	r1, [r7, #4]
 8007424:	fb01 f202 	mul.w	r2, r1, r2
 8007428:	1a9a      	subs	r2, r3, r2
 800742a:	68fb      	ldr	r3, [r7, #12]
 800742c:	1c59      	adds	r1, r3, #1
 800742e:	60f9      	str	r1, [r7, #12]
 8007430:	4935      	ldr	r1, [pc, #212]	; (8007508 <num2str+0x100>)
 8007432:	5c8a      	ldrb	r2, [r1, r2]
 8007434:	701a      	strb	r2, [r3, #0]
        } while (number /= base);
 8007436:	68ba      	ldr	r2, [r7, #8]
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	fbb2 f3f3 	udiv	r3, r2, r3
 800743e:	60bb      	str	r3, [r7, #8]
 8007440:	68bb      	ldr	r3, [r7, #8]
 8007442:	2b00      	cmp	r3, #0
 8007444:	d1e9      	bne.n	800741a <num2str+0x12>
        *s='\0';
 8007446:	68fb      	ldr	r3, [r7, #12]
 8007448:	2200      	movs	r2, #0
 800744a:	701a      	strb	r2, [r3, #0]

        // reverse string
        cnt=s-p;
 800744c:	68fa      	ldr	r2, [r7, #12]
 800744e:	697b      	ldr	r3, [r7, #20]
 8007450:	1ad3      	subs	r3, r2, r3
 8007452:	613b      	str	r3, [r7, #16]
        for (i=0;i<cnt/2;i++) {
 8007454:	2300      	movs	r3, #0
 8007456:	61fb      	str	r3, [r7, #28]
 8007458:	e01a      	b.n	8007490 <num2str+0x88>
                tmp=p[i]; p[i] = p[cnt-i-1]; p[cnt-i-1]=tmp;
 800745a:	697a      	ldr	r2, [r7, #20]
 800745c:	69fb      	ldr	r3, [r7, #28]
 800745e:	4413      	add	r3, r2
 8007460:	781b      	ldrb	r3, [r3, #0]
 8007462:	76fb      	strb	r3, [r7, #27]
 8007464:	693a      	ldr	r2, [r7, #16]
 8007466:	69fb      	ldr	r3, [r7, #28]
 8007468:	1ad3      	subs	r3, r2, r3
 800746a:	3b01      	subs	r3, #1
 800746c:	697a      	ldr	r2, [r7, #20]
 800746e:	441a      	add	r2, r3
 8007470:	6979      	ldr	r1, [r7, #20]
 8007472:	69fb      	ldr	r3, [r7, #28]
 8007474:	440b      	add	r3, r1
 8007476:	7812      	ldrb	r2, [r2, #0]
 8007478:	701a      	strb	r2, [r3, #0]
 800747a:	693a      	ldr	r2, [r7, #16]
 800747c:	69fb      	ldr	r3, [r7, #28]
 800747e:	1ad3      	subs	r3, r2, r3
 8007480:	3b01      	subs	r3, #1
 8007482:	697a      	ldr	r2, [r7, #20]
 8007484:	4413      	add	r3, r2
 8007486:	7efa      	ldrb	r2, [r7, #27]
 8007488:	701a      	strb	r2, [r3, #0]
        for (i=0;i<cnt/2;i++) {
 800748a:	69fb      	ldr	r3, [r7, #28]
 800748c:	3301      	adds	r3, #1
 800748e:	61fb      	str	r3, [r7, #28]
 8007490:	693b      	ldr	r3, [r7, #16]
 8007492:	085b      	lsrs	r3, r3, #1
 8007494:	69fa      	ldr	r2, [r7, #28]
 8007496:	429a      	cmp	r2, r3
 8007498:	d3df      	bcc.n	800745a <num2str+0x52>
        }

        // add extra space
        if (cnt<size) {
 800749a:	693a      	ldr	r2, [r7, #16]
 800749c:	683b      	ldr	r3, [r7, #0]
 800749e:	429a      	cmp	r2, r3
 80074a0:	d22d      	bcs.n	80074fe <num2str+0xf6>
                for (i=cnt;i==0;i--)
 80074a2:	693b      	ldr	r3, [r7, #16]
 80074a4:	61fb      	str	r3, [r7, #28]
 80074a6:	e00e      	b.n	80074c6 <num2str+0xbe>
                		{p[i+size-cnt]=p[i];}
 80074a8:	697a      	ldr	r2, [r7, #20]
 80074aa:	69fb      	ldr	r3, [r7, #28]
 80074ac:	441a      	add	r2, r3
 80074ae:	69f9      	ldr	r1, [r7, #28]
 80074b0:	683b      	ldr	r3, [r7, #0]
 80074b2:	4419      	add	r1, r3
 80074b4:	693b      	ldr	r3, [r7, #16]
 80074b6:	1acb      	subs	r3, r1, r3
 80074b8:	6979      	ldr	r1, [r7, #20]
 80074ba:	440b      	add	r3, r1
 80074bc:	7812      	ldrb	r2, [r2, #0]
 80074be:	701a      	strb	r2, [r3, #0]
                for (i=cnt;i==0;i--)
 80074c0:	69fb      	ldr	r3, [r7, #28]
 80074c2:	3b01      	subs	r3, #1
 80074c4:	61fb      	str	r3, [r7, #28]
 80074c6:	69fb      	ldr	r3, [r7, #28]
 80074c8:	2b00      	cmp	r3, #0
 80074ca:	d0ed      	beq.n	80074a8 <num2str+0xa0>
                if (sp) tmp=' '; else tmp='0';
 80074cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80074ce:	2b00      	cmp	r3, #0
 80074d0:	d002      	beq.n	80074d8 <num2str+0xd0>
 80074d2:	2320      	movs	r3, #32
 80074d4:	76fb      	strb	r3, [r7, #27]
 80074d6:	e001      	b.n	80074dc <num2str+0xd4>
 80074d8:	2330      	movs	r3, #48	; 0x30
 80074da:	76fb      	strb	r3, [r7, #27]
                for (i=0;i<size-cnt;i++) p[i]=tmp;
 80074dc:	2300      	movs	r3, #0
 80074de:	61fb      	str	r3, [r7, #28]
 80074e0:	e007      	b.n	80074f2 <num2str+0xea>
 80074e2:	697a      	ldr	r2, [r7, #20]
 80074e4:	69fb      	ldr	r3, [r7, #28]
 80074e6:	4413      	add	r3, r2
 80074e8:	7efa      	ldrb	r2, [r7, #27]
 80074ea:	701a      	strb	r2, [r3, #0]
 80074ec:	69fb      	ldr	r3, [r7, #28]
 80074ee:	3301      	adds	r3, #1
 80074f0:	61fb      	str	r3, [r7, #28]
 80074f2:	683a      	ldr	r2, [r7, #0]
 80074f4:	693b      	ldr	r3, [r7, #16]
 80074f6:	1ad3      	subs	r3, r2, r3
 80074f8:	69fa      	ldr	r2, [r7, #28]
 80074fa:	429a      	cmp	r2, r3
 80074fc:	d3f1      	bcc.n	80074e2 <num2str+0xda>
        }
}
 80074fe:	bf00      	nop
 8007500:	3724      	adds	r7, #36	; 0x24
 8007502:	46bd      	mov	sp, r7
 8007504:	bc80      	pop	{r7}
 8007506:	4770      	bx	lr
 8007508:	2000000c 	.word	0x2000000c

0800750c <str2num>:

//=================================================================
unsigned int str2num(char *s, unsigned base)
{
 800750c:	b480      	push	{r7}
 800750e:	b087      	sub	sp, #28
 8007510:	af00      	add	r7, sp, #0
 8007512:	6078      	str	r0, [r7, #4]
 8007514:	6039      	str	r1, [r7, #0]
	unsigned int u=0, d;
 8007516:	2300      	movs	r3, #0
 8007518:	617b      	str	r3, [r7, #20]
	char ch=*s++;
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	1c5a      	adds	r2, r3, #1
 800751e:	607a      	str	r2, [r7, #4]
 8007520:	781b      	ldrb	r3, [r3, #0]
 8007522:	73fb      	strb	r3, [r7, #15]
	while (ch) {
 8007524:	e02e      	b.n	8007584 <str2num+0x78>
		if ((ch>='0') && (ch<='9')) d=ch-'0';
 8007526:	7bfb      	ldrb	r3, [r7, #15]
 8007528:	2b2f      	cmp	r3, #47	; 0x2f
 800752a:	d906      	bls.n	800753a <str2num+0x2e>
 800752c:	7bfb      	ldrb	r3, [r7, #15]
 800752e:	2b39      	cmp	r3, #57	; 0x39
 8007530:	d803      	bhi.n	800753a <str2num+0x2e>
 8007532:	7bfb      	ldrb	r3, [r7, #15]
 8007534:	3b30      	subs	r3, #48	; 0x30
 8007536:	613b      	str	r3, [r7, #16]
 8007538:	e018      	b.n	800756c <str2num+0x60>
		else if ((base==16) && (ch>='A') && (ch<='F')) d=ch-'A'+10;
 800753a:	683b      	ldr	r3, [r7, #0]
 800753c:	2b10      	cmp	r3, #16
 800753e:	d109      	bne.n	8007554 <str2num+0x48>
 8007540:	7bfb      	ldrb	r3, [r7, #15]
 8007542:	2b40      	cmp	r3, #64	; 0x40
 8007544:	d906      	bls.n	8007554 <str2num+0x48>
 8007546:	7bfb      	ldrb	r3, [r7, #15]
 8007548:	2b46      	cmp	r3, #70	; 0x46
 800754a:	d803      	bhi.n	8007554 <str2num+0x48>
 800754c:	7bfb      	ldrb	r3, [r7, #15]
 800754e:	3b37      	subs	r3, #55	; 0x37
 8007550:	613b      	str	r3, [r7, #16]
 8007552:	e00b      	b.n	800756c <str2num+0x60>
		else if ((base==16) && (ch>='a') && (ch<='f')) d=ch-'a'+10;
 8007554:	683b      	ldr	r3, [r7, #0]
 8007556:	2b10      	cmp	r3, #16
 8007558:	d117      	bne.n	800758a <str2num+0x7e>
 800755a:	7bfb      	ldrb	r3, [r7, #15]
 800755c:	2b60      	cmp	r3, #96	; 0x60
 800755e:	d914      	bls.n	800758a <str2num+0x7e>
 8007560:	7bfb      	ldrb	r3, [r7, #15]
 8007562:	2b66      	cmp	r3, #102	; 0x66
 8007564:	d811      	bhi.n	800758a <str2num+0x7e>
 8007566:	7bfb      	ldrb	r3, [r7, #15]
 8007568:	3b57      	subs	r3, #87	; 0x57
 800756a:	613b      	str	r3, [r7, #16]
		else break;
		u=d+base*u;
 800756c:	683b      	ldr	r3, [r7, #0]
 800756e:	697a      	ldr	r2, [r7, #20]
 8007570:	fb02 f303 	mul.w	r3, r2, r3
 8007574:	693a      	ldr	r2, [r7, #16]
 8007576:	4413      	add	r3, r2
 8007578:	617b      	str	r3, [r7, #20]
		ch=*s++;
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	1c5a      	adds	r2, r3, #1
 800757e:	607a      	str	r2, [r7, #4]
 8007580:	781b      	ldrb	r3, [r3, #0]
 8007582:	73fb      	strb	r3, [r7, #15]
	while (ch) {
 8007584:	7bfb      	ldrb	r3, [r7, #15]
 8007586:	2b00      	cmp	r3, #0
 8007588:	d1cd      	bne.n	8007526 <str2num+0x1a>
	}
	return u;
 800758a:	697b      	ldr	r3, [r7, #20]
}
 800758c:	4618      	mov	r0, r3
 800758e:	371c      	adds	r7, #28
 8007590:	46bd      	mov	sp, r7
 8007592:	bc80      	pop	{r7}
 8007594:	4770      	bx	lr

08007596 <reverse>:

//=================================================================
void reverse(char *str, int len)
{
 8007596:	b480      	push	{r7}
 8007598:	b087      	sub	sp, #28
 800759a:	af00      	add	r7, sp, #0
 800759c:	6078      	str	r0, [r7, #4]
 800759e:	6039      	str	r1, [r7, #0]
    int i=0, j=len-1, temp;
 80075a0:	2300      	movs	r3, #0
 80075a2:	617b      	str	r3, [r7, #20]
 80075a4:	683b      	ldr	r3, [r7, #0]
 80075a6:	3b01      	subs	r3, #1
 80075a8:	613b      	str	r3, [r7, #16]
    while (i<j)
 80075aa:	e018      	b.n	80075de <reverse+0x48>
    {
        temp = str[i];
 80075ac:	697b      	ldr	r3, [r7, #20]
 80075ae:	687a      	ldr	r2, [r7, #4]
 80075b0:	4413      	add	r3, r2
 80075b2:	781b      	ldrb	r3, [r3, #0]
 80075b4:	60fb      	str	r3, [r7, #12]
        str[i] = str[j];
 80075b6:	693b      	ldr	r3, [r7, #16]
 80075b8:	687a      	ldr	r2, [r7, #4]
 80075ba:	441a      	add	r2, r3
 80075bc:	697b      	ldr	r3, [r7, #20]
 80075be:	6879      	ldr	r1, [r7, #4]
 80075c0:	440b      	add	r3, r1
 80075c2:	7812      	ldrb	r2, [r2, #0]
 80075c4:	701a      	strb	r2, [r3, #0]
        str[j] = temp;
 80075c6:	693b      	ldr	r3, [r7, #16]
 80075c8:	687a      	ldr	r2, [r7, #4]
 80075ca:	4413      	add	r3, r2
 80075cc:	68fa      	ldr	r2, [r7, #12]
 80075ce:	b2d2      	uxtb	r2, r2
 80075d0:	701a      	strb	r2, [r3, #0]
        i++; j--;
 80075d2:	697b      	ldr	r3, [r7, #20]
 80075d4:	3301      	adds	r3, #1
 80075d6:	617b      	str	r3, [r7, #20]
 80075d8:	693b      	ldr	r3, [r7, #16]
 80075da:	3b01      	subs	r3, #1
 80075dc:	613b      	str	r3, [r7, #16]
    while (i<j)
 80075de:	697a      	ldr	r2, [r7, #20]
 80075e0:	693b      	ldr	r3, [r7, #16]
 80075e2:	429a      	cmp	r2, r3
 80075e4:	dbe2      	blt.n	80075ac <reverse+0x16>
    }
}
 80075e6:	bf00      	nop
 80075e8:	bf00      	nop
 80075ea:	371c      	adds	r7, #28
 80075ec:	46bd      	mov	sp, r7
 80075ee:	bc80      	pop	{r7}
 80075f0:	4770      	bx	lr
	...

080075f4 <intToStr>:

//=================================================================
int intToStr(int x, char str[], int d)
{
 80075f4:	b580      	push	{r7, lr}
 80075f6:	b086      	sub	sp, #24
 80075f8:	af00      	add	r7, sp, #0
 80075fa:	60f8      	str	r0, [r7, #12]
 80075fc:	60b9      	str	r1, [r7, #8]
 80075fe:	607a      	str	r2, [r7, #4]
    int i = 0;
 8007600:	2300      	movs	r3, #0
 8007602:	617b      	str	r3, [r7, #20]
    while (x)
 8007604:	e01d      	b.n	8007642 <intToStr+0x4e>
    {
        str[i++] = (x%10) + '0';
 8007606:	68fa      	ldr	r2, [r7, #12]
 8007608:	4b1d      	ldr	r3, [pc, #116]	; (8007680 <intToStr+0x8c>)
 800760a:	fb83 1302 	smull	r1, r3, r3, r2
 800760e:	1099      	asrs	r1, r3, #2
 8007610:	17d3      	asrs	r3, r2, #31
 8007612:	1ac9      	subs	r1, r1, r3
 8007614:	460b      	mov	r3, r1
 8007616:	009b      	lsls	r3, r3, #2
 8007618:	440b      	add	r3, r1
 800761a:	005b      	lsls	r3, r3, #1
 800761c:	1ad1      	subs	r1, r2, r3
 800761e:	b2ca      	uxtb	r2, r1
 8007620:	697b      	ldr	r3, [r7, #20]
 8007622:	1c59      	adds	r1, r3, #1
 8007624:	6179      	str	r1, [r7, #20]
 8007626:	4619      	mov	r1, r3
 8007628:	68bb      	ldr	r3, [r7, #8]
 800762a:	440b      	add	r3, r1
 800762c:	3230      	adds	r2, #48	; 0x30
 800762e:	b2d2      	uxtb	r2, r2
 8007630:	701a      	strb	r2, [r3, #0]
        x = x/10;
 8007632:	68fb      	ldr	r3, [r7, #12]
 8007634:	4a12      	ldr	r2, [pc, #72]	; (8007680 <intToStr+0x8c>)
 8007636:	fb82 1203 	smull	r1, r2, r2, r3
 800763a:	1092      	asrs	r2, r2, #2
 800763c:	17db      	asrs	r3, r3, #31
 800763e:	1ad3      	subs	r3, r2, r3
 8007640:	60fb      	str	r3, [r7, #12]
    while (x)
 8007642:	68fb      	ldr	r3, [r7, #12]
 8007644:	2b00      	cmp	r3, #0
 8007646:	d1de      	bne.n	8007606 <intToStr+0x12>
    }

    // If number of digits required is more, then
    // add 0s at the beginning
    while (i < d)
 8007648:	e007      	b.n	800765a <intToStr+0x66>
        str[i++] = '0';
 800764a:	697b      	ldr	r3, [r7, #20]
 800764c:	1c5a      	adds	r2, r3, #1
 800764e:	617a      	str	r2, [r7, #20]
 8007650:	461a      	mov	r2, r3
 8007652:	68bb      	ldr	r3, [r7, #8]
 8007654:	4413      	add	r3, r2
 8007656:	2230      	movs	r2, #48	; 0x30
 8007658:	701a      	strb	r2, [r3, #0]
    while (i < d)
 800765a:	697a      	ldr	r2, [r7, #20]
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	429a      	cmp	r2, r3
 8007660:	dbf3      	blt.n	800764a <intToStr+0x56>

    reverse(str, i);
 8007662:	6979      	ldr	r1, [r7, #20]
 8007664:	68b8      	ldr	r0, [r7, #8]
 8007666:	f7ff ff96 	bl	8007596 <reverse>
    str[i] = '\0';
 800766a:	697b      	ldr	r3, [r7, #20]
 800766c:	68ba      	ldr	r2, [r7, #8]
 800766e:	4413      	add	r3, r2
 8007670:	2200      	movs	r2, #0
 8007672:	701a      	strb	r2, [r3, #0]
    return i;
 8007674:	697b      	ldr	r3, [r7, #20]
}
 8007676:	4618      	mov	r0, r3
 8007678:	3718      	adds	r7, #24
 800767a:	46bd      	mov	sp, r7
 800767c:	bd80      	pop	{r7, pc}
 800767e:	bf00      	nop
 8007680:	66666667 	.word	0x66666667

08007684 <float2str>:
//=================================================================
void float2str( char *res, float n, int afterpoint)
{
 8007684:	b580      	push	{r7, lr}
 8007686:	b088      	sub	sp, #32
 8007688:	af00      	add	r7, sp, #0
 800768a:	60f8      	str	r0, [r7, #12]
 800768c:	60b9      	str	r1, [r7, #8]
 800768e:	607a      	str	r2, [r7, #4]
    // Extract integer part
    int ipart = (int)n;
 8007690:	68b8      	ldr	r0, [r7, #8]
 8007692:	f7f9 fbd7 	bl	8000e44 <__aeabi_f2iz>
 8007696:	4603      	mov	r3, r0
 8007698:	61fb      	str	r3, [r7, #28]

    // Extract floating part
    float fpart = n - (float)ipart;
 800769a:	69f8      	ldr	r0, [r7, #28]
 800769c:	f7f9 fa2e 	bl	8000afc <__aeabi_i2f>
 80076a0:	4603      	mov	r3, r0
 80076a2:	4619      	mov	r1, r3
 80076a4:	68b8      	ldr	r0, [r7, #8]
 80076a6:	f7f9 f973 	bl	8000990 <__aeabi_fsub>
 80076aa:	4603      	mov	r3, r0
 80076ac:	61bb      	str	r3, [r7, #24]

    // convert integer part to string
    int i = intToStr(ipart, res, 0);
 80076ae:	2200      	movs	r2, #0
 80076b0:	68f9      	ldr	r1, [r7, #12]
 80076b2:	69f8      	ldr	r0, [r7, #28]
 80076b4:	f7ff ff9e 	bl	80075f4 <intToStr>
 80076b8:	6178      	str	r0, [r7, #20]

    // check for display option after point
    if (afterpoint != 0)
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	2b00      	cmp	r3, #0
 80076be:	d022      	beq.n	8007706 <float2str+0x82>
    {
        res[i] = '.';  // add dot
 80076c0:	697b      	ldr	r3, [r7, #20]
 80076c2:	68fa      	ldr	r2, [r7, #12]
 80076c4:	4413      	add	r3, r2
 80076c6:	222e      	movs	r2, #46	; 0x2e
 80076c8:	701a      	strb	r2, [r3, #0]

        // Get the value of fraction part upto given no.
        // of points after dot. The third parameter is needed
        // to handle cases like 233.007
        fpart = fpart * (float)myPow(10.0, afterpoint);
 80076ca:	687a      	ldr	r2, [r7, #4]
 80076cc:	f04f 0000 	mov.w	r0, #0
 80076d0:	490f      	ldr	r1, [pc, #60]	; (8007710 <float2str+0x8c>)
 80076d2:	f000 f81f 	bl	8007714 <myPow>
 80076d6:	4602      	mov	r2, r0
 80076d8:	460b      	mov	r3, r1
 80076da:	4610      	mov	r0, r2
 80076dc:	4619      	mov	r1, r3
 80076de:	f7f9 f903 	bl	80008e8 <__aeabi_d2f>
 80076e2:	4603      	mov	r3, r0
 80076e4:	4619      	mov	r1, r3
 80076e6:	69b8      	ldr	r0, [r7, #24]
 80076e8:	f7f9 fa5c 	bl	8000ba4 <__aeabi_fmul>
 80076ec:	4603      	mov	r3, r0
 80076ee:	61bb      	str	r3, [r7, #24]

        intToStr((int)fpart, res + i + 1, afterpoint);
 80076f0:	69b8      	ldr	r0, [r7, #24]
 80076f2:	f7f9 fba7 	bl	8000e44 <__aeabi_f2iz>
 80076f6:	697b      	ldr	r3, [r7, #20]
 80076f8:	3301      	adds	r3, #1
 80076fa:	68fa      	ldr	r2, [r7, #12]
 80076fc:	4413      	add	r3, r2
 80076fe:	687a      	ldr	r2, [r7, #4]
 8007700:	4619      	mov	r1, r3
 8007702:	f7ff ff77 	bl	80075f4 <intToStr>
    }
}
 8007706:	bf00      	nop
 8007708:	3720      	adds	r7, #32
 800770a:	46bd      	mov	sp, r7
 800770c:	bd80      	pop	{r7, pc}
 800770e:	bf00      	nop
 8007710:	40240000 	.word	0x40240000

08007714 <myPow>:
//=================================================================
double myPow(double x, int n) {
 8007714:	b580      	push	{r7, lr}
 8007716:	b088      	sub	sp, #32
 8007718:	af00      	add	r7, sp, #0
 800771a:	e9c7 0102 	strd	r0, r1, [r7, #8]
 800771e:	607a      	str	r2, [r7, #4]
    unsigned int p = abs(n);
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	2b00      	cmp	r3, #0
 8007724:	bfb8      	it	lt
 8007726:	425b      	neglt	r3, r3
 8007728:	61fb      	str	r3, [r7, #28]
    double result = 1;
 800772a:	f04f 0200 	mov.w	r2, #0
 800772e:	4b1b      	ldr	r3, [pc, #108]	; (800779c <myPow+0x88>)
 8007730:	e9c7 2304 	strd	r2, r3, [r7, #16]
    while(p > 0)
 8007734:	e01b      	b.n	800776e <myPow+0x5a>
    {
        if(p & 1) // if bit is set
 8007736:	69fb      	ldr	r3, [r7, #28]
 8007738:	f003 0301 	and.w	r3, r3, #1
 800773c:	2b00      	cmp	r3, #0
 800773e:	d009      	beq.n	8007754 <myPow+0x40>
        {
            result = result * x;
 8007740:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8007744:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8007748:	f7f8 febc 	bl	80004c4 <__aeabi_dmul>
 800774c:	4602      	mov	r2, r0
 800774e:	460b      	mov	r3, r1
 8007750:	e9c7 2304 	strd	r2, r3, [r7, #16]
        }
        p = p >> 1;
 8007754:	69fb      	ldr	r3, [r7, #28]
 8007756:	085b      	lsrs	r3, r3, #1
 8007758:	61fb      	str	r3, [r7, #28]
        x = x * x;
 800775a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800775e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8007762:	f7f8 feaf 	bl	80004c4 <__aeabi_dmul>
 8007766:	4602      	mov	r2, r0
 8007768:	460b      	mov	r3, r1
 800776a:	e9c7 2302 	strd	r2, r3, [r7, #8]
    while(p > 0)
 800776e:	69fb      	ldr	r3, [r7, #28]
 8007770:	2b00      	cmp	r3, #0
 8007772:	d1e0      	bne.n	8007736 <myPow+0x22>
    }

    if(n < 0)
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	2b00      	cmp	r3, #0
 8007778:	da09      	bge.n	800778e <myPow+0x7a>
    {
        return 1/result;
 800777a:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800777e:	f04f 0000 	mov.w	r0, #0
 8007782:	4906      	ldr	r1, [pc, #24]	; (800779c <myPow+0x88>)
 8007784:	f7f8 ffc8 	bl	8000718 <__aeabi_ddiv>
 8007788:	4602      	mov	r2, r0
 800778a:	460b      	mov	r3, r1
 800778c:	e001      	b.n	8007792 <myPow+0x7e>
    }
    return result;
 800778e:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
}
 8007792:	4610      	mov	r0, r2
 8007794:	4619      	mov	r1, r3
 8007796:	3720      	adds	r7, #32
 8007798:	46bd      	mov	sp, r7
 800779a:	bd80      	pop	{r7, pc}
 800779c:	3ff00000 	.word	0x3ff00000

080077a0 <HAL_GPIO_EXTI_Callback>:
void SetDisplayString(const char *msg) {
    DISP_NextString=msg;
}
//============================================================
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80077a0:	b580      	push	{r7, lr}
 80077a2:	b082      	sub	sp, #8
 80077a4:	af00      	add	r7, sp, #0
 80077a6:	4603      	mov	r3, r0
 80077a8:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin==GPIO_PIN_0)
 80077aa:	88fb      	ldrh	r3, [r7, #6]
 80077ac:	2b01      	cmp	r3, #1
 80077ae:	d101      	bne.n	80077b4 <HAL_GPIO_EXTI_Callback+0x14>
	{
		XNUCLEO6180XA1_UserIntHandler();
 80077b0:	f000 f812 	bl	80077d8 <XNUCLEO6180XA1_UserIntHandler>
	}
}
 80077b4:	bf00      	nop
 80077b6:	3708      	adds	r7, #8
 80077b8:	46bd      	mov	sp, r7
 80077ba:	bd80      	pop	{r7, pc}

080077bc <HAL_SYSTICK_Callback>:
//============================================================

void HAL_SYSTICK_Callback(void){
 80077bc:	b480      	push	{r7}
 80077be:	af00      	add	r7, sp, #0
    g_TickCnt++;
 80077c0:	4b04      	ldr	r3, [pc, #16]	; (80077d4 <HAL_SYSTICK_Callback+0x18>)
 80077c2:	681b      	ldr	r3, [r3, #0]
 80077c4:	3301      	adds	r3, #1
 80077c6:	4a03      	ldr	r2, [pc, #12]	; (80077d4 <HAL_SYSTICK_Callback+0x18>)
 80077c8:	6013      	str	r3, [r2, #0]
}
 80077ca:	bf00      	nop
 80077cc:	46bd      	mov	sp, r7
 80077ce:	bc80      	pop	{r7}
 80077d0:	4770      	bx	lr
 80077d2:	bf00      	nop
 80077d4:	200000c4 	.word	0x200000c4

080077d8 <XNUCLEO6180XA1_UserIntHandler>:
    return state;
}
//============================================================
volatile int IntrFired=0;
/* VL6180x shield user interrupt handler */
void XNUCLEO6180XA1_UserIntHandler(void){
 80077d8:	b480      	push	{r7}
 80077da:	af00      	add	r7, sp, #0
    IntrFired ++;
 80077dc:	4b04      	ldr	r3, [pc, #16]	; (80077f0 <XNUCLEO6180XA1_UserIntHandler+0x18>)
 80077de:	681b      	ldr	r3, [r3, #0]
 80077e0:	3301      	adds	r3, #1
 80077e2:	4a03      	ldr	r2, [pc, #12]	; (80077f0 <XNUCLEO6180XA1_UserIntHandler+0x18>)
 80077e4:	6013      	str	r3, [r2, #0]
}
 80077e6:	bf00      	nop
 80077e8:	46bd      	mov	sp, r7
 80077ea:	bc80      	pop	{r7}
 80077ec:	4770      	bx	lr
 80077ee:	bf00      	nop
 80077f0:	200000bc 	.word	0x200000bc

080077f4 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 80077f4:	2100      	movs	r1, #0
  b LoopCopyDataInit
 80077f6:	e003      	b.n	8007800 <LoopCopyDataInit>

080077f8 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 80077f8:	4b0b      	ldr	r3, [pc, #44]	; (8007828 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 80077fa:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 80077fc:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 80077fe:	3104      	adds	r1, #4

08007800 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8007800:	480a      	ldr	r0, [pc, #40]	; (800782c <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8007802:	4b0b      	ldr	r3, [pc, #44]	; (8007830 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8007804:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8007806:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8007808:	d3f6      	bcc.n	80077f8 <CopyDataInit>
  ldr r2, =_sbss
 800780a:	4a0a      	ldr	r2, [pc, #40]	; (8007834 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 800780c:	e002      	b.n	8007814 <LoopFillZerobss>

0800780e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 800780e:	2300      	movs	r3, #0
  str r3, [r2], #4
 8007810:	f842 3b04 	str.w	r3, [r2], #4

08007814 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8007814:	4b08      	ldr	r3, [pc, #32]	; (8007838 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8007816:	429a      	cmp	r2, r3
  bcc FillZerobss
 8007818:	d3f9      	bcc.n	800780e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800781a:	f7ff fdc1 	bl	80073a0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800781e:	f000 f80f 	bl	8007840 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8007822:	f7fe ffe1 	bl	80067e8 <main>
  bx lr
 8007826:	4770      	bx	lr
  ldr r3, =_sidata
 8007828:	08007a14 	.word	0x08007a14
  ldr r0, =_sdata
 800782c:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8007830:	20000020 	.word	0x20000020
  ldr r2, =_sbss
 8007834:	20000020 	.word	0x20000020
  ldr r3, = _ebss
 8007838:	20000568 	.word	0x20000568

0800783c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800783c:	e7fe      	b.n	800783c <ADC1_2_IRQHandler>
	...

08007840 <__libc_init_array>:
 8007840:	b570      	push	{r4, r5, r6, lr}
 8007842:	2600      	movs	r6, #0
 8007844:	4d0c      	ldr	r5, [pc, #48]	; (8007878 <__libc_init_array+0x38>)
 8007846:	4c0d      	ldr	r4, [pc, #52]	; (800787c <__libc_init_array+0x3c>)
 8007848:	1b64      	subs	r4, r4, r5
 800784a:	10a4      	asrs	r4, r4, #2
 800784c:	42a6      	cmp	r6, r4
 800784e:	d109      	bne.n	8007864 <__libc_init_array+0x24>
 8007850:	f000 f81a 	bl	8007888 <_init>
 8007854:	2600      	movs	r6, #0
 8007856:	4d0a      	ldr	r5, [pc, #40]	; (8007880 <__libc_init_array+0x40>)
 8007858:	4c0a      	ldr	r4, [pc, #40]	; (8007884 <__libc_init_array+0x44>)
 800785a:	1b64      	subs	r4, r4, r5
 800785c:	10a4      	asrs	r4, r4, #2
 800785e:	42a6      	cmp	r6, r4
 8007860:	d105      	bne.n	800786e <__libc_init_array+0x2e>
 8007862:	bd70      	pop	{r4, r5, r6, pc}
 8007864:	f855 3b04 	ldr.w	r3, [r5], #4
 8007868:	4798      	blx	r3
 800786a:	3601      	adds	r6, #1
 800786c:	e7ee      	b.n	800784c <__libc_init_array+0xc>
 800786e:	f855 3b04 	ldr.w	r3, [r5], #4
 8007872:	4798      	blx	r3
 8007874:	3601      	adds	r6, #1
 8007876:	e7f2      	b.n	800785e <__libc_init_array+0x1e>
 8007878:	08007a0c 	.word	0x08007a0c
 800787c:	08007a0c 	.word	0x08007a0c
 8007880:	08007a0c 	.word	0x08007a0c
 8007884:	08007a10 	.word	0x08007a10

08007888 <_init>:
 8007888:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800788a:	bf00      	nop
 800788c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800788e:	bc08      	pop	{r3}
 8007890:	469e      	mov	lr, r3
 8007892:	4770      	bx	lr

08007894 <_fini>:
 8007894:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007896:	bf00      	nop
 8007898:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800789a:	bc08      	pop	{r3}
 800789c:	469e      	mov	lr, r3
 800789e:	4770      	bx	lr
